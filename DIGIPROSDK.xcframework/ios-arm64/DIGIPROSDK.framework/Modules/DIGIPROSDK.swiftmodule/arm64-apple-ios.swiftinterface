// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name DIGIPROSDK
import AVFoundation
import Accelerate
import CFNetwork
import CommonCrypto
import Compression
import CoreData
import CoreImage
@_exported import DIGIPROSDK
import Darwin
import Dispatch
import Eureka
import Foundation
import LocalAuthentication
import MetalKit
import QuartzCore
import Security
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import zlib
public protocol AEAD {
  static var kLen: Swift.Int { get }
  static var ivRange: Swift.Range<Swift.Int> { get }
}
public func any<A>(on queue: Dispatch.DispatchQueue = .main, _ promises: DIGIPROSDK.Promise<A>...) -> DIGIPROSDK.Promise<A>
public func any<A, S>(on queue: Dispatch.DispatchQueue = .main, _ promises: S) -> DIGIPROSDK.Promise<A> where S : Swift.Sequence, S.Element == DIGIPROSDK.Promise<A>
extension UIView : DIGIPROSDK.HeroCompatible {
  public typealias CompatibleType = UIKit.UIView
}
extension HeroExtension where Base : UIKit.UIView {
  public var id: Swift.String? {
    get
    set
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var isEnabledForSubviews: Swift.Bool {
    get
    set
  }
  public var modifiers: [DIGIPROSDK.HeroModifier]? {
    get
    set
  }
  public var modifierString: Swift.String? {
    get
    set
  }
}
extension UIView {
  @objc @available(*, deprecated, message: "Use hero.id instead")
  @IBInspectable dynamic public var heroID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use hero.isEnabled instead")
  @IBInspectable dynamic public var isHeroEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use hero.isEnabledForSubviews instead")
  @IBInspectable dynamic public var isHeroEnabledForSubviews: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Use hero.modifiers instead")
  public var heroModifiers: [DIGIPROSDK.HeroModifier]? {
    get
    set
  }
  @objc @available(*, deprecated, message: "Use hero.modifierString instead")
  @IBInspectable dynamic public var heroModifierString: Swift.String? {
    @objc get
    @objc set
  }
}
public protocol ConstraintConstantTarget {
}
extension CGPoint : DIGIPROSDK.ConstraintConstantTarget {
}
extension CGSize : DIGIPROSDK.ConstraintConstantTarget {
}
extension UIEdgeInsets : DIGIPROSDK.ConstraintConstantTarget {
}
public enum BannerHaptic {
  case light
  case medium
  case heavy
  case none
  public static func == (a: DIGIPROSDK.BannerHaptic, b: DIGIPROSDK.BannerHaptic) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class BannerHapticGenerator : ObjectiveC.NSObject {
  open class func generate(_ haptic: DIGIPROSDK.BannerHaptic)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEBranchCalculadora : DIGIPROSDK.EVObject {
  @objc public var branchID: Swift.String
  @objc public var branchName: Swift.String
  @objc public var branchSigla: Swift.String
  @objc public var branchBPID: Swift.String
  @objc public var Convenio: DIGIPROSDK.FEConvenioCalculadora
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers final public class CellRange {
  final public let from: DIGIPROSDK.Location
  final public let to: DIGIPROSDK.Location
  final public let columnCount: Swift.Int
  final public let rowCount: Swift.Int
  convenience public init(from: (row: Swift.Int, column: Swift.Int), to: (row: Swift.Int, column: Swift.Int))
  convenience public init(from: Foundation.IndexPath, to: Foundation.IndexPath)
  final public func contains(_ indexPath: Foundation.IndexPath) -> Swift.Bool
  final public func contains(_ cellRange: DIGIPROSDK.CellRange) -> Swift.Bool
  @objc deinit
}
extension CellRange : Swift.Hashable {
  final public var hashValue: Swift.Int {
    get
  }
  public static func == (lhs: DIGIPROSDK.CellRange, rhs: DIGIPROSDK.CellRange) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
}
extension CellRange : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class OcrIneObject : DIGIPROSDK.EVObject {
  @objc public var anchorcic: Swift.String
  @objc public var anchorclaveelector: Swift.String
  @objc public var anchorcurp: Swift.String
  @objc public var anchordomicilio: Swift.String
  @objc public var anchoremision: Swift.String
  @objc public var anchorestado: Swift.String
  @objc public var anchorfolio: Swift.String
  @objc public var anchorlocalidad: Swift.String
  @objc public var anchormunicipio: Swift.String
  @objc public var anchornombre: Swift.String
  @objc public var anchorregistro: Swift.String
  @objc public var anchorseccion: Swift.String
  @objc public var anchorsexo: Swift.String
  @objc public var anchorvigencia: Swift.String
  @objc public var motor: Swift.String
  @objc public var detectedcic: Swift.Bool
  @objc public var detectedocr: Swift.Bool
  @objc public var detectedclaveelector: Swift.Bool
  @objc public var detectedcurp: Swift.Bool
  @objc public var detecteddomicilio: Swift.Bool
  @objc public var detectedemision: Swift.Bool
  @objc public var detectedestado: Swift.Bool
  @objc public var detectedfolio: Swift.Bool
  @objc public var detectedlocalidad: Swift.Bool
  @objc public var detectedmunicipio: Swift.Bool
  @objc public var detectednombre: Swift.Bool
  @objc public var detectedregistro: Swift.Bool
  @objc public var detectedseccion: Swift.Bool
  @objc public var detectedsexo: Swift.Bool
  @objc public var detectedvigencia: Swift.Bool
  @objc public var detectedfecha: Swift.Bool
  @objc public var nombre: Swift.String
  @objc public var aPaterno: Swift.String
  @objc public var aMaterno: Swift.String
  @objc public var calle: Swift.String
  @objc public var colonia: Swift.String
  @objc public var delegacion: Swift.String
  @objc public var ciudad: Swift.String
  @objc public var cP: Swift.String
  @objc public var curp: Swift.String
  @objc public var rfc: Swift.String
  @objc public var seccion: Swift.String
  @objc public var claveElector: Swift.String
  @objc public var vigencia: Swift.String
  @objc public var fecha: Swift.String
  @objc public var edad: Swift.String
  @objc public var sexo: Swift.String
  @objc public var folio: Swift.String
  @objc public var registro: Swift.String
  @objc public var municipio: Swift.String
  @objc public var localidad: Swift.String
  @objc public var reposicion: Swift.String
  @objc public var estado: Swift.String
  @objc public var cic: Swift.String
  @objc public var ocr: Swift.String
  @objc public var emision: Swift.String
  @objc public var ineanverso: Swift.String
  @objc public var inereverso: Swift.String
  @objc public var detectados: Swift.Int
  @objc public var totales: Swift.Int
  @objc public var obtenerFrontal: Swift.Bool
  @objc public var obtenerReverso: Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEConsultaTemplate : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var Password: Swift.String
  @objc public var IP: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var GrupoAdminID: Swift.Int
  @objc public var LastID: Swift.String
  @objc public var NumberToGo: Swift.Int
  @objc public var Consulta: DIGIPROSDK.FETipoReporte
  @objc public var TotalRegistros: Swift.Int
  @objc public var RegistrosPorPagina: Swift.Int
  @objc public var JsonConsulta: Swift.String
  @objc public var Filtro: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
final public class Poly1305 : DIGIPROSDK.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    public static func == (a: DIGIPROSDK.Poly1305.Error, b: DIGIPROSDK.Poly1305.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static let blockSize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public typealias ConstraintInsets = UIKit.UIEdgeInsets
extension UIView {
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_left: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_top: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_right: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_bottom: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_leading: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_trailing: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_width: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_height: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_centerX: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_centerY: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_baseline: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, OSX 10.11, *)
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_lastBaseline: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, OSX 10.11, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_firstBaseline: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_leftMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_topMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_rightMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_bottomMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_leadingMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_trailingMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_centerXWithinMargins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_centerYWithinMargins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_edges: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_size: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public var snp_center: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_margins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, message: "Use newer snp.* syntax.")
  public var snp_centerWithinMargins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public func snp_prepareConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void) -> [DIGIPROSDK.Constraint]
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public func snp_makeConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public func snp_remakeConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public func snp_updateConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, message: "Use newer snp.* syntax.")
  public func snp_removeConstraints()
  public var snp: DIGIPROSDK.ConstraintViewDSL {
    get
  }
}
extension SpreadsheetView {
  @objc override dynamic public func resizableSnapshotView(from rect: CoreGraphics.CGRect, afterScreenUpdates afterUpdates: Swift.Bool, withCapInsets capInsets: UIKit.UIEdgeInsets) -> UIKit.UIView?
}
public struct MarginSettings {
  public var leftMargin: CoreGraphics.CGFloat
  public var miniMarginBetweenItems: CoreGraphics.CGFloat
  public var miniAppearWidthOfLastItem: CoreGraphics.CGFloat
  public var numberOfItemsPerScreen: Swift.Float
  public init()
  public init(leftMargin: CoreGraphics.CGFloat, miniMarginBetweenItems: CoreGraphics.CGFloat, miniAppearWidthOfLastItem: CoreGraphics.CGFloat)
  public init(leftMargin: CoreGraphics.CGFloat, numberOfItemsPerScreen: Swift.Float)
}
public enum ArrangeType {
  case byFrame
  case byNumber
  public static func == (a: DIGIPROSDK.ArrangeType, b: DIGIPROSDK.ArrangeType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class ASHorizontalScrollView : UIKit.UIScrollView, UIKit.UIScrollViewDelegate {
  @objc override dynamic open var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  open var arrangeType: DIGIPROSDK.ArrangeType
  open var itemY: CoreGraphics.CGFloat
  open var items: [UIKit.UIView]
  public var shouldCenterSubViews: Swift.Bool
  open var uniformItemSize: CoreGraphics.CGSize {
    get
    set
  }
  public var widthToScrollNextItem: CoreGraphics.CGFloat
  public var marginSettings: DIGIPROSDK.MarginSettings {
    get
  }
  public var defaultMarginSettings: DIGIPROSDK.MarginSettings
  public var marginSettings_320: DIGIPROSDK.MarginSettings?
  public var marginSettings_375: DIGIPROSDK.MarginSettings?
  public var marginSettings_414: DIGIPROSDK.MarginSettings?
  public var marginSettings_768: DIGIPROSDK.MarginSettings?
  public var marginSettings_480: DIGIPROSDK.MarginSettings?
  public var marginSettings_568: DIGIPROSDK.MarginSettings?
  public var marginSettings_667: DIGIPROSDK.MarginSettings?
  public var marginSettings_736: DIGIPROSDK.MarginSettings?
  public var marginSettings_812: DIGIPROSDK.MarginSettings?
  public var marginSettings_896: DIGIPROSDK.MarginSettings?
  public var marginSettings_1024: DIGIPROSDK.MarginSettings?
  public var marginSettings_1366: DIGIPROSDK.MarginSettings?
  open var itemsMargin: CoreGraphics.CGFloat
  open var leftMarginPx: CoreGraphics.CGFloat {
    get
  }
  open var miniMarginPxBetweenItems: CoreGraphics.CGFloat {
    get
  }
  open var miniAppearPxOfLastItem: CoreGraphics.CGFloat {
    get
  }
  open var numberOfItemsPerScreen: Swift.Float {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func touchesShouldCancel(in view: UIKit.UIView) -> Swift.Bool
  open func setItemsMarginOnce()
  open func calculateMarginBetweenItems() -> CoreGraphics.CGFloat
  open func calculateMarginByFrame() -> CoreGraphics.CGFloat
  open func calculateMarginByNumberPerScreen() -> CoreGraphics.CGFloat
  open func addItem(_ item: UIKit.UIView)
  open func addItems(_ items: [UIKit.UIView])
  open func removeItem(_ item: UIKit.UIView) -> Swift.Bool
  open func removeAllItems() -> Swift.Bool
  open func removeItemAtIndex(_ index: Swift.Int) -> Swift.Bool
  public func refreshSubView()
  public func centerSubviews() -> CoreGraphics.CGFloat
  @objc open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc deinit
}
extension UIFont {
  public func setStyle(_ style: Swift.String) -> UIKit.UIFont
  public func normal() -> UIKit.UIFont
  public func bold() -> UIKit.UIFont
  public func italic() -> UIKit.UIFont
  public func boldItalic() -> UIKit.UIFont
  public class func loadAllFonts()
  public class func getallFonts()
}
@objc @_hasMissingDesignatedInitializers public class NotificationBanner : DIGIPROSDK.BaseNotificationBanner {
  public static let BannerWillAppear: Foundation.Notification.Name
  public static let BannerDidAppear: Foundation.Notification.Name
  public static let BannerWillDisappear: Foundation.Notification.Name
  public static let BannerDidDisappear: Foundation.Notification.Name
  public static let BannerObjectKey: Swift.String
  public var subtitleLabel: DIGIPROSDK.MarqueeLabel? {
    get
  }
  public init(title: Swift.String, subtitle: Swift.String? = nil, leftView: UIKit.UIView? = nil, rightView: UIKit.UIView? = nil, style: DIGIPROSDK.BannerStyle = .info, colors: UIKit.UIColor? = nil, texts: UIKit.UIColor? = nil)
  convenience public init(attributedTitle: Foundation.NSAttributedString, attributedSubtitle: Foundation.NSAttributedString? = nil, leftView: UIKit.UIView? = nil, rightView: UIKit.UIView? = nil, style: DIGIPROSDK.BannerStyle = .info, colors: UIKit.UIColor? = nil)
  public init(customView: UIKit.UIView)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum PKCS7 {
}
@objc @_inheritsConvenienceInitializers public class FEAppSkin : DIGIPROSDK.EVObject {
  @objc public var ToolBarColor: Swift.String
  @objc public var ToolBarColorTexto: Swift.String
  @objc public var Login: DIGIPROSDK.FEAppSkinLogin
  @objc public var Splash: DIGIPROSDK.FEAppSkinSplash
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
extension CATransform3D : Swift.Equatable {
  public static func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class FEPlantillaData : DIGIPROSDK.EVObject {
  @objc public var IdPlantilla: Swift.Int
  @objc public var ExpID: Swift.Int
  @objc public var FechaActualizacion: Swift.String
  @objc public var NombreExpediente: Swift.String
  @objc public var MostrarExp: Swift.Bool
  @objc public var TipoDocID: Swift.Int
  @objc public var MostrarTipoDoc: Swift.Bool
  @objc public var NombreTipoDoc: Swift.String
  @objc public var XmlPlantilla: Swift.String
  @objc public var UsarCoordenadas: Swift.String
  @objc public var FlujoID: Swift.Int
  @objc public var NombreFlujo: Swift.String
  @objc public var VerNuevaCapturaMovil: Swift.Bool
  @objc public var EventosTareas: [DIGIPROSDK.FEEventosFlujo]
  @objc public var ListVariables: [DIGIPROSDK.FEVariableData]
  @objc public var ListTipoDoc: [DIGIPROSDK.FEListTipoDoc]
  @objc public var ListMetadatosHijos: [DIGIPROSDK.FEListMetadatosHijos]
  @objc public var PDFPlantilla: Swift.String
  @objc public var EstructuraPlantilla: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FELogaltySaml : DIGIPROSDK.EVObject {
  @objc public var Uuid: Swift.String
  @objc public var Guid: Swift.String
  @objc public var Url: Swift.String
  @objc public var GuidFormato: Swift.String
  @objc public var filedownloaded: [DIGIPROSDK.FELogaltyDocuments]
  @objc public var downloaded: Swift.Bool
  @objc public var status: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FECodigo : DIGIPROSDK.EVObject {
  @objc public var Codigo: Swift.String
  @objc public var WcfFileTransfer: Swift.String
  @objc public var AplicacionID: Swift.Int
  @objc public var ProyectoID: Swift.Int
  @objc public var GrupoRegistro: Swift.Int
  @objc public var Perfiles: Swift.String
  @objc public var WcfServicios: Swift.String
  @objc public var PermisoRegresarCodigo: Swift.Bool
  @objc public var PermisoRegistrar: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers public class UtilitiesForImage {
  final public let startDate: Foundation.Date
  public var originalImage: UIKit.UIImage
  public func compressHEICImage(with quality: CoreGraphics.CGFloat) -> UIKit.UIImage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEJsonCalculadora : DIGIPROSDK.EVObject {
  @objc public var bpID: Swift.Int
  @objc public var promotorName: Swift.String
  @objc public var branch: [DIGIPROSDK.FEBranchCalculadora]
  @objc public var GruposConvenio: [DIGIPROSDK.FEGruposConvenio]
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_texto : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var contenidoestatico: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var expresionregular: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var mascara: Swift.String
  @objc public var mayusculasminusculas: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var regexconfigmsg: Swift.String
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var esqueletoformato: Swift.String?
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var mostrarmensajelonmax: Swift.Bool
  @objc public var mostrarmensajelonmin: Swift.Bool
  @objc public var mostrarmensajeexpreg: Swift.Bool
  @objc public var mensajelonmax: Swift.String
  @objc public var mensajelonmin: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_texto_unit : DIGIPROSDK.EVObject {
  @objc public var nombre: Swift.String
  @objc public var icono: Swift.String
  @objc public var iscontainer: Swift.Bool
  @objc public var mensajerespuestaservicio: Swift.String
  @objc public var mensajerespuestaserviciotipo: Swift.String
  @objc public var ocultartitulo: Swift.Bool
  @objc public var ordencampo: Swift.Int
  @objc public var titulo: Swift.String
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var contenidoestatico: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var expresionregular: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var idunico: Swift.String
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var mascara: Swift.String
  @objc public var mayusculasminusculas: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var regexconfigmsg: Swift.String
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var mostrarmensajelonmax: Swift.Bool
  @objc public var mostrarmensajelonmin: Swift.Bool
  @objc public var mostrarmensajeexpreg: Swift.Bool
  @objc public var mensajelonmax: Swift.String
  @objc public var mensajelonmin: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
open class AEXMLElement {
  weak open var parent: DIGIPROSDK.AEXMLElement? {
    get
  }
  open var children: [DIGIPROSDK.AEXMLElement] {
    get
  }
  open var name: Swift.String
  open var value: Swift.String?
  open var attributes: [Swift.String : Swift.String]
  open var error: DIGIPROSDK.AEXMLError?
  open var string: Swift.String {
    get
  }
  open var bool: Swift.Bool? {
    get
  }
  open var int: Swift.Int? {
    get
  }
  open var double: Swift.Double? {
    get
  }
  public init(name: Swift.String, value: Swift.String? = nil, attributes: [Swift.String : Swift.String] = [String : String]())
  open subscript(key: Swift.String) -> DIGIPROSDK.AEXMLElement {
    get
  }
  open var all: [DIGIPROSDK.AEXMLElement]? {
    get
  }
  open var first: DIGIPROSDK.AEXMLElement? {
    get
  }
  open var last: DIGIPROSDK.AEXMLElement? {
    get
  }
  open var count: Swift.Int {
    get
  }
  open func all(withValue value: Swift.String) -> [DIGIPROSDK.AEXMLElement]?
  open func all(containingAttributeKeys keys: [Swift.String]) -> [DIGIPROSDK.AEXMLElement]?
  open func all(withAttributes attributes: [Swift.String : Swift.String]) -> [DIGIPROSDK.AEXMLElement]?
  open func allDescendants(where predicate: (DIGIPROSDK.AEXMLElement) -> Swift.Bool) -> [DIGIPROSDK.AEXMLElement]
  open func firstDescendant(where predicate: (DIGIPROSDK.AEXMLElement) -> Swift.Bool) -> DIGIPROSDK.AEXMLElement?
  open func hasDescendant(where predicate: (DIGIPROSDK.AEXMLElement) -> Swift.Bool) -> Swift.Bool
  @discardableResult
  open func addChild(_ child: DIGIPROSDK.AEXMLElement) -> DIGIPROSDK.AEXMLElement
  @discardableResult
  open func addChild(name: Swift.String, value: Swift.String? = nil, attributes: [Swift.String : Swift.String] = [String : String]()) -> DIGIPROSDK.AEXMLElement
  @discardableResult
  open func addChildren(_ children: [DIGIPROSDK.AEXMLElement]) -> [DIGIPROSDK.AEXMLElement]
  open func removeFromParent()
  open var xml: Swift.String {
    get
  }
  open var xmlCompact: Swift.String {
    get
  }
  open var xmlSpaces: Swift.String {
    get
  }
  @objc deinit
}
extension String {
  public var xmlEscaped: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Elemento : DIGIPROSDK.EVObject {
  @objc public var __name: Swift.String
  @objc public var _idelemento: Swift.String
  @objc public var _tipoelemento: Swift.String
  @objc public var atributos: Any?
  @objc public var elementos: DIGIPROSDK.Elementos?
  @objc public var validacion: DIGIPROSDK.Validacion
  @objc public var estadisticas: DIGIPROSDK.FEEstadistica?
  @objc override dynamic public func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Elementos : DIGIPROSDK.EVObject {
  @objc public var elemento: [DIGIPROSDK.Elemento]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Validacion : DIGIPROSDK.EVObject {
  @objc public var id: Swift.String
  @objc public var idunico: Swift.String
  @objc public var coordenadasplantilla: Swift.String
  @objc public var docid: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var needsValidation: Swift.Bool
  @objc public var validado: Swift.Bool
  @objc public var metadatos: Swift.String
  @objc public var tipodoc: Swift.String
  public var anexos: [(id: Swift.String, url: Swift.String)]?
  @objc public var feanexo: [DIGIPROSDK.FEAnexoData]?
  public var attData: [(catalogoId: Swift.Int, descripcion: Swift.String)]?
  @objc public var catalogoDestino: Swift.String
  @objc public var hashFad: Swift.String
  @objc public var guidtimestamp: Swift.String
  @objc public var georeferencia: Swift.String
  @objc public var fecha: Swift.String
  @objc public var dispositivo: Swift.String
  @objc public var acuerdofirma: Swift.String
  @objc public var personafirma: Swift.String
  @objc public var cantidadhuellas: Swift.String
  @objc public var scorepromedio: Swift.String
  @objc public var scorehuellas: Swift.String
  @objc public var isreemplazohuella: Swift.String
  @objc public var valormetadatoinicial: Swift.String
  @objc public var valormetadatofinal: Swift.String
  @objc public var valormetadatorango: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@available(iOS 8.0, *)
public typealias ConstraintLayoutSupport = UIKit.UILayoutSupport
final public class MD5 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension MD5 : DIGIPROSDK.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class FEConsultaVariable : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var Password: Swift.String
  @objc public var IP: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var ListVariables: [DIGIPROSDK.FEVariableData]
  @objc public var ListLog: [DIGIPROSDK.FELogError]
  @objc public var LogsSincronizados: Swift.Bool
  @objc public var Dispositivo: Swift.String
  @objc public var GeoPosicion: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public enum PresentrConstants {
  public enum Values {
    public static let defaultSideMargin: Swift.Float
    public static let defaultHeightPercentage: Swift.Float
  }
  public enum Strings {
    public static let alertTitle: Swift.String
    public static let alertBody: Swift.String
  }
}
public enum DismissSwipeDirection {
  case `default`
  case bottom
  case top
  public static func == (a: DIGIPROSDK.DismissSwipeDirection, b: DIGIPROSDK.DismissSwipeDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol PresentrDelegate {
  @objc optional func presentrShouldDismiss(keyboardShowing: Swift.Bool) -> Swift.Bool
}
@objc public class Presentr : ObjectiveC.NSObject {
  public var presentationType: DIGIPROSDK.PresentationType
  public var transitionType: DIGIPROSDK.TransitionType?
  public var dismissTransitionType: DIGIPROSDK.TransitionType?
  public var roundCorners: Swift.Bool?
  public var cornerRadius: CoreGraphics.CGFloat
  public var dropShadow: DIGIPROSDK.PresentrShadow?
  public var dismissOnTap: Swift.Bool
  public var dismissOnSwipe: Swift.Bool
  public var dismissOnSwipeDirection: DIGIPROSDK.DismissSwipeDirection
  public var dismissAnimated: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var backgroundOpacity: Swift.Float
  public var blurBackground: Swift.Bool
  public var blurStyle: UIKit.UIBlurEffect.Style
  public var customBackgroundView: UIKit.UIView?
  public var keyboardTranslationType: DIGIPROSDK.KeyboardTranslationType
  public var shouldIgnoreTapOutsideContext: Swift.Bool
  weak public var viewControllerForContext: UIKit.UIViewController? {
    get
    set
  }
  public init(presentationType: DIGIPROSDK.PresentationType)
  public static func alertViewController(title: Swift.String = PresentrConstants.Strings.alertTitle, body: Swift.String = PresentrConstants.Strings.alertBody) -> DIGIPROSDK.AlertViewController
  @objc deinit
  @objc override dynamic public init()
}
extension Presentr : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension UIViewController {
  public func customPresentViewController(_ presentr: DIGIPROSDK.Presentr, viewController: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers public class Atributos_password : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var expresionregular: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var mascara: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var regexconfigmsg: Swift.String
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var mostrarmensajelonmax: Swift.Bool
  @objc public var mostrarmensajelonmin: Swift.Bool
  @objc public var mostrarmensajeexpreg: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEConsultaPlantilla : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var FechaSincronizacionPlantilla: Swift.Int
  @objc public var ListPlantillasPermiso: [DIGIPROSDK.FEPlantillaData]
  @objc public var ListPlantillas: [DIGIPROSDK.FEPlantillaData]
  @objc public var ListCatalogos: [DIGIPROSDK.FEItemCatalogoEsquema]
  @objc public var ListServicios: [DIGIPROSDK.FEListaServicios]
  @objc public var ListComponentes: [DIGIPROSDK.FEListaComponentes]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class SpreadsheetView : UIKit.UIView {
  weak public var dataSource: DIGIPROSDK.SpreadsheetViewDataSource? {
    get
    set
  }
  weak public var delegate: DIGIPROSDK.SpreadsheetViewDelegate?
  public var intercellSpacing: CoreGraphics.CGSize
  public var gridStyle: DIGIPROSDK.GridStyle
  public var allowsSelection: Swift.Bool {
    get
    set
  }
  public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  public var showsVerticalScrollIndicator: Swift.Bool {
    get
    set
  }
  public var showsHorizontalScrollIndicator: Swift.Bool {
    get
    set
  }
  public var scrollsToTop: Swift.Bool {
    get
    set
  }
  public var circularScrolling: DIGIPROSDK.CircularScrollingConfiguration {
    get
    set
  }
  public var backgroundView: UIKit.UIView? {
    get
    set
  }
  @available(iOS 11.0, *)
  @objc override dynamic public func safeAreaInsetsDidChange()
  public var visibleCells: [DIGIPROSDK.CellSpread] {
    get
  }
  public var indexPathsForVisibleItems: [Foundation.IndexPath] {
    get
  }
  public var indexPathForSelectedItem: Foundation.IndexPath? {
    get
  }
  public var indexPathsForSelectedItems: [Foundation.IndexPath] {
    get
  }
  public var isDirectionalLockEnabled: Swift.Bool {
    get
    set
  }
  public var bounces: Swift.Bool {
    get
    set
  }
  public var alwaysBounceVertical: Swift.Bool {
    get
    set
  }
  public var alwaysBounceHorizontal: Swift.Bool {
    get
    set
  }
  public var stickyRowHeader: Swift.Bool
  public var stickyColumnHeader: Swift.Bool
  public var isPagingEnabled: Swift.Bool {
    get
    set
  }
  public var isScrollEnabled: Swift.Bool {
    get
    set
  }
  public var indicatorStyle: UIKit.UIScrollView.IndicatorStyle {
    get
    set
  }
  public var decelerationRate: CoreGraphics.CGFloat {
    get
    set
  }
  public var numberOfColumns: Swift.Int {
    get
  }
  public var numberOfRows: Swift.Int {
    get
  }
  public var frozenColumns: Swift.Int {
    get
  }
  public var frozenRows: Swift.Int {
    get
  }
  public var mergedCells: [DIGIPROSDK.CellRange] {
    get
  }
  public var scrollView: UIKit.UIScrollView {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc(registerClass:forCellWithReuseIdentifier:) public func register(_ cellClass: DIGIPROSDK.CellSpread.Type, forCellWithReuseIdentifier identifier: Swift.String)
  @objc(registerNib:forCellWithReuseIdentifier:) public func register(_ nib: UIKit.UINib, forCellWithReuseIdentifier identifier: Swift.String)
  public func reloadData()
  public func dequeueReusableCell(withReuseIdentifier identifier: Swift.String, for indexPath: Foundation.IndexPath) -> DIGIPROSDK.CellSpread
  public func scrollToItem(at indexPath: Foundation.IndexPath, at scrollPosition: DIGIPROSDK.ScrollPosition, animated: Swift.Bool)
  public func selectItem(at indexPath: Foundation.IndexPath?, animated: Swift.Bool, scrollPosition: DIGIPROSDK.ScrollPosition)
  public func deselectItem(at indexPath: Foundation.IndexPath, animated: Swift.Bool)
  public func indexPathForItem(at point: CoreGraphics.CGPoint) -> Foundation.IndexPath?
  public func cellForItem(at indexPath: Foundation.IndexPath) -> DIGIPROSDK.CellSpread?
  public func cellsForItem(at indexPath: Foundation.IndexPath) -> [DIGIPROSDK.CellSpread]
  public func rectForItem(at indexPath: Foundation.IndexPath) -> CoreGraphics.CGRect
  @objc deinit
}
final public class ChaCha20 {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    case notSupported
    public static func == (a: DIGIPROSDK.ChaCha20.Error, b: DIGIPROSDK.ChaCha20.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, iv nonce: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension ChaCha20 : DIGIPROSDK.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension ChaCha20 {
  public struct ChaChaEncryptor : DIGIPROSDK.Cryptor, DIGIPROSDK.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension ChaCha20 {
  public struct ChaChaDecryptor : DIGIPROSDK.Cryptor, DIGIPROSDK.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = true) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension ChaCha20 : DIGIPROSDK.Cryptors {
  final public func makeEncryptor() -> DIGIPROSDK.Cryptor & DIGIPROSDK.Updatable
  final public func makeDecryptor() -> DIGIPROSDK.Cryptor & DIGIPROSDK.Updatable
}
extension AES : DIGIPROSDK.Cryptors {
  final public func makeEncryptor() throws -> DIGIPROSDK.Cryptor & DIGIPROSDK.Updatable
  final public func makeDecryptor() throws -> DIGIPROSDK.Cryptor & DIGIPROSDK.Updatable
}
@objc @_inheritsConvenienceInitializers public class FEProcesos : DIGIPROSDK.EVObject {
  @objc public var FlujoID: Swift.Int
  @objc public var NombreProceso: Swift.String
  @objc public var PIID: Swift.Int
  @objc public var CounterFormats: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@available(iOS 9.0, OSX 10.11, *)
extension UILayoutGuide {
  public var snp: DIGIPROSDK.ConstraintLayoutGuideDSL {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FEQuotations : DIGIPROSDK.EVObject {
  @objc public var status: Swift.String
  @objc public var code: Swift.String
  @objc public var response: Swift.String
  @objc public var ProductId: Swift.String
  @objc public var Order: Swift.Int
  @objc public var Plazo: Swift.Int
  @objc public var Interest: Swift.Double
  @objc public var quotations: [DIGIPROSDK.FECotizaciones]
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEPlazoCalculadora : DIGIPROSDK.EVObject {
  @objc public var plazoId: Swift.String
  @objc public var plazoDescription: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public protocol SignatureDrawingViewControllerDelegate : AnyObject {
  func signatureDrawingViewControllerIsEmptyDidChange(controller: DIGIPROSDK.SignatureDrawingViewController, isEmpty: Swift.Bool)
}
@objc public class SignatureDrawingViewController : UIKit.UIViewController {
  public init(image: UIKit.UIImage? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var fullSignatureImage: UIKit.UIImage? {
    get
  }
  public var signatureColor: UIKit.UIColor {
    get
    set(color)
  }
  weak public var delegate: DIGIPROSDK.SignatureDrawingViewControllerDelegate?
  public func reset()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public func Bluebirdmap<A, B, S>(on queue: Dispatch.DispatchQueue = .main, _ items: S, _ transform: @escaping (A) throws -> DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<[B]> where A == S.Element, S : Swift.Sequence
public func BluebirdmapSeries<A, B, S>(on queue: Dispatch.DispatchQueue = .main, _ items: S, _ transform: @escaping (A) throws -> DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<[B]> where A == S.Element, S : Swift.Sequence
extension Promise where Result : Swift.Sequence {
  final public func Bluebirdmap<B>(on queue: Dispatch.DispatchQueue = .main, _ transform: @escaping (Result.Iterator.Element) throws -> DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<[B]>
  final public func BluebirdmapSeries<B>(on queue: Dispatch.DispatchQueue = .main, _ transform: @escaping (Result.Iterator.Element) throws -> DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<[B]>
}
@objc @_inheritsConvenienceInitializers public class Atributos_mapa : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var cargadomapa: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var direccion: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var metadato: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var pdfcampoanexo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var permisotipificar: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@available(iOS 9.0, *)
public typealias ConstraintLayoutGuide = UIKit.UILayoutGuide
extension HMAC {
  convenience public init(key: Swift.String, variant: DIGIPROSDK.HMAC.Variant = .md5) throws
}
@objc @_inheritsConvenienceInitializers public class HeroDebugPlugin : DIGIPROSDK.HeroPlugin {
  public static var showOnTop: Swift.Bool
  override public func animate(fromViews: [UIKit.UIView], toViews: [UIKit.UIView]) -> Foundation.TimeInterval
  override public func resume(timePassed: Foundation.TimeInterval, reverse: Swift.Bool) -> Foundation.TimeInterval
  override public func clean()
  @objc deinit
  @objc required dynamic public init()
}
extension HeroDebugPlugin {
  public func onDone()
  public func onProcessSliderChanged(progress: Swift.Float)
}
extension CAMediaTimingFunction {
  public static let linear: QuartzCore.CAMediaTimingFunction
  public static let easeIn: QuartzCore.CAMediaTimingFunction
  public static let easeOut: QuartzCore.CAMediaTimingFunction
  public static let easeInOut: QuartzCore.CAMediaTimingFunction
  public static let standard: QuartzCore.CAMediaTimingFunction
  public static let deceleration: QuartzCore.CAMediaTimingFunction
  public static let acceleration: QuartzCore.CAMediaTimingFunction
  public static let sharp: QuartzCore.CAMediaTimingFunction
  public static let easeOutBack: QuartzCore.CAMediaTimingFunction
  public static func from(name: Swift.String) -> QuartzCore.CAMediaTimingFunction?
}
@objc @_inheritsConvenienceInitializers public class Atributos_listatemporal : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var campo: Swift.String
  @objc public var catalogodestino: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementoligado: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var grosortexto: Swift.String
  @objc public var valor: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var atributodescripcion: Swift.String
  @objc public var atributovalor: Swift.String
  @objc public var atributocombomostrar: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Hero : ObjectiveC.NSObject {
  public static var shared: DIGIPROSDK.HeroTransition
  @objc deinit
  @objc override dynamic public init()
}
public protocol HeroTransitionDelegate : AnyObject {
  func heroTransition(_ hero: DIGIPROSDK.HeroTransition, didUpdate state: DIGIPROSDK.HeroTransitionState)
  func heroTransition(_ hero: DIGIPROSDK.HeroTransition, didUpdate progress: Swift.Double)
}
@objc @_inheritsConvenienceInitializers open class HeroTransition : ObjectiveC.NSObject {
  weak public var delegate: DIGIPROSDK.HeroTransitionDelegate?
  public var defaultAnimation: DIGIPROSDK.HeroDefaultAnimationType
  public var containerColor: UIKit.UIColor
  public var isUserInteractionEnabled: Swift.Bool
  public var viewOrderingStrategy: DIGIPROSDK.HeroViewOrderingStrategy
  public var state: DIGIPROSDK.HeroTransitionState {
    get
  }
  public var isTransitioning: Swift.Bool {
    get
  }
  public var isPresenting: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Use isTransitioning instead")
  public var transitioning: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Use isPresenting instead")
  public var presenting: Swift.Bool {
    get
  }
  public var container: UIKit.UIView! {
    get
  }
  public var toViewController: UIKit.UIViewController? {
    get
  }
  public var fromViewController: UIKit.UIViewController? {
    get
  }
  public var context: DIGIPROSDK.HeroContext! {
    get
  }
  public var interactive: Swift.Bool {
    get
  }
  public var totalDuration: Swift.Double {
    get
  }
  public var progress: Swift.Double {
    get
  }
  @objc override dynamic public init()
  public func observeForProgressUpdate(observer: DIGIPROSDK.HeroProgressUpdateObserver)
  @objc deinit
}
public class ExprNode : Swift.CustomStringConvertible, Swift.Equatable {
  public var range: Swift.Range<Swift.Int>
  final public let name: Swift.String
  public var description: Swift.String {
    get
  }
  public init(name: Swift.String)
  @objc deinit
}
public func == (lhs: DIGIPROSDK.ExprNode, rhs: DIGIPROSDK.ExprNode) -> Swift.Bool
public class NumberNode : DIGIPROSDK.ExprNode {
  final public let value: Swift.Float
  override public var description: Swift.String {
    get
  }
  public init(value: Swift.Float)
  @objc deinit
  override public init(name: Swift.String)
}
@_inheritsConvenienceInitializers public class VariableNode : DIGIPROSDK.ExprNode {
  override public var description: Swift.String {
    get
  }
  @objc deinit
  override public init(name: Swift.String)
}
public class BinaryOpNode : DIGIPROSDK.ExprNode {
  final public let lhs: DIGIPROSDK.ExprNode
  final public let rhs: DIGIPROSDK.ExprNode
  override public var description: Swift.String {
    get
  }
  public init(name: Swift.String, lhs: DIGIPROSDK.ExprNode, rhs: DIGIPROSDK.ExprNode)
  @objc deinit
  override public init(name: Swift.String)
}
public class CallNode : DIGIPROSDK.ExprNode {
  final public let arguments: [DIGIPROSDK.ExprNode]
  override public var description: Swift.String {
    get
  }
  public init(name: Swift.String, arguments: [DIGIPROSDK.ExprNode])
  @objc deinit
  override public init(name: Swift.String)
}
public class PrototypeNode : DIGIPROSDK.ExprNode {
  final public let argumentNames: [Swift.String]
  override public var description: Swift.String {
    get
  }
  public init(name: Swift.String, argumentNames: [Swift.String])
  @objc deinit
  override public init(name: Swift.String)
}
public class FunctionNode : DIGIPROSDK.ExprNode {
  final public let prototype: DIGIPROSDK.PrototypeNode
  final public let body: DIGIPROSDK.ExprNode
  override public var description: Swift.String {
    get
  }
  public init(prototype: DIGIPROSDK.PrototypeNode, body: DIGIPROSDK.ExprNode)
  @objc deinit
  override public init(name: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class Atributos_huelladigital : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var cantidadhuellas: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var huellasacapturar: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var scorehuellas: Swift.String
  @objc public var scoremin: Swift.String
  @objc public var scorepromedio: Swift.String
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var tipoescaneo: Swift.String
  @objc public var tipoescaner: Swift.String
  @objc public var verscore: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var docid: Swift.String
  @objc public var fingernumber: Swift.Int
  @objc public var huellascapturadasr: Swift.String
  @objc public var huellascapturadasl: Swift.String
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var tipoescaneoObject: [Swift.String : Any]
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public struct PresentrShadow {
  public let shadowColor: UIKit.UIColor?
  public let shadowOpacity: Swift.Float?
  public let shadowOffset: CoreGraphics.CGSize?
  public let shadowRadius: CoreGraphics.CGFloat?
  public init(shadowColor: UIKit.UIColor?, shadowOpacity: Swift.Float?, shadowOffset: CoreGraphics.CGSize?, shadowRadius: CoreGraphics.CGFloat?)
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: DIGIPROSDK.CompressionLevel
  public static let bestSpeed: DIGIPROSDK.CompressionLevel
  public static let bestCompression: DIGIPROSDK.CompressionLevel
  public static let defaultCompression: DIGIPROSDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: DIGIPROSDK.GzipError.Kind, b: DIGIPROSDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: DIGIPROSDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: DIGIPROSDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers public class Atributos_documento : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var extensionespermitidas: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var maximodocumentos: Swift.Int
  @objc public var minimodocumentos: Swift.Int
  @objc public var modocamara: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var normalizacion: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampoanexo: Swift.String
  @objc public var permisocamara: Swift.Bool
  @objc public var permisoimportar: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipificacionpermitida: [Foundation.NSMutableDictionary]
  @objc public var tipificacionunica: Foundation.NSMutableDictionary
  @objc public var tipocamara: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var permisotipificar: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var colortomarfoto: Swift.String
  @objc public var colorimportar: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc public enum ScrollableSegmentedControlSegmentStyle : Swift.Int {
  case textOnly, imageOnly, imageOnTop, imageOnLeft
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @IBDesignable @objc public class ScrollableSegmentedControl : UIKit.UIControl {
  public var fixedSegmentWidth: Swift.Bool {
    get
    set
  }
  @objc public var segmentStyle: DIGIPROSDK.ScrollableSegmentedControlSegmentStyle {
    @objc get
    @objc set
  }
  @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc dynamic public var segmentContentColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc dynamic public var selectedSegmentContentColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func setTitleTextAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any]?, for state: UIKit.UIControl.State)
  @objc public func titleTextAttributes(for state: UIKit.UIControl.State) -> [Foundation.NSAttributedString.Key : Any]?
  @objc public func insertSegment(withTitle title: Swift.String, at index: Swift.Int, withColorNormal normal: UIKit.UIColor?, withColorChanged changed: UIKit.UIColor?)
  @objc public func insertSegment(withTitle title: Swift.String, at index: Swift.Int)
  @objc public func insertSegment(with image: UIKit.UIImage, at index: Swift.Int)
  @objc public func insertSegment(withTitle title: Swift.String?, image: UIKit.UIImage?, at index: Swift.Int)
  @objc public func removeAllSegments()
  @objc public func removeSegment(at index: Swift.Int)
  @objc public var numberOfSegments: Swift.Int {
    @objc get
  }
  @objc public func titleForSegment(at segment: Swift.Int) -> Swift.String?
  @objc public var selectedSegmentIndex: Swift.Int {
    @objc get
    @objc set
  }
  @IBInspectable @objc public var underlineSelected: Swift.Bool
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
final public class HMAC : DIGIPROSDK.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    case invalidInput
    public static func == (a: DIGIPROSDK.HMAC.Error, b: DIGIPROSDK.HMAC.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Variant {
    case sha1, sha256, sha384, sha512, md5
    public static func == (a: DIGIPROSDK.HMAC.Variant, b: DIGIPROSDK.HMAC.Variant) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init(key: Swift.Array<Swift.UInt8>, variant: DIGIPROSDK.HMAC.Variant = .md5)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEListTipoDoc : DIGIPROSDK.EVObject {
  @objc public var Activo: Swift.Bool
  @objc public var TipoCatalogoID: Swift.Int
  @objc public var CVECatalogoPID: Swift.String
  @objc public var Descripcion: Swift.String
  @objc public var CVECatalogo: Swift.String
  @objc public var CatalogoId: Swift.Int
  @objc public var Json: Swift.String
  @objc public var min: Swift.Int
  @objc public var max: Swift.Int
  @objc public var current: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public protocol ConstraintPriorityTarget {
  var constraintPriorityTargetValue: Swift.Float { get }
}
extension Int : DIGIPROSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension UInt : DIGIPROSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Float : DIGIPROSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Double : DIGIPROSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension CGFloat : DIGIPROSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension UILayoutPriority : DIGIPROSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Atributos_wizard : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ancho: Swift.String
  @objc public var autoredireccionar: Swift.Bool
  @objc public var campo: Swift.String
  @objc public var cantidadformatosabrir: Swift.Int
  @objc public var colorfondoavanzar: Swift.String
  @objc public var colorfondofinalizar: Swift.String
  @objc public var colorfondoregresar: Swift.String
  @objc public var colortextoavanzar: Swift.String
  @objc public var colortextofinalizar: Swift.String
  @objc public var colortextoregresar: Swift.String
  @objc public var confirmarguardadoprellenado: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var ejecutarreglas: Swift.Bool
  @objc public var elementoavalidar: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var paginaavanzar: Swift.String
  @objc public var paginaregresar: Swift.String
  @objc public var plantillaabrir: Swift.String
  @objc public var prefilleddata: Foundation.NSMutableDictionary
  @objc public var redireccionar: Swift.Bool
  @objc public var tareafinalizar: Swift.String
  @objc public var textoavanzar: Swift.String
  @objc public var textofinalizar: Swift.String
  @objc public var textoregresar: Swift.String
  @objc public var tipoguardado: Swift.String
  @objc public var validacion: Swift.Bool
  @objc public var vericonos: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var visibleavanzar: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var visiblefinalizar: Swift.Bool
  @objc public var visibleregresar: Swift.Bool
  @objc public var navegacion: [Swift.String]
  @objc public var visiblepaginado: Swift.Bool
  @objc public var publicarautomatico: Swift.Bool
  @objc public var usuarioasignar: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var cerraralfinalizar: Swift.Bool
  @objc public var coloravanzar: Swift.String
  @objc public var colorfinalizar: Swift.String
  @objc public var colorregresar: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var cantidadformatosabrircounter: Swift.Int
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var isafterfinish: Swift.Bool
  @objc public var isbackward: Swift.Bool
  @objc public var isbeforefinish: Swift.Bool
  @objc public var isforward: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_logo : DIGIPROSDK.Atributos_Generales {
  @objc public var alto: Swift.Int
  @objc public var ancho: Swift.Int
  @objc public var archivo: Swift.String
  @objc public var campo: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var pdfcampo: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var ayuda: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension AES {
  convenience public init(key: Swift.String, iv: Swift.String, padding: DIGIPROSDK.Padding = .pkcs7) throws
}
public protocol Cryptors : AnyObject {
  func makeEncryptor() throws -> DIGIPROSDK.Cryptor & DIGIPROSDK.Updatable
  func makeDecryptor() throws -> DIGIPROSDK.Cryptor & DIGIPROSDK.Updatable
  static func randomIV(_ blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension Cryptors {
  public static func randomIV(_ blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class Atributos_tabla : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var botonagregarcerrartexto: Swift.String
  @objc public var botonagregartexto: Swift.String
  @objc public var botoncerrartexto: Swift.String
  @objc public var botoneditartexto: Swift.String
  @objc public var botonimportartexto: Swift.String
  @objc public var botonlimpiartexto: Swift.String
  @objc public var botonnuevotexto: Swift.String
  @objc public var campo: Swift.String
  @objc public var colorborde: Swift.String
  @objc public var colorbotonagregar: Swift.String
  @objc public var colorbotonagregarcerrar: Swift.String
  @objc public var colorbotonagregarcerrartexto: Swift.String
  @objc public var colorbotonagregartexto: Swift.String
  @objc public var colorbotoncerrar: Swift.String
  @objc public var colorbotoncerrartexto: Swift.String
  @objc public var colorbotoneditar: Swift.String
  @objc public var colorbotoneditartexto: Swift.String
  @objc public var colorbotonlimpiar: Swift.String
  @objc public var colorbotonlimpiartexto: Swift.String
  @objc public var colorbotonnuevo: Swift.String
  @objc public var colorbotonnuevotexto: Swift.String
  @objc public var colorencabezadotabla: Swift.String
  @objc public var colorencabezadotextotabla: Swift.String
  @objc public var colorheader: Swift.String
  @objc public var colorheadertexto: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var filasmax: Swift.Int
  @objc public var filasmin: Swift.Int
  @objc public var grosorborde: Swift.Int
  @objc public var metadato: Swift.String
  @objc public var mostrarconsecutivofila: Swift.Bool
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var ordenamiento: Swift.String
  @objc public var permisotablaagregarcerrarr: Swift.Bool
  @objc public var permisotablaagregarr: Swift.Bool
  @objc public var permisotablacerrar: Swift.Bool
  @objc public var permisotablaeditarr: Swift.Bool
  @objc public var permisotablaeliminarr: Swift.Bool
  @objc public var permisotablaimportarr: Swift.Bool
  @objc public var permisotablalimpiar: Swift.Bool
  @objc public var permisotablamostrar: Swift.Bool
  @objc public var permisotablamultiedicion: Swift.Bool
  @objc public var permisotablaseleccionarr: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.String
  @objc public var tipo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var vertotales: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var vistamovil: Swift.String
  @objc public var columnasvisualizar: [Swift.String : Any]
  @objc public var columnastotalizar: [Swift.String : Any]
  @objc public var operaciontotal: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var alineadocampo: Swift.String
  @objc public var configcolumnas: Swift.String
  @objc public var filas: Swift.Int
  @objc public var filasVisibles: Swift.Int
  @objc public var habilitado: Swift.Bool
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var publicaranexo: Swift.Bool
  @objc public var ordenFilas: [Swift.Int]
  @objc public var addrow: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var clickedWizardRow: Swift.Int
  @objc public var columnasmultieditar: [Swift.Int]
  @objc public var configuracioncargatabla: [Swift.Int]
  @objc public var elementrendered: Swift.Bool
  @objc public var errorjson: [Swift.String]
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var importartemplatetabla: Swift.String
  @objc public var lastrownumber: Swift.Int
  @objc public var modeedit: Swift.Bool
  @objc public var nombretemplatecarga: Swift.String
  @objc public var rowcheckeds: Swift.String
  @objc public var rowediting: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var valorjson: Swift.String
  @objc public var nombrecolumnas: [Swift.String : Any]
  @objc override dynamic public func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos : DIGIPROSDK.EVObject {
  @objc public var nombre: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_Generales : DIGIPROSDK.Atributos {
  @objc public var icono: Swift.String
  @objc public var idunico: Swift.String
  @objc public var incluirenpdf: Swift.Bool
  @objc public var iscontainer: Swift.Bool
  @objc public var mensajerespuestaservicio: Swift.String
  @objc public var mensajerespuestaserviciotipo: Swift.String
  @objc public var mostrarloader: Swift.Bool
  @objc public var ocultartitulo: Swift.Bool
  @objc public var ordencampo: Swift.Int
  @objc public var textoloader: Swift.String
  @objc public var tipoloader: Swift.String
  @objc public var titulo: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_rangofechas : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var fechamax: Swift.Int
  @objc public var fechamin: Swift.Int
  @objc public var formato: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var mascara: Swift.String
  @objc public var metadatofinal: Swift.String
  @objc public var metadatoinicial: Swift.String
  @objc public var metadatorango: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var separador: Swift.String
  @objc public var subtitulo: Swift.String
  @objc public var valorfinal: Swift.String
  @objc public var valorinicial: Swift.String
  @objc public var valormetadatofinal: Swift.String
  @objc public var valormetadatoinicial: Swift.String
  @objc public var valormetadatorango: Swift.String
  @objc public var valorrango: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var formatoObject: [Swift.String : Any]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AEADChaCha20Poly1305 : DIGIPROSDK.AEAD {
  public static let kLen: Swift.Int
  public static var ivRange: Swift.Range<Swift.Int>
  public static func encrypt(_ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func decrypt(_ cipherText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>) throws -> (plainText: Swift.Array<Swift.UInt8>, success: Swift.Bool)
  @objc deinit
}
public protocol EVGenericsKVC {
  func setGenericValue(_ value: Swift.AnyObject!, forUndefinedKey key: Swift.String)
  func getGenericType() -> ObjectiveC.NSObject
}
public protocol EVRaw {
  var anyRawValue: Any { get }
}
extension EVRaw where Self : Swift.RawRepresentable {
  public var anyRawValue: Any {
    get
  }
}
public protocol EVArrayConvertable {
  func convertArray(_ key: Swift.String, array: Any) -> Foundation.NSArray
}
public protocol EVAssociated {
}
extension EVAssociated {
  public var associated: (label: Swift.String, value: Any?, values: [Any]) {
    get
  }
}
extension Dictionary {
  public init<T>(associated: [T]?) where T : DIGIPROSDK.EVAssociated
}
public protocol ObjectFormDelegate : AnyObject {
  func setEstadistica()
  func setTextStyle(_ style: Swift.String)
  func setDecoration(_ decor: Swift.String)
  func setAlignment(_ align: Swift.String)
  func setVariableHeight(Height h: CoreGraphics.CGFloat)
  func setTitleText(_ text: Swift.String)
  func setSubtitleText(_ text: Swift.String)
  func setHeightFromTitles()
  func setPlaceholder(_ text: Swift.String)
  func setInfo()
  func toogleToolTip(_ help: Swift.String)
  func setMessage(_ string: Swift.String, _ state: DIGIPROSDK.enumErrorType)
  func initRules()
  func setMinMax()
  func setExpresionRegular()
  func setOcultarTitulo(_ bool: Swift.Bool)
  func setOcultarSubtitulo(_ bool: Swift.Bool)
  func setHabilitado(_ bool: Swift.Bool)
  func setEdited(v: Swift.String)
  func setEdited(v: Swift.String, isRobot: Swift.Bool)
  func setVisible(_ bool: Swift.Bool)
  func setRequerido(_ bool: Swift.Bool)
  func resetValidation()
  func updateIfIsValid(isDefault: Swift.Bool)
  func triggerEvent(_ action: Swift.String)
  func setRulesOnProperties()
  func setRulesOnChange()
  func triggerRulesOnProperties(_ action: Swift.String)
  func triggerRulesOnChange(_ action: Swift.String?)
  func setMathematics(_ bool: Swift.Bool, _ id: Swift.String)
}
@_inheritsConvenienceInitializers final public class ObjectFormManager<Delegate> : ObjectiveC.NSObject where Delegate : DIGIPROSDK.ObjectFormDelegate {
  weak final public var delegate: DIGIPROSDK.ObjectFormDelegate?
  @objc deinit
  @objc override dynamic public init()
}
public protocol AttachedFormDelegate : AnyObject {
  func didSetLocalAnexo(_ feAnexo: DIGIPROSDK.FEAnexoData)
  func setAnexoOption(_ anexo: DIGIPROSDK.FEAnexoData)
  func setAttributesToController()
  func setPreview(_ sender: Any)
  func setDownloadAnexo(_ sender: Any)
  func setAnexo(_ anexo: DIGIPROSDK.FEAnexoData)
}
@_inheritsConvenienceInitializers final public class AttachedFormManager<Delegate> : ObjectiveC.NSObject where Delegate : DIGIPROSDK.AttachedFormDelegate {
  weak final public var delegate: DIGIPROSDK.AttachedFormDelegate?
  @objc deinit
  @objc override dynamic public init()
}
public protocol GetInfoRowDelegate : AnyObject {
  func getMessageText() -> Swift.String
  func getRowEnabled() -> Swift.Bool
  func getRequired() -> Swift.Bool
  func getTitleLabel() -> Swift.String
  func getSubtitleLabel() -> Swift.String
}
@_inheritsConvenienceInitializers final public class InfoRowManager<Delegate> : ObjectiveC.NSObject where Delegate : DIGIPROSDK.GetInfoRowDelegate {
  weak final public var delegate: DIGIPROSDK.GetInfoRowDelegate?
  @objc deinit
  @objc override dynamic public init()
}
public protocol MetaFormDelegate : AnyObject {
  func didClose()
  func didSave()
  func savingData()
  func didUpdateData(_ tipoDoc: Swift.String, _ idDoc: Swift.Int)
}
@_inheritsConvenienceInitializers final public class MetaFormManager<Delegate> : ObjectiveC.NSObject where Delegate : DIGIPROSDK.MetaFormDelegate {
  weak final public var delegate: DIGIPROSDK.MetaFormDelegate?
  @objc deinit
  @objc override dynamic public init()
}
public struct BlockModeOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public init(rawValue: Swift.Int, authenticationTagSize: Swift.Int)
  public typealias Element = DIGIPROSDK.BlockModeOption
  public typealias ArrayLiteralElement = DIGIPROSDK.BlockModeOption
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers public class OcrVisaObject : DIGIPROSDK.EVObject {
  @objc public var anchorvisa: Swift.String
  @objc public var anchorsurname: Swift.String
  @objc public var anchorgivennames: Swift.String
  @objc public var anchordatebirth: Swift.String
  @objc public var anchornationality: Swift.String
  @objc public var anchorsex: Swift.String
  @objc public var anchordateissue: Swift.String
  @objc public var anchorexpireson: Swift.String
  @objc public var anchorequivalencevalue: Swift.String
  @objc public var anchordocumenttype: Swift.String
  @objc public var anchorcountryissuance: Swift.String
  @objc public var anchordocumentnumber: Swift.String
  @objc public var anchorinventorycontrolnumber: Swift.String
  @objc public var motor: Swift.String
  @objc public var detectedvisa: Swift.Bool
  @objc public var detectedsurname: Swift.Bool
  @objc public var detectedgivennames: Swift.Bool
  @objc public var detecteddatebirth: Swift.Bool
  @objc public var detectednationality: Swift.Bool
  @objc public var detectedsex: Swift.Bool
  @objc public var detecteddateissue: Swift.Bool
  @objc public var detectedexpireson: Swift.Bool
  @objc public var detectedequivalencevalue: Swift.Bool
  @objc public var detecteddocumenttype: Swift.Bool
  @objc public var detectedcountryissuance: Swift.Bool
  @objc public var detecteddocumentnumber: Swift.Bool
  @objc public var detectedinventorycontrolnumber: Swift.Bool
  @objc public var visaClass: Swift.String
  @objc public var visaType: Swift.String
  @objc public var apellidos: Swift.String
  @objc public var aPaterno: Swift.String
  @objc public var aMaterno: Swift.String
  @objc public var nombre: Swift.String
  @objc public var fecha: Swift.String
  @objc public var nacionalidad: Swift.String
  @objc public var sexo: Swift.String
  @objc public var dateIssue: Swift.String
  @objc public var expiresOn: Swift.String
  @objc public var equivalenceValue: Swift.String
  @objc public var documentType: Swift.String
  @objc public var countryIssuance: Swift.String
  @objc public var documentNumber: Swift.String
  @objc public var inventoryControlNumber: Swift.String
  @objc public var detectados: Swift.Int
  @objc public var totales: Swift.Int
  @objc public var obtenerFrontal: Swift.Bool
  @objc public var obtenerReverso: Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
final public class SHA2 {
  public enum Variant : Swift.RawRepresentable {
    case sha224, sha256, sha384, sha512
    public var digestLength: Swift.Int {
      get
    }
    public var blockSize: Swift.Int {
      get
    }
    public typealias RawValue = Swift.Int
    public var rawValue: DIGIPROSDK.SHA2.Variant.RawValue {
      get
    }
    public init?(rawValue: DIGIPROSDK.SHA2.Variant.RawValue)
  }
  public init(variant: DIGIPROSDK.SHA2.Variant)
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension SHA2 : DIGIPROSDK.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension HeroTransition : UIKit.UITabBarControllerDelegate {
  @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, animationControllerForTransitionFrom fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension IndexPath {
  public var column: Swift.Int {
    get
  }
  public init(row: Swift.Int, column: Swift.Int)
}
final public class Promise<Result> {
  final public var isPending: Swift.Bool {
    get
  }
  final public var isCanceled: Swift.Bool {
    get
  }
  final public var result: Result? {
    get
  }
  final public var error: Swift.Error? {
    get
  }
  public init(resolve result: Result)
  public init(reject error: Swift.Error)
  public init(_ resolver: (@escaping (Result) -> Swift.Void, @escaping (Swift.Error) -> Swift.Void) throws -> Swift.Void)
  public init(_ resolver: (@escaping (Result) -> Swift.Void, @escaping (Swift.Error) -> Swift.Void, (Dispatch.DispatchQueue, @escaping () -> Swift.Void) -> Swift.Void) throws -> Swift.Void)
  convenience public init(_ resolver: () throws -> DIGIPROSDK.Promise<Result>)
  @discardableResult
  final public func cancel() -> DIGIPROSDK.Promise<Result>
  @objc deinit
}
public protocol ConstraintDSL {
  var target: Swift.AnyObject? { get }
  func setLabel(_ value: Swift.String?)
  func label() -> Swift.String?
}
extension ConstraintDSL {
  public func setLabel(_ value: Swift.String?)
  public func label() -> Swift.String?
}
public protocol ConstraintBasicAttributesDSL : DIGIPROSDK.ConstraintDSL {
}
extension ConstraintBasicAttributesDSL {
  public var left: DIGIPROSDK.ConstraintItem {
    get
  }
  public var top: DIGIPROSDK.ConstraintItem {
    get
  }
  public var right: DIGIPROSDK.ConstraintItem {
    get
  }
  public var bottom: DIGIPROSDK.ConstraintItem {
    get
  }
  public var leading: DIGIPROSDK.ConstraintItem {
    get
  }
  public var trailing: DIGIPROSDK.ConstraintItem {
    get
  }
  public var width: DIGIPROSDK.ConstraintItem {
    get
  }
  public var height: DIGIPROSDK.ConstraintItem {
    get
  }
  public var centerX: DIGIPROSDK.ConstraintItem {
    get
  }
  public var centerY: DIGIPROSDK.ConstraintItem {
    get
  }
  public var edges: DIGIPROSDK.ConstraintItem {
    get
  }
  public var size: DIGIPROSDK.ConstraintItem {
    get
  }
  public var center: DIGIPROSDK.ConstraintItem {
    get
  }
}
public protocol ConstraintAttributesDSL : DIGIPROSDK.ConstraintBasicAttributesDSL {
}
extension ConstraintAttributesDSL {
  @available(*, deprecated, message: "Use .lastBaseline instead")
  public var baseline: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, OSX 10.11, *)
  public var lastBaseline: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, OSX 10.11, *)
  public var firstBaseline: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var margins: DIGIPROSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: DIGIPROSDK.ConstraintItem {
    get
  }
}
extension Array where Element : ObjectiveC.NSObject {
  public init(json: Swift.String?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(data: Foundation.Data?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(dictionaryArray: [Foundation.NSDictionary], conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize)
  public init(dictionary: Foundation.NSDictionary, forKeyPath: Swift.String, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize)
  public func getArrayTypeInstance<T>(_ arr: Swift.Array<T>) -> T where T : ObjectiveC.NSObject
  public func getTypeInstance<T>() -> T where T : ObjectiveC.NSObject
  public func getTypeAsString() -> Swift.String
}
extension Array where Element : DIGIPROSDK.EVReflectable {
  public func toJsonString(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false, encoding: Swift.String.Encoding = .utf8) -> Foundation.Data
  public func toDictionaryArray(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize) -> Foundation.NSArray
}
extension Array where Element : Foundation.NSDictionary {
  public init(jsonArray: Swift.String)
  public init(dataArray: Foundation.Data)
  public func toJsonStringArray(prettyPrinted: Swift.Bool = false) -> Swift.String
}
extension NSArray {
  public func nestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[T]]
  public func doubleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[T]]]
  public func tripleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[T]]]]
  public func quadrupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[T]]]]]
  public func quintupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[[T]]]]]]
  public func sextupleNestedArrayMap<T>(_ element: (Foundation.NSDictionary) -> T) -> [[[[[[[T]]]]]]]
}
@objc @_inheritsConvenienceInitializers public class FEVariablesData : DIGIPROSDK.EVObject {
  @objc public var AplicacionID: Swift.Int
  @objc public var ProyectoID: Swift.Int
  @objc public var ListVariables: [DIGIPROSDK.FEVariableData]
  @objc public var IP: Swift.String
  @objc public var Password: Swift.String
  @objc public var User: Swift.String
  @objc public var ListLog: [DIGIPROSDK.FELogError]
  @objc public var LogsSincronizados: Swift.Bool
  @objc public var Dispositivo: Swift.String
  @objc public var CfgGeoPosicion: [DIGIPROSDK.ConfigGeop]
  @objc public var GeoPosicion: Swift.String
  @objc public var ListCatDocumento: [DIGIPROSDK.FEVariableData]
  @objc public var GeoPosicionGuardado: Swift.Bool
  override public func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class ConfigGeop : DIGIPROSDK.EVObject {
  @objc public var Perfil: [Swift.Int]
  @objc public var Usuario: [Swift.String]
  @objc public var Activo: Swift.Bool
  @objc public var Schedule: [DIGIPROSDK.scheduleGeop]
  @objc public var Precision: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class scheduleGeop : DIGIPROSDK.EVObject {
  @objc public var Dias: [Swift.Int]
  @objc public var HoraIni: Swift.String
  @objc public var HoraFin: Swift.String
  @objc public var Frecuencia: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
extension Promise {
  final public func tap<A>(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Result) throws -> DIGIPROSDK.Promise<A>) -> DIGIPROSDK.Promise<Result>
  @discardableResult
  final public func tap(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Result) throws -> Swift.Void) -> DIGIPROSDK.Promise<Result>
}
final public class SHA3 {
  final public let blockSize: Swift.Int
  final public let digestLength: Swift.Int
  final public let markByte: Swift.UInt8
  public enum Variant {
    case sha224, sha256, sha384, sha512, keccak224, keccak256, keccak384, keccak512
    public var outputLength: Swift.Int {
      get
    }
    public static func == (a: DIGIPROSDK.SHA3.Variant, b: DIGIPROSDK.SHA3.Variant) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init(variant: DIGIPROSDK.SHA3.Variant)
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension SHA3 : DIGIPROSDK.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class FEDistributorCalculadora : DIGIPROSDK.EVObject {
  @objc public var distributorID: Swift.String
  @objc public var distributorName: Swift.String
  @objc public var distributorBPID: Swift.String
  @objc public var distributorSigla: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Checkbox : UIKit.UIButton {
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension String {
  public func dataS() -> Swift.String
  public func dataB() -> Swift.Bool
  public func dataI() -> Swift.Int
  public func dataSSet(_ data: Any)
  public func dataRemove()
  public func langlocalized(_ comment: Swift.String = "") -> Swift.String
  public func trunc(length: Swift.Int, trailing: Swift.String = "…") -> Swift.String
  public func base64Encoded() -> Swift.String?
  public func base64Decoded() -> Swift.String?
  public func regexReplace(regEx: Swift.String) -> Swift.String
  public func regexMatches(regex: Swift.String) -> [Swift.String]
  public func stringBase64EncodeToData() -> Foundation.NSData
  public func stringBase64EncodeToImage() -> UIKit.UIImage
  public func stringbase64ToImage() -> UIKit.UIImage?
  public func encodeUrl() -> Swift.String?
  public func decodeUrl() -> Swift.String?
  public func index(from: Swift.Int) -> Swift.String.Index
  public func substring(from: Swift.Int) -> Swift.String
  public func substring(to: Swift.Int) -> Swift.String
  public func substring(with r: Swift.Range<Swift.Int>) -> Swift.String
  public subscript(bounds: Swift.CountableClosedRange<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(bounds: Swift.CountableRange<Swift.Int>) -> Swift.String {
    get
  }
  public func image(withAttributes attributes: [Foundation.NSAttributedString.Key : Any]? = nil, size: CoreGraphics.CGSize? = nil) -> UIKit.UIImage?
  public func upperLower(_ cased: Swift.String) -> Swift.String
  public func replaceFormElec() -> Swift.String
  public func cleanAnexosDocPath() -> Swift.String
  public func cleanFormulaResolveString() -> Swift.String
  public func cleanURLString() -> Swift.String
  public func cleanFormulaString() -> Swift.String
  public func cleanFormulaStringWithoutSpaces() -> Swift.String
  public func replaceLineBreak() -> Swift.String
  public func replaceLineBreakEstadistic() -> Swift.String
  public func replaceLineBreakJson() -> Swift.String
  public func replaceTextInNumberField() -> Swift.String
  public func replaceRegex() -> Swift.String
  public func replaceZeros() -> Swift.String
  public func setDecoration(_ decor: Swift.String) -> Foundation.NSAttributedString?
  public func intToString() -> Swift.String
  public func fileName() -> Swift.String
  public func fileExtension() -> Swift.String
  public func `subscript`(_ range: Swift.CountableRange<Swift.Int>) -> Swift.String
  public func currencyFormatter() -> Swift.String
  public func currencyInputFormatting(_ min: Swift.Double, _ max: Swift.Double) -> Swift.String
  public func currencyInputFormattingNew() -> Swift.String
  public func convertDoubleToCurrency() -> Swift.String
  public func removeFormatAmount() -> Swift.Double
  public func toHexEncodedString(uppercase: Swift.Bool = true, prefix: Swift.String = "", separator: Swift.String = "") -> Swift.String
  public func sha512Base64(string: Swift.String) -> Swift.String
  public func fromBase64() -> Swift.String?
  public func toBase64() -> Swift.String
}
@objc @_inheritsConvenienceInitializers public class Atributos_hora : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var hora: Swift.String
  @objc public var mascara: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var horaObject: [Swift.String : Any]
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var visiblecontenido: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEPlantillaMerge : DIGIPROSDK.EVObject {
  @objc public var FlujoID: Swift.Int
  @objc public var ExpID: Swift.Int
  @objc public var TipoDocID: Swift.Int
  @objc public var MostrarExp: Swift.Bool
  @objc public var MostrarTipoDoc: Swift.Bool
  @objc public var FechaActualizacion: Swift.String
  @objc public var NombreFlujo: Swift.String
  @objc public var Procesos: [Swift.String]
  @objc public var PProcesos: [DIGIPROSDK.FEProcesos]
  @objc public var ExpDoc: [DIGIPROSDK.FEExpDoc]
  @objc public var HasNewVersion: Swift.Bool
  @objc public var CounterFormats: Swift.Int
  @objc public var VerNuevaCapturaMovil: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public struct HeroConditionalContext {
  weak public var view: UIKit.UIView!
  public var isAppearing: Swift.Bool {
    get
  }
  public var isPresenting: Swift.Bool {
    get
  }
  public var isInTabbarController: Swift.Bool {
    get
  }
  public var isInNavbarController: Swift.Bool {
    get
  }
  public var isMatched: Swift.Bool {
    get
  }
  public var isAncestorViewMatched: Swift.Bool {
    get
  }
  public var matchedView: UIKit.UIView? {
    get
  }
  public var matchedAncestorView: (UIKit.UIView, UIKit.UIView)? {
    get
  }
  public var fromViewController: UIKit.UIViewController {
    get
  }
  public var toViewController: UIKit.UIViewController {
    get
  }
  public var currentViewController: UIKit.UIViewController {
    get
  }
  public var otherViewController: UIKit.UIViewController {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FECotizaciones : DIGIPROSDK.EVObject {
  @objc public var cat: Swift.Double
  @objc public var discountAmount: Swift.Double
  @objc public var estimatedCommision: Swift.Int
  @objc public var frequencyDescription: Swift.String
  @objc public var interestRate: Swift.Double
  @objc public var plazo: Swift.Int
  @objc public var priceGroupId: Swift.String
  @objc public var requestedAmount: Swift.Double
  @objc public var totalAmount: Swift.Double
  @objc public var tasaanual: Swift.Double
  @objc public var tasamensual: Swift.Double
  @objc public var descx: Swift.Double
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_codigobarras : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var alto: Swift.Int
  @objc public var ancho: Swift.Int
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var expresionregular: Swift.String
  @objc public var generarcodigo: Swift.Bool
  @objc public var habilitado: Swift.Bool
  @objc public var mayusculasminusculas: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var pdfcampocodigo: Swift.String
  @objc public var regexconfigmsg: Swift.String
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipocodigo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension SpreadsheetView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @available(iOS 11.0, *)
  @objc dynamic public func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
}
extension Promise {
  final public func tapCatch<A>(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Swift.Error) throws -> DIGIPROSDK.Promise<A>) -> DIGIPROSDK.Promise<Result>
  @discardableResult
  final public func tapCatch(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Swift.Error) throws -> Swift.Void) -> DIGIPROSDK.Promise<Result>
}
@objc @_inheritsConvenienceInitializers public class FEListMetadatosHijos : DIGIPROSDK.EVObject {
  @objc public var Accion: Swift.String
  @objc public var EsEditable: Swift.Bool
  @objc public var Expresion_Regular: Swift.String
  @objc public var FolioAut: Swift.Int
  @objc public var Longitud_Maxima: Swift.Int
  @objc public var Longitud_Minima: Swift.Int
  @objc public var Mascara: Swift.String
  @objc public var MetadatoId: Swift.Int
  @objc public var Nombre: Swift.String
  @objc public var NombreCampo: Swift.String
  @objc public var Obligatorio: Swift.Bool
  @objc public var TipoDato: Swift.String
  @objc public var TipoDatoId: Swift.Int
  @objc public var TipoDoc: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEDocumento : DIGIPROSDK.EVObject {
  @objc public var isKindImage: Swift.Bool
  @objc public var guid: Swift.String
  @objc public var URL: Swift.String
  @objc public var Path: Swift.String
  @objc public var Nombre: Swift.String
  @objc public var Ext: Swift.String
  @objc public var TipoDoc: Swift.String
  public var TipoDocID: Swift.Int?
  @objc public var ImageString: Swift.String
  @objc public var Metadatos: [DIGIPROSDK.FEListMetadatosHijos]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEOpenPlantilla : DIGIPROSDK.EVObject {
  @objc public var Guid: Swift.String
  @objc public var ExoID: Swift.Int
  @objc public var TipoDocID: Swift.Int
  @objc public var FlujoID: Swift.Int
  @objc public var PIID: Swift.Int
  @objc deinit
  @objc required dynamic public init()
}
extension Array where Element == Swift.UInt8 {
  public func toBase64() -> Swift.String?
  public init(base64: Swift.String)
}
final public class CMAC : DIGIPROSDK.Authenticator {
  public enum Error : Swift.Error {
    case wrongKeyLength
    public static func == (a: DIGIPROSDK.CMAC.Error, b: DIGIPROSDK.CMAC.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init(key: Swift.Array<Swift.UInt8>) throws
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public struct AEXMLOptions {
  public struct DocumentHeader {
    public var version: Swift.Double
    public var encoding: Swift.String
    public var standalone: Swift.String
    public var xmlString: Swift.String {
      get
    }
  }
  public struct ParserSettings {
    public var shouldProcessNamespaces: Swift.Bool
    public var shouldReportNamespacePrefixes: Swift.Bool
    public var shouldResolveExternalEntities: Swift.Bool
    public var shouldTrimWhitespace: Swift.Bool
  }
  public var documentHeader: DIGIPROSDK.AEXMLOptions.DocumentHeader
  public var parserSettings: DIGIPROSDK.AEXMLOptions.ParserSettings
  public init()
}
open class Interface : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public enum Family : Swift.Int {
    case ipv4
    case ipv6
    case other
    public func toString() -> Swift.String
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func allInterfaces() -> [DIGIPROSDK.Interface]
  public static func createTestDummy(_ name: Swift.String, family: DIGIPROSDK.Interface.Family, address: Swift.String, multicastSupported: Swift.Bool, broadcastAddress: Swift.String?) -> DIGIPROSDK.Interface
  public init(name: Swift.String, family: DIGIPROSDK.Interface.Family, address: Swift.String?, netmask: Swift.String?, running: Swift.Bool, up: Swift.Bool, loopback: Swift.Bool, multicastSupported: Swift.Bool, broadcastAddress: Swift.String?)
  open var addressBytes: [Swift.UInt8]? {
    get
  }
  open var isRunning: Swift.Bool {
    get
  }
  open var isUp: Swift.Bool {
    get
  }
  open var isLoopback: Swift.Bool {
    get
  }
  open var supportsMulticast: Swift.Bool {
    get
  }
  final public let name: Swift.String
  final public let family: DIGIPROSDK.Interface.Family
  final public let address: Swift.String?
  final public let netmask: Swift.String?
  final public let broadcastAddress: Swift.String?
  open var description: Swift.String {
    get
  }
  open var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Eventos : DIGIPROSDK.EVObject {
  @objc public var expresion: [DIGIPROSDK.Expresion]
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Expresion : DIGIPROSDK.EVObject {
  @objc public var _categoria: Swift.String
  @objc public var _idexpression: Swift.String
  @objc public var _tipoexpression: Swift.String
  @objc public var atributos: DIGIPROSDK.Atributos_Expresion?
  @objc public var expresion: Swift.Array<DIGIPROSDK.Expresion>?
  @objc public var parent: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_Expresion : DIGIPROSDK.EVObject {
  @objc public var estilo: Swift.String
  @objc public var nombre: Swift.String
  @objc public var formula: Swift.String
  @objc public var alternativa: [DIGIPROSDK.Expresion]
  @objc public var coincidencia: [DIGIPROSDK.Expresion]
  @objc public var condicion: [DIGIPROSDK.Expresion]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class OcrIneFormulas : DIGIPROSDK.EVObject {
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc public var apellidomaterno: Swift.String
  @objc public var apellidopaterno: Swift.String
  @objc public var calle: Swift.String
  @objc public var cic: Swift.String
  @objc public var ciudad: Swift.String
  @objc public var claveelector: Swift.String
  @objc public var colonia: Swift.String
  @objc public var cp: Swift.String
  @objc public var curp: Swift.String
  @objc public var delegacion: Swift.String
  @objc public var edad: Swift.String
  @objc public var emision: Swift.String
  @objc public var estado: Swift.String
  @objc public var fecha: Swift.String
  @objc public var folio: Swift.String
  @objc public var localidad: Swift.String
  @objc public var mensaje: Swift.String
  @objc public var municipio: Swift.String
  @objc public var nombre: Swift.String
  @objc public var numeroocr: Swift.String
  @objc public var registro: Swift.String
  @objc public var reposicion: Swift.String
  @objc public var rfc: Swift.String
  @objc public var seccion: Swift.String
  @objc public var sexo: Swift.String
  @objc public var vigencia: Swift.String
  @objc public var fechanacimiento: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers public class ConstraintDescription {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FECatRemoto : DIGIPROSDK.EVObject {
  @objc public var Filtros: [DIGIPROSDK.FECatRemotoFiltros]
  @objc public var CatDocId: Swift.Int
  @objc public var ProyectoId: Swift.Int
  @objc public var GrupoAdminID: Swift.Int
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FECatRemotoData : DIGIPROSDK.EVObject {
  @objc public var RowError: Swift.String
  @objc public var RowState: Swift.Int
  @objc public var Table: [Foundation.NSDictionary]
  @objc public var ItemArray: [Any]
  @objc public var HasErrors: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FECatRemotoFiltros : DIGIPROSDK.EVObject {
  @objc public var Operador: Swift.String
  @objc public var Tabla: Swift.String
  @objc public var Valor: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public enum HeroSnapshotType {
  case optimized
  case normal
  case layerRender
  case noSnapshot
  public static func == (a: DIGIPROSDK.HeroSnapshotType, b: DIGIPROSDK.HeroSnapshotType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum HeroCoordinateSpace {
  case global
  case local
  public static func == (a: DIGIPROSDK.HeroCoordinateSpace, b: DIGIPROSDK.HeroCoordinateSpace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct HeroTargetState {
  public var beginState: [DIGIPROSDK.HeroModifier]?
  public var conditionalModifiers: [((DIGIPROSDK.HeroConditionalContext) -> Swift.Bool, [DIGIPROSDK.HeroModifier])]?
  public var position: CoreGraphics.CGPoint?
  public var size: CoreGraphics.CGSize?
  public var transform: QuartzCore.CATransform3D?
  public var opacity: Swift.Float?
  public var cornerRadius: CoreGraphics.CGFloat?
  public var backgroundColor: CoreGraphics.CGColor?
  public var zPosition: CoreGraphics.CGFloat?
  public var contentsRect: CoreGraphics.CGRect?
  public var contentsScale: CoreGraphics.CGFloat?
  public var borderWidth: CoreGraphics.CGFloat?
  public var borderColor: CoreGraphics.CGColor?
  public var shadowColor: CoreGraphics.CGColor?
  public var shadowOpacity: Swift.Float?
  public var shadowOffset: CoreGraphics.CGSize?
  public var shadowRadius: CoreGraphics.CGFloat?
  public var shadowPath: CoreGraphics.CGPath?
  public var masksToBounds: Swift.Bool?
  public var displayShadow: Swift.Bool
  public var overlay: (color: CoreGraphics.CGColor, opacity: CoreGraphics.CGFloat)?
  public var spring: (CoreGraphics.CGFloat, CoreGraphics.CGFloat)?
  public var delay: Swift.Double
  public var duration: Foundation.TimeInterval?
  public var timingFunction: QuartzCore.CAMediaTimingFunction?
  public var arc: CoreGraphics.CGFloat?
  public var source: Swift.String?
  public var cascade: (Foundation.TimeInterval, DIGIPROSDK.CascadeDirection, Swift.Bool)?
  public var ignoreSubviewModifiers: Swift.Bool?
  public var coordinateSpace: DIGIPROSDK.HeroCoordinateSpace?
  public var useScaleBasedSizeChange: Swift.Bool?
  public var snapshotType: DIGIPROSDK.HeroSnapshotType?
  public var nonFade: Swift.Bool
  public var forceAnimate: Swift.Bool
  public var custom: [Swift.String : Any]?
  public mutating func append(_ modifier: DIGIPROSDK.HeroModifier)
  public mutating func append(contentsOf modifiers: [DIGIPROSDK.HeroModifier])
  public subscript(key: Swift.String) -> Any? {
    get
    set
  }
}
extension HeroTargetState : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: DIGIPROSDK.HeroModifier...)
  public typealias ArrayLiteralElement = DIGIPROSDK.HeroModifier
}
public struct Gridlines {
  public var top: DIGIPROSDK.GridStyle
  public var bottom: DIGIPROSDK.GridStyle
  public var left: DIGIPROSDK.GridStyle
  public var right: DIGIPROSDK.GridStyle
  public static func all(_ style: DIGIPROSDK.GridStyle) -> DIGIPROSDK.Gridlines
}
@available(*, deprecated, renamed: "Gridlines")
public typealias Grids = DIGIPROSDK.Gridlines
public enum GridStyle {
  case `default`
  case none
  case solid(width: CoreGraphics.CGFloat, color: UIKit.UIColor)
}
extension GridStyle : Swift.Equatable {
  public static func == (lhs: DIGIPROSDK.GridStyle, rhs: DIGIPROSDK.GridStyle) -> Swift.Bool
}
extension PKCS5 {
  public struct PBKDF1 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: DIGIPROSDK.PKCS5.PBKDF1.Error, b: DIGIPROSDK.PKCS5.PBKDF1.Error) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public enum Variant {
      case md5, sha1
      public static func == (a: DIGIPROSDK.PKCS5.PBKDF1.Variant, b: DIGIPROSDK.PKCS5.PBKDF1.Variant) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, variant: DIGIPROSDK.PKCS5.PBKDF1.Variant = .sha1, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil) throws
    public func calculate() -> Swift.Array<Swift.UInt8>
  }
}
extension UITextView {
  public var optimalHeight: CoreGraphics.CGFloat {
    get
  }
  public func calculateMaxLines(_ width: CoreGraphics.CGFloat? = nil) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers public class Atributos_georeferencia : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var metadato: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var pdfcampoanexo: Swift.String
  @objc public var pedirmapa: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.String?
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var permisotipificar: Swift.Bool
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var map: Swift.String
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public protocol CipherModeWorker {
  var cipherOperation: DIGIPROSDK.CipherOperationOnBlock { get }
  var additionalBufferSize: Swift.Int { get }
  mutating func encrypt(block plaintext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  mutating func decrypt(block ciphertext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
}
public protocol BlockModeWorker : DIGIPROSDK.CipherModeWorker {
  var blockSize: Swift.Int { get }
}
public protocol CounterModeWorker : DIGIPROSDK.CipherModeWorker {
  associatedtype Counter
  var counter: Self.Counter { get set }
}
public protocol StreamModeWorker : DIGIPROSDK.CipherModeWorker {
  mutating func seek(to position: Swift.Int) throws
}
public protocol BlockModeWorkerFinalizing : DIGIPROSDK.BlockModeWorker {
  mutating func finalize(encrypt ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  mutating func willDecryptLast(block ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func didDecryptLast(block plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class FERegistro : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var Password: Swift.String
  @objc public var Nombre: Swift.String
  @objc public var ApellidoP: Swift.String
  @objc public var ApellidoM: Swift.String
  @objc public var Email: Swift.String
  @objc public var IP: Swift.String
  @objc public var Operacion: Swift.String
  @objc public var GrupoId: Swift.Int
  @objc public var Perfiles: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var ExisteUsuario: Swift.Bool
  @objc public var CuentaActiva: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_espacio : DIGIPROSDK.Atributos_Generales {
  @objc public var campo: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var ayuda: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public struct Location : Swift.Hashable {
  public let row: Swift.Int
  public let column: Swift.Int
  public var hashValue: Swift.Int {
    get
  }
  public static func == (lhs: DIGIPROSDK.Location, rhs: DIGIPROSDK.Location) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 8.0, *)
extension UILayoutSupport {
  public var snp: DIGIPROSDK.ConstraintLayoutSupportDSL {
    get
  }
}
public struct CBC : DIGIPROSDK.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: DIGIPROSDK.CBC.Error, b: DIGIPROSDK.CBC.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let options: DIGIPROSDK.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
@objc @_inheritsConvenienceInitializers public class UtilsF : UIKit.UIViewController {
  public class func regexMatchesEmail(text: Swift.String) -> Swift.Bool
  public class func regexMatchesName(text: Swift.String) -> Swift.Bool
  public class func regexMatchesNunmber(text: Swift.String) -> Swift.Bool
  public class func regexMatchesPassword(text: Swift.String) -> Swift.Bool
  public class func regexMatchesCURP(text: Swift.String) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension UIViewController {
  public func hideKeyboardWhenTappedAround()
  @objc dynamic public func dismissKeyboard()
  public func alert(message: Swift.String, title: Swift.String = "alrt_warning".langlocalized())
}
extension UIDevice {
  open var modelName: Swift.String {
    get
  }
}
extension UserDefaults {
  public func indexPath(forKey key: Swift.String) -> Foundation.IndexPath?
}
@_hasMissingDesignatedInitializers public class InternetConnectionManager {
  public static func isConnectedToNetwork() -> Swift.Bool
  @objc deinit
}
open class AEXMLDocument : DIGIPROSDK.AEXMLElement {
  open var root: DIGIPROSDK.AEXMLElement {
    get
  }
  final public let options: DIGIPROSDK.AEXMLOptions
  public init(root: DIGIPROSDK.AEXMLElement? = nil, options: DIGIPROSDK.AEXMLOptions = AEXMLOptions())
  convenience public init(xml: Foundation.Data, options: DIGIPROSDK.AEXMLOptions = AEXMLOptions()) throws
  convenience public init(xml: Swift.String, encoding: Swift.String.Encoding = String.Encoding.utf8, options: DIGIPROSDK.AEXMLOptions = AEXMLOptions()) throws
  open func loadXML(_ data: Foundation.Data) throws
  override open var xml: Swift.String {
    get
  }
  @objc deinit
  override public init(name: Swift.String, value: Swift.String? = super, attributes: [Swift.String : Swift.String] = super)
}
@objc @_inheritsConvenienceInitializers public class FEAppSkinSplash : DIGIPROSDK.EVObject {
  @objc public var Imagen: Swift.String
  @objc public var NombreImagen: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public struct PresentrTransitionContext {
  public let containerView: UIKit.UIView
  public let initialFrame: CoreGraphics.CGRect
  public let finalFrame: CoreGraphics.CGRect
  public let isPresenting: Swift.Bool
  public let fromViewController: UIKit.UIViewController?
  public let toViewController: UIKit.UIViewController?
  public let fromView: UIKit.UIView?
  public let toView: UIKit.UIView?
  public let animatingViewController: UIKit.UIViewController?
  public let animatingView: UIKit.UIView?
}
public enum AnimationOptions {
  case normal(duration: Foundation.TimeInterval)
  case spring(duration: Foundation.TimeInterval, delay: Foundation.TimeInterval, damping: CoreGraphics.CGFloat, velocity: CoreGraphics.CGFloat)
}
@objc open class PresentrAnimation : ObjectiveC.NSObject {
  public var options: DIGIPROSDK.AnimationOptions
  public init(options: DIGIPROSDK.AnimationOptions = .normal(duration: 0.4))
  open func transform(containerFrame: CoreGraphics.CGRect, finalFrame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  open func beforeAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  open func performAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  open func afterAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  @objc deinit
  @objc override dynamic public init()
}
extension PresentrAnimation : UIKit.UIViewControllerAnimatedTransitioning {
  @objc dynamic public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc dynamic public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
}
public struct DeserializationStatus : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: DIGIPROSDK.DeserializationStatus
  public static let IncorrectKey: DIGIPROSDK.DeserializationStatus
  public static let MissingKey: DIGIPROSDK.DeserializationStatus
  public static let InvalidType: DIGIPROSDK.DeserializationStatus
  public static let InvalidValue: DIGIPROSDK.DeserializationStatus
  public static let InvalidClass: DIGIPROSDK.DeserializationStatus
  public static let MissingProtocol: DIGIPROSDK.DeserializationStatus
  public static let Custom: DIGIPROSDK.DeserializationStatus
  public var description: Swift.String {
    get
  }
  public typealias Element = DIGIPROSDK.DeserializationStatus
  public typealias ArrayLiteralElement = DIGIPROSDK.DeserializationStatus
  public typealias RawValue = Swift.Int
}
public protocol ConstraintRelatableTarget {
}
extension Int : DIGIPROSDK.ConstraintRelatableTarget {
}
extension UInt : DIGIPROSDK.ConstraintRelatableTarget {
}
extension Float : DIGIPROSDK.ConstraintRelatableTarget {
}
extension Double : DIGIPROSDK.ConstraintRelatableTarget {
}
extension CGFloat : DIGIPROSDK.ConstraintRelatableTarget {
}
extension CGSize : DIGIPROSDK.ConstraintRelatableTarget {
}
extension CGPoint : DIGIPROSDK.ConstraintRelatableTarget {
}
extension UIEdgeInsets : DIGIPROSDK.ConstraintRelatableTarget {
}
extension ConstraintItem : DIGIPROSDK.ConstraintRelatableTarget {
}
extension UIView : DIGIPROSDK.ConstraintRelatableTarget {
}
@available(iOS 9.0, OSX 10.11, *)
extension UILayoutGuide : DIGIPROSDK.ConstraintRelatableTarget {
}
extension Promise {
  final public func then<A>(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Result) throws -> DIGIPROSDK.Promise<A>) -> DIGIPROSDK.Promise<A>
  @discardableResult
  final public func then<A>(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Result) throws -> A) -> DIGIPROSDK.Promise<A>
}
@objc @_inheritsConvenienceInitializers public class OcrPasaporteObject : DIGIPROSDK.EVObject {
  @objc public var anchortipo: Swift.String
  @objc public var anchorclavedelpais: Swift.String
  @objc public var anchorpasaportenumero: Swift.String
  @objc public var anchoraPaterno: Swift.String
  @objc public var anchoraMaterno: Swift.String
  @objc public var anchornombres: Swift.String
  @objc public var anchornacionalidad: Swift.String
  @objc public var anchorobservaciones: Swift.String
  @objc public var anchorfechanacimiento: Swift.String
  @objc public var anchorcurp: Swift.String
  @objc public var anchorsexo: Swift.String
  @objc public var anchorlugarnacimiento: Swift.String
  @objc public var anchorfechaexpedicion: Swift.String
  @objc public var anchorfechacaducidad: Swift.String
  @objc public var anchorautoridad: Swift.String
  @objc public var motor: Swift.String
  @objc public var detectedtipo: Swift.Bool
  @objc public var detectedclavedelpais: Swift.Bool
  @objc public var detectedpasaportenumero: Swift.Bool
  @objc public var detectedaPaterno: Swift.Bool
  @objc public var detectedaMaterno: Swift.Bool
  @objc public var detectednombres: Swift.Bool
  @objc public var detectednacionalidad: Swift.Bool
  @objc public var detectedobservaciones: Swift.Bool
  @objc public var detectedfechanacimiento: Swift.Bool
  @objc public var detectedcurp: Swift.Bool
  @objc public var detectedsexo: Swift.Bool
  @objc public var detectedlugarnacimiento: Swift.Bool
  @objc public var detectedfechaexpedicion: Swift.Bool
  @objc public var detectedfechacaducidad: Swift.Bool
  @objc public var detectedautoridad: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var clavedelpais: Swift.String
  @objc public var pasaportenumero: Swift.String
  @objc public var aPaterno: Swift.String
  @objc public var aMaterno: Swift.String
  @objc public var nombres: Swift.String
  @objc public var nacionalidad: Swift.String
  @objc public var observaciones: Swift.String
  @objc public var fechanacimiento: Swift.String
  @objc public var curp: Swift.String
  @objc public var sexo: Swift.String
  @objc public var lugarnacimiento: Swift.String
  @objc public var fechaexpedicion: Swift.String
  @objc public var fechacaducidad: Swift.String
  @objc public var autoridad: Swift.String
  @objc public var detectados: Swift.Int
  @objc public var totales: Swift.Int
  @objc public var obtenerFrontal: Swift.Bool
  @objc public var obtenerReverso: Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
extension Double {
  public func roundToDecimal(_ fractionDigits: Swift.Int) -> Swift.Double
}
public enum Token {
  case identifier(Swift.String, Swift.CountableRange<Swift.Int>)
  case number(Swift.Float, Swift.CountableRange<Swift.Int>)
  case parensOpen(Swift.CountableRange<Swift.Int>)
  case parensClose(Swift.CountableRange<Swift.Int>)
  case comma(Swift.CountableRange<Swift.Int>)
  case other(Swift.String, Swift.CountableRange<Swift.Int>)
}
public class Lexer {
  public init(input: Swift.String)
  public func tokenize() -> [DIGIPROSDK.Token]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OcrCfeFormulas : DIGIPROSDK.EVObject {
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc public var calle: Swift.String
  @objc public var ciudad: Swift.String
  @objc public var delegacion: Swift.String
  @objc public var mensaje: Swift.String
  @objc public var nombre: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public enum CipherError : Swift.Error {
  case encrypt
  case decrypt
  public static func == (a: DIGIPROSDK.CipherError, b: DIGIPROSDK.CipherError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol Cipher : AnyObject {
  var keySize: Swift.Int { get }
  func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension Cipher {
  public func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
final public class SHA1 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension SHA1 : DIGIPROSDK.Updatable {
  @discardableResult
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension UILabel {
  public func setAlignment(_ align: Swift.String) -> UIKit.NSTextAlignment
  public func calculateMaxHeight() -> CoreGraphics.CGFloat
  public func calculateMaxLines(_ width: CoreGraphics.CGFloat? = nil) -> Swift.Int
  public func calculateMaxLinesTransition(widthH: CoreGraphics.CGFloat) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers public class FEConsultaFormato : DIGIPROSDK.EVObject {
  @objc public var Ticket: Swift.String
  @objc public var EstadisticasGuardadas: Swift.Int
  @objc public var User: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var Password: Swift.String
  @objc public var IP: Swift.String
  @objc public var Formato: DIGIPROSDK.FEFormatoData
  @objc public var FechaSincronizacionIncidencia: Swift.Int
  @objc public var FechaSincronizacionReserva: Swift.Int
  @objc public var FechaSincronizacionBorradores: Swift.Int
  @objc public var CheckSync: Swift.Bool
  @objc public var IdDel: Swift.Int
  @objc public var Incidencias: [DIGIPROSDK.FEFormatoData]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@available(iOS 9.0, OSX 10.11, *)
public struct ConstraintLayoutGuideDSL : DIGIPROSDK.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void) -> [DIGIPROSDK.Constraint]
  public func makeConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var target: Swift.AnyObject? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FEConsultaAcceso : DIGIPROSDK.EVObject {
  @objc public var actualizacion: Swift.String
  @objc public var accesos: [DIGIPROSDK.FEAcceso]
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEAcceso : DIGIPROSDK.EVObject {
  @objc public var clave: Swift.String
  @objc public var codigo: Swift.String
  @objc public var descripcion: Swift.String
  @objc public var titulo: Swift.String
  @objc public var usuario: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public protocol ControllerDelegate : AnyObject {
  func performConsultaViewController(_ index: Swift.Int)
  func performNuevoFeViewController(_ plantilla: DIGIPROSDK.FEPlantillaData, _ index: Swift.Int)
  func performFlowSelection(_ index: Swift.Int)
  func updatePlantillas()
}
@_inheritsConvenienceInitializers final public class ControllersManager<Del> : ObjectiveC.NSObject where Del : DIGIPROSDK.ControllerDelegate {
  weak final public var delegate: Del?
  @objc deinit
  @objc override dynamic public init()
}
public protocol FormularioDelegate : AnyObject {
  func resolveValor(_ id: Swift.String, _ mode: Swift.String, _ string: Swift.String, _ category: Swift.String?) -> Swift.Bool
  func resolveVisible(_ id: Swift.String, _ mode: Swift.String, _ string: Swift.String) -> Swift.Bool
  func resolveRequerido(_ id: Swift.String, _ mode: Swift.String, _ string: Swift.String) -> Swift.Bool
  func resolveHabilitado(_ id: Swift.String, _ mode: Swift.String, _ string: Swift.String) -> Swift.Bool
  func resolveValorQR(_ namePrellenado: Swift.String, _ idQRgenerado: Swift.String) -> Swift.Bool
  func obtainMathematics(_ element: Swift.String, _ isForced: Swift.Bool?)
  func valueElementRow(_ idElem: Swift.String) -> Swift.String
  func valueMetaElementRow(_ idElem: Swift.String, _ isCombo: Swift.String?) -> Swift.String
  func updateDataComboDinamico(idsCombo: [Swift.String])
  func isfilter(idElement: Swift.String) -> Swift.String
  func setDataAttributes(valor l: Swift.String, metadato m: Swift.String, habilitado h: Swift.Bool, visible v: Swift.Bool) -> Foundation.NSMutableDictionary
  func setTablaDataAttributes(valor l: Swift.String, metadato m: Swift.String, idunico i: Swift.String) -> Foundation.NSMutableDictionary
  func setComboboxTempAttributes(valor l: Swift.String, metadato m: Swift.String, idunico i: Swift.String, catalogoDestino cd: Swift.String) -> Foundation.NSMutableDictionary
  func setMetaAttributes(_ e: DIGIPROSDK.Elemento, _ isPrellenado: Swift.Bool)
  func setTipoDoc(_ e: DIGIPROSDK.Elemento) -> Swift.Int
  func detectValidation(elem: DIGIPROSDK.Elemento, route: Swift.String) -> [Swift.String]?
  func setPrefilledDataToNewForm(_ id: Swift.String, json: Swift.String, elements: Foundation.NSMutableDictionary?)
  func checkLocationPermission()
  func openSettingApp(message: Swift.String)
  func getFormViewControllerDelegate() -> Eureka.FormViewController?
  func getNestedForm() -> Eureka.FormViewController?
  func setNestedForm(_ nav: Eureka.FormViewController?)
  func getAllRowsFromCurrentForm() -> [Eureka.BaseRow]
  func reloadTableViewFormViewController()
  func detectAttrVisibility(_ row: Eureka.BaseRow) -> Swift.Bool
  func setVisibleEnableElementsFromSection(_ tag: Swift.String, _ atributos: DIGIPROSDK.Atributos_seccion, _ forced: Swift.Bool, _ isUserAction: Swift.Bool)
  func getParentsection(_ rowString: Swift.String) -> DIGIPROSDK.Atributos_seccion?
  func getTitlePageOrSection(_ rowString: Swift.String) -> Swift.String
  func getPlantillaTitle() -> Swift.String
  func getWizardFunctionalityFromTable(_ tag: Swift.String)
  func getRowByIdInAllForms(_ id: Swift.String) -> (element: DIGIPROSDK.TipoElemento, row: Eureka.BaseRow?)
  func getElementByIdInAllForms(_ id: Swift.String) -> Eureka.BaseRow?
  func getSectionByIdInCurrentForm(_ id: Swift.String) -> Eureka.Section?
  func getElementByIdInCurrentForm(_ id: Swift.String) -> Eureka.BaseRow?
  func getElementByIdsInCurrentForm(_ ids: [Swift.String]) -> [Eureka.BaseRow?]
  func getColorsErrors(_ type: DIGIPROSDK.enumErrorType) -> [UIKit.UIColor]
  func getCurrentPage() -> Swift.Int
  func setOCRDetails(_ service: Swift.Int, _ object: Swift.AnyObject, _ element: Swift.String)
  func wizardAction(id: Swift.String, validar: Swift.Bool, tipo: Swift.String, atributos: DIGIPROSDK.Atributos_wizard) -> Swift.Bool
  func openForm(tipoDoc: Swift.Int, expId: Swift.Int, flujoId: Swift.Int, piid: Swift.Int, guid: Swift.String)
  func wizardActionTabla(id: Swift.String, validar: Swift.Bool, tipo: Swift.String, atributos: DIGIPROSDK.Atributos_wizard)
  func addEventAction(_ expresion: DIGIPROSDK.Expresion)
  func obtainRules(rString rlString: Swift.String?, eString element: Swift.String?, vString vrb: Swift.String?, forced isForced: Swift.Bool?, override isOverrided: Swift.Bool?) -> DIGIPROSDK.Promise<Swift.Bool>
  func getValueFromTitleComponent(_ id: Swift.String) -> Swift.String
  func getValueFromComponent(_ id: Swift.String) -> Swift.String
  func getImagesFromElement(_ compareFaces: DIGIPROSDK.CompareFacesJson) -> DIGIPROSDK.CompareFacesResult?
  func getColoniasElement(_ sepomex: DIGIPROSDK.SepomexJson) -> DIGIPROSDK.SepoMexResult?
  func recursiveTokenFormula(_ formul: Swift.String?, _ dict: [DIGIPROSDK.Formula]?, _ typefrml: Swift.String, _ encoded: Swift.Bool) -> DIGIPROSDK.ReturnFormulaType
  func setNotificationBanner(_ title: Swift.String, _ subtitle: Swift.String, _ style: DIGIPROSDK.BannerStyle, _ direction: DIGIPROSDK.BannerPosition)
  func setStatusBarNotificationBanner(_ title: Swift.String, _ style: DIGIPROSDK.BannerStyle, _ direction: DIGIPROSDK.BannerPosition)
}
@_inheritsConvenienceInitializers final public class FormManager<Del> : ObjectiveC.NSObject where Del : DIGIPROSDK.FormularioDelegate {
  weak final public var delegate: Del?
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol APIDelegate : AnyObject {
  @objc optional func didValidRegistro()
  @objc optional func didFormatoTransited(index: ObjectiveC.NSInteger, formato: DIGIPROSDK.FEFormatoData, isInEdition: Swift.Bool)
  @objc optional func didSetAnexo(_ path: Swift.String)
  @objc optional func didSetServicioFolio(_ folio: DIGIPROSDK.FolioAutomaticoResult, _ mensaje: Swift.String)
  @objc optional func didSetServicioFolioError(_ folio: DIGIPROSDK.FolioAutomaticoResult?, _ mensaje: Swift.String)
  @objc optional func didSetServicioSepomex(_ dict: Foundation.NSDictionary, _ mensaje: Swift.String)
  @objc optional func didSetServicioSepomexError(_ dict: Foundation.NSDictionary?, _ mensaje: Swift.String)
  @objc optional func didSetCompareFaces(_ compareFaces: DIGIPROSDK.CompareFacesResult, _ mensaje: Swift.String)
  @objc optional func didSetCompareFacesError(_ compareFaces: DIGIPROSDK.CompareFacesResult?, _ mensaje: Swift.String)
  @objc optional func didValidFlujosAndProcesos()
  @objc optional func didSendToServerFormatos()
  @objc optional func didSendToServerAnexos()
  @objc func sendStatus(message: Swift.String, error: DIGIPROSDK.enumErrorType, isLog: Swift.Bool, isNotification: Swift.Bool)
  @objc func sendStatusCompletition(initial: Swift.Float, current: Swift.Float, final: Swift.Float)
  @objc func sendStatusCodeMessage(message: Swift.String, error: DIGIPROSDK.enumErrorType)
  @objc optional func responseSplash(message: Swift.String)
  @objc optional func wrongCodeResponse(message: Swift.String)
  @objc optional func wrongPasswordResponse(message: Swift.String)
  @objc optional func errorPDFResponse(message: Swift.String)
  @objc optional func errorDescargaResponse(message: Swift.String)
  @objc optional func didValidLoginIpad()
  @objc func didSendError(message: Swift.String, error: DIGIPROSDK.enumErrorType)
  @objc func didSendResponse(message: Swift.String, error: DIGIPROSDK.enumErrorType)
  @objc func didSendResponseHUD(message: Swift.String, error: DIGIPROSDK.enumErrorType, porcentage: Swift.Int)
  @objc optional func didSendResponseStatus(title: Swift.String, subtitle: Swift.String, porcentage: Swift.Float)
}
@_inheritsConvenienceInitializers final public class APIManager<Delegate> : ObjectiveC.NSObject where Delegate : DIGIPROSDK.APIDelegate {
  weak final public var delegate: Delegate?
  @objc deinit
  @objc override dynamic public init()
}
public protocol TemplateDelegate : AnyObject {
  func didFormatViewFinish(error: Foundation.NSError?, success: [Swift.String : Any]?)
}
@_inheritsConvenienceInitializers final public class TemplateManager<Delegate> : ObjectiveC.NSObject where Delegate : DIGIPROSDK.TemplateDelegate {
  weak final public var delegate: Delegate?
  @objc deinit
  @objc override dynamic public init()
}
extension APIManager {
  final public func DGSDKDebugUserRequest() -> DIGIPROSDK.Promise<DIGIPROSDK.FEConsultaAcceso>
  final public func DGSDKLicenceWith(appkey innerKey: Swift.String, secretid innersecret: Swift.String, completionHandler: (Swift.Bool, Swift.Error) -> Swift.Void)
  final public func DGSDKLogin(code innerCode: Swift.String, user innerUser: Swift.String, pass innerPass: Swift.String, delegate innerDelegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKLoginCode(code innerCode: Swift.String, delegate innerDelegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func validCodeOffline(delegate: Delegate?) -> Swift.Bool
  final public func salvarCodigo(delegate: Delegate?)
}
extension APIManager {
  final public func DGSDKSkin(delegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func validSkinOffline(delegate: Delegate?) -> Swift.Bool
  final public func salvarSkin(delegate: Delegate?)
}
extension APIManager {
  final public func DGSDKLoginUser(user innerUser: Swift.String, pass innerPass: Swift.String, delegate innerDelegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKRestoreTokenSecurity(delegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func validUserOffline(delegate: Delegate?, user: Swift.String, pass: Swift.String) -> Swift.Bool
  final public func validConsultasOffline(delegate: Delegate?) -> Swift.Bool
  final public func salvarUsuario(delegate: Delegate?)
  final public func updateUsuario(delegate: Delegate?)
  final public func updateImageProfile(delegate innerDelegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func updateUserProfile(delegate innerDelegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
}
extension APIManager {
  final public func DGSDKregistro(delegate: Delegate?, nombre: Swift.String, aPaterno: Swift.String, aMaterno: Swift.String, password: Swift.String, email: Swift.String) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func soapSMSPromise(delegate: Delegate?, sms: DIGIPROSDK.SmsServicio) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
  final public func soapValidateSMSPromise(delegate: Delegate?, sms: DIGIPROSDK.SmsServicio) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
  final public func activeRegistroPromise(delegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
  final public func DGSDKcambiarContrasenia(delegate: Delegate?, currentPass: Swift.String, newPass: Swift.String) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKresetContrasenia(delegate: Delegate?, passwordReset: Swift.String, user: Swift.String) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func validRegistroOffline(delegate: Delegate?) -> Swift.Bool
  final public func salvarRegistro(delegate: Delegate?)
  final public func salvarKeychain(account: Swift.String, password: Swift.String)
  final public func borrarKeychain(account: Swift.String) -> Swift.Bool
  final public func obtenerKeychain(account: Swift.String) -> Swift.String
  final public func validarKeychain(account: Swift.String, password: Swift.String) -> Swift.Bool
}
extension APIManager {
  final public func DGSDKdownloadData(delegate: Delegate?, forcedUpdate: Swift.Bool = false) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKdownloadTemplates(delegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKgetTemplates(_ flujo: Swift.String) -> Swift.Array<(Swift.String, Swift.Array<DIGIPROSDK.FEPlantillaData>)>
  final public func validPlantillasOffline() -> Swift.Array<DIGIPROSDK.FEPlantillaData>
  final public func salvarPlantilla(delegate: Delegate?)
}
extension APIManager {
  final public func DGSDKdownloadVariables(delegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKdownloadCatRemoto(delegate: Delegate?) -> DIGIPROSDK.FECatRemotoData?
  final public func validVariablesOffline() -> Swift.Bool
  final public func salvarVariable(delegate: Delegate?, data: Swift.String)
}
extension APIManager {
  final public func getNotification(delegate: Delegate?) -> DIGIPROSDK.Promise<Swift.Int>
}
extension APIManager {
  final public func loopResumen(_ root: DIGIPROSDK.AEXMLElement, _ object: [(id: Swift.String, valor: Swift.String, orden: Swift.Int)]) -> [(id: Swift.String, valor: Swift.String, orden: Swift.Int)]?
  final public func newResumen(_ root: DIGIPROSDK.AEXMLElement, _ object: [(id: Swift.String, valor: Swift.String, orden: Swift.Int)]) -> [(id: Swift.String, valor: Swift.String, orden: Swift.Int)]?
  final public func DGSDKverifyFormats(delegate: Delegate?) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKdownloadFormats(delegate: Delegate?, initial: Swift.Bool = false) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func salvarFormato(formato: DIGIPROSDK.FEConsultaFormato, delegate: Delegate?)
  final public func DGSDKgetFlows(delegate: Delegate?) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEPlantillaMerge]>
  final public func getFormatosSendToServer() -> Swift.Array<DIGIPROSDK.FEFormatoData>
  final public func DGSDKgetFormatos(_ flujoId: Swift.Int, _ piid: Swift.Int) -> Swift.Array<DIGIPROSDK.FEFormatoData>
  final public func DGSDKgetAllFormatos(_ flujoId: Swift.Int) -> Swift.Array<DIGIPROSDK.FEFormatoData>
  final public func DGSDKgetJson(_ formato: DIGIPROSDK.FEFormatoData) -> Swift.String?
}
extension APIManager {
  final public func DGSDKgetFlowTasks(formato: DIGIPROSDK.FEFormatoData) -> DIGIPROSDK.Promise<Swift.Array<Swift.String>>
  final public func DGSDKsetFlowTask(delegate: Delegate?, formato: DIGIPROSDK.FEFormatoData, nombreTarea: Swift.String, needsReserved: Swift.Bool) -> DIGIPROSDK.Promise<Swift.Bool>
  final public func setTask(plantilla: DIGIPROSDK.FEPlantillaData, formato: DIGIPROSDK.FEFormatoData, nombreTarea: Swift.String)
  final public func getXML(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.Elemento
  final public func getPLANTILLA(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.AEXMLDocument?
  final public func getRULES(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.AEXMLDocument?
  final public func getSERVICES(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.AEXMLDocument?
  final public func getCOMPONENTS(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.AEXMLDocument?
  final public func getMATHEMATICS(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.AEXMLDocument?
  final public func getPREFILLEDDATA(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> DIGIPROSDK.AEXMLDocument?
  final public func salvarPlantillaData(formato: DIGIPROSDK.FEFormatoData)
  final public func salvarPlantillaDataAndJson(formato: DIGIPROSDK.FEFormatoData, json: Swift.String)
}
extension APIManager {
  final public func DGSDKsendFormatos(delegate: Delegate?) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEConsultaFormato]>
  final public func DGSDKsendFormatosEC(delegate: Delegate?, formatoData: DIGIPROSDK.FEFormatoData?) -> DIGIPROSDK.Promise<DIGIPROSDK.FEConsultaFormato>
  final public func removeFormato(formato: DIGIPROSDK.FEFormatoData)
  final public func loopSendFormatoPromise(delegate: Delegate?, element: DIGIPROSDK.FEConsultaFormato) -> DIGIPROSDK.Promise<Swift.Bool>
  final public func sendFormatoDataPromise(delegate: Delegate?, formato: DIGIPROSDK.FEConsultaFormato) -> DIGIPROSDK.Promise<DIGIPROSDK.FEConsultaFormato>
  final public func DGSDKformatoDelete(delegate: Delegate?, formato: DIGIPROSDK.FEFormatoData) -> DIGIPROSDK.Promise<DIGIPROSDK.FEFormatoData>
}
extension APIManager {
  final public func sendToServerAnexosPromise(delegate: Delegate?, formato: DIGIPROSDK.FEConsultaFormato) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEConsultaAnexo]>
  final public func loopSendAnexoDataPromise(delegate: Delegate?, consulta: DIGIPROSDK.FEConsultaAnexo, formato: DIGIPROSDK.FEConsultaFormato) -> DIGIPROSDK.Promise<Swift.Bool>
  final public func sendAnexoDataPromise(delegate: Delegate?, consulta: DIGIPROSDK.FEConsultaAnexo, formato: DIGIPROSDK.FEConsultaFormato) -> DIGIPROSDK.Promise<DIGIPROSDK.FEConsultaAnexo>
  final public func removeAnexo(anexo: DIGIPROSDK.FEAnexoData)
}
extension APIManager {
  final public func DGSDKformatEdit(delegate: Delegate?, formato: DIGIPROSDK.FEFormatoData, _ reserva: Swift.Bool, _ isInEdition: Swift.Bool) -> DIGIPROSDK.Promise<DIGIPROSDK.FEFormatoData>
}
extension APIManager {
  final public func DGSDKformatLockUnlock(delegate: Delegate?, _ index: ObjectiveC.NSInteger, _ formato: DIGIPROSDK.FEFormatoData, _ reserva: Swift.Bool, _ isInEdition: Swift.Bool) -> DIGIPROSDK.Promise<DIGIPROSDK.FEFormatoData>
  final public func isFormatoReservedPromise(delegate: Delegate?, _ index: ObjectiveC.NSInteger, _ formato: DIGIPROSDK.FEFormatoData, _ original: DIGIPROSDK.FEFormatoData, _ isInEdition: Swift.Bool) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
}
extension APIManager {
  final public func DGSDKverAnexo(formato: DIGIPROSDK.FEFormatoData) -> DIGIPROSDK.Promise<Swift.Bool>
  final public func DGSDKverAnexo(anexo: DIGIPROSDK.FEAnexoData, formato: DIGIPROSDK.FEFormatoData) -> DIGIPROSDK.Promise<Swift.String>
  final public func DGSDKformatoAnexos(delegate: Delegate?, anexo: DIGIPROSDK.FEAnexoData, estado: Swift.Int) -> DIGIPROSDK.Promise<DIGIPROSDK.FEAnexoData>
  final public func DGSDKdownloadAttachmentSync(delegate: Delegate?, anexo: DIGIPROSDK.FEAnexoData) -> Swift.Bool
  final public func DGSDKformatPDF(delegate: Delegate?, formato: DIGIPROSDK.FEFormatoData) -> DIGIPROSDK.Promise<Swift.String>
}
extension APIManager {
  final public func consultaConsultasPromise(delegate: Delegate?, reporte: DIGIPROSDK.FETipoReporte?, consulta: DIGIPROSDK.FEConsultaTemplate?) -> DIGIPROSDK.Promise<DIGIPROSDK.FEConsultaTemplate>
}
extension APIManager {
  final public func compareFacesPromise(delegate: Delegate?, compareFaces: DIGIPROSDK.CompareFacesResult) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
  final public func soapNewcompareFacesPromise(delegate: Delegate?, mParams mparams: [Swift.String], poutParams poutparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewFolioPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewSMSPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewValidateSMSPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewSepomexPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewRegistroPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewActivacionCorreoPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewExisteUsuarioPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewActivarUsuarioPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapNewSassSirhPromise(delegate: Delegate?, mParams mparams: [Swift.String], sParams sparams: [Swift.String], poutParams poutparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapFolioPromise(delegate: Delegate?, folio: DIGIPROSDK.FolioAutomaticoResult) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
  final public func sepomexPromise(delegate: Delegate?, sepomex: DIGIPROSDK.SepoMexResult) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
  final public func soapGenericJsonSync(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.AEXMLDocument
  final public func soapGenericSync(delegate: Delegate?, idService idservice: Swift.String?, mParams mparams: [[Swift.String : Any]]?, sParams sparams: [[Swift.String : Any]]?, poutParams poutparams: [[Swift.String : Any]]?) -> DIGIPROSDK.AEXMLDocument
  final public func soapGenericPromise(delegate: Delegate?, idService idservice: Swift.String?, mParams mparams: [[Swift.String : Any]]?, sParams sparams: [[Swift.String : Any]]?, poutParams poutparams: [[Swift.String : Any]]?) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapVerificaCurpRfcCredifielPromise(delegate: Delegate?, mParams mparams: [Swift.String]) -> DIGIPROSDK.Promise<DIGIPROSDK.AEXMLDocument>
  final public func soapCorreoPromise(delegate: Delegate?, correo: DIGIPROSDK.CorreoServicio) -> DIGIPROSDK.Promise<DIGIPROSDK.AjaxResponse>
}
extension APIManager {
  final public func DGSDKrestorePassword(delegate: Delegate?, user: Swift.String) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func DGSDKresetContraseniaV2(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
  final public func serviceTimestampFAD(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<Swift.String>
}
extension APIManager {
  final public func serviceConfigurationCalc(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<DIGIPROSDK.FEJsonCalculadora>
  final public func serviceQuotesCalc(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEQuotations]>
  final public func serviceQuotePrefill(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<DIGIPROSDK.FEFormatoData>
  final public func serviceNotifications(delegate: Delegate?, tipoOp: Swift.Int? = nil, idPush: [Swift.String]? = nil) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEMensajesPush]>
  final public func serviceIncidentDetail(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEIncidencias]>
  final public func servicegetDiscount(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<DIGIPROSDK.FEDiscount>
}
extension APIManager {
  final public func serviceCheckTrips(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<[DIGIPROSDK.FEFormatoData]>
  final public func serviceAcceptTrips(delegate: Delegate?, jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.Promise<DIGIPROSDK.APISuccessResponse>
}
public func race<A>(on queue: Dispatch.DispatchQueue = .main, _ promises: DIGIPROSDK.Promise<A>...) -> DIGIPROSDK.Promise<A>
public func race<A, S>(on queue: Dispatch.DispatchQueue = .main, _ promises: S) -> DIGIPROSDK.Promise<A> where S : Swift.Sequence, S.Element == DIGIPROSDK.Promise<A>
public protocol SpreadsheetViewDelegate : AnyObject {
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, shouldHighlightItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didHighlightItemAt indexPath: Foundation.IndexPath)
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didUnhighlightItemAt indexPath: Foundation.IndexPath)
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didSelectItemAt indexPath: Foundation.IndexPath)
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didDeselectItemAt indexPath: Foundation.IndexPath)
}
extension SpreadsheetViewDelegate {
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, shouldHighlightItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didHighlightItemAt indexPath: Foundation.IndexPath)
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didUnhighlightItemAt indexPath: Foundation.IndexPath)
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didSelectItemAt indexPath: Foundation.IndexPath)
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, didDeselectItemAt indexPath: Foundation.IndexPath)
}
final public class HeroModifier {
  public init(applyFunction: @escaping (inout DIGIPROSDK.HeroTargetState) -> Swift.Void)
  @objc deinit
}
extension HeroModifier {
  public static var fade: DIGIPROSDK.HeroModifier
  public static var forceNonFade: DIGIPROSDK.HeroModifier
  public static func position(_ position: CoreGraphics.CGPoint) -> DIGIPROSDK.HeroModifier
  public static func size(_ size: CoreGraphics.CGSize) -> DIGIPROSDK.HeroModifier
}
extension HeroModifier {
  public static func transform(_ t: QuartzCore.CATransform3D) -> DIGIPROSDK.HeroModifier
  public static func perspective(_ perspective: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func scale(x: CoreGraphics.CGFloat = 1, y: CoreGraphics.CGFloat = 1, z: CoreGraphics.CGFloat = 1) -> DIGIPROSDK.HeroModifier
  public static func scale(_ xy: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func translate(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> DIGIPROSDK.HeroModifier
  public static func translate(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> DIGIPROSDK.HeroModifier
  public static func rotate(x: CoreGraphics.CGFloat = 0, y: CoreGraphics.CGFloat = 0, z: CoreGraphics.CGFloat = 0) -> DIGIPROSDK.HeroModifier
  public static func rotate(_ point: CoreGraphics.CGPoint, z: CoreGraphics.CGFloat = 0) -> DIGIPROSDK.HeroModifier
  public static func rotate(_ z: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
}
extension HeroModifier {
  public static func opacity(_ opacity: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func backgroundColor(_ backgroundColor: UIKit.UIColor) -> DIGIPROSDK.HeroModifier
  public static func cornerRadius(_ cornerRadius: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func zPosition(_ zPosition: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func contentsRect(_ contentsRect: CoreGraphics.CGRect) -> DIGIPROSDK.HeroModifier
  public static func contentsScale(_ contentsScale: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func borderWidth(_ borderWidth: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func borderColor(_ borderColor: UIKit.UIColor) -> DIGIPROSDK.HeroModifier
  public static func shadowColor(_ shadowColor: UIKit.UIColor) -> DIGIPROSDK.HeroModifier
  public static func shadowOpacity(_ shadowOpacity: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func shadowOffset(_ shadowOffset: CoreGraphics.CGSize) -> DIGIPROSDK.HeroModifier
  public static func shadowRadius(_ shadowRadius: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
  public static func shadowPath(_ shadowPath: CoreGraphics.CGPath) -> DIGIPROSDK.HeroModifier
  public static func masksToBounds(_ masksToBounds: Swift.Bool) -> DIGIPROSDK.HeroModifier
  public static func overlay(color: UIKit.UIColor, opacity: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
}
extension HeroModifier {
  public static func duration(_ duration: Foundation.TimeInterval) -> DIGIPROSDK.HeroModifier
  public static var durationMatchLongest: DIGIPROSDK.HeroModifier
  public static func delay(_ delay: Foundation.TimeInterval) -> DIGIPROSDK.HeroModifier
  public static func timingFunction(_ timingFunction: QuartzCore.CAMediaTimingFunction) -> DIGIPROSDK.HeroModifier
  @available(iOS 9, *)
  public static func spring(stiffness: CoreGraphics.CGFloat, damping: CoreGraphics.CGFloat) -> DIGIPROSDK.HeroModifier
}
extension HeroModifier {
  public static func source(heroID: Swift.String) -> DIGIPROSDK.HeroModifier
  public static var arc: DIGIPROSDK.HeroModifier
  public static func arc(intensity: CoreGraphics.CGFloat = 1) -> DIGIPROSDK.HeroModifier
  public static var cascade: DIGIPROSDK.HeroModifier
  public static func cascade(delta: Foundation.TimeInterval = 0.02, direction: DIGIPROSDK.CascadeDirection = .topToBottom, delayMatchedViews: Swift.Bool = false) -> DIGIPROSDK.HeroModifier
}
extension HeroModifier {
  public static func when(_ condition: @escaping (DIGIPROSDK.HeroConditionalContext) -> Swift.Bool, _ modifiers: [DIGIPROSDK.HeroModifier]) -> DIGIPROSDK.HeroModifier
  public static func when(_ condition: @escaping (DIGIPROSDK.HeroConditionalContext) -> Swift.Bool, _ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
  public static func whenMatched(_ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
  public static func whenPresenting(_ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
  public static func whenDismissing(_ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
  public static func whenAppearing(_ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
  public static func whenDisappearing(_ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
}
@objc @_inheritsConvenienceInitializers public class Atributos_pagina : DIGIPROSDK.Atributos_Generales {
  @objc public var idelemento: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var validado: Swift.Bool
  @objc public var paginaseleccionada: Swift.Bool
  @objc public var disableAll: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var ayuda: Swift.String
  @objc public var activo: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var vertab: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FESkin : DIGIPROSDK.EVObject {
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public typealias ConstraintInterfaceLayoutDirection = UIKit.UIUserInterfaceLayoutDirection
public struct ConstraintConfig {
  public static var interfaceLayoutDirection: DIGIPROSDK.ConstraintInterfaceLayoutDirection
}
public enum HeroTransitionState : Swift.Int {
  case possible
  case notified
  case starting
  case animating
  case completing
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension HeroTransition : UIKit.UINavigationControllerDelegate {
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
@objc @_inheritsConvenienceInitializers public class FEConvenioCalculadora : DIGIPROSDK.EVObject {
  @objc public var convenioId: Swift.String
  @objc public var convenioName: Swift.String
  @objc public var convenioShortname: Swift.String
  @objc public var convenioNombre: Swift.String
  @objc public var convenioGoup: Swift.String
  @objc public var convenioBRMSCode: Swift.String
  @objc public var enterpriseName: Swift.String
  @objc public var Productos: [DIGIPROSDK.FEProductCalculadora]
  @objc public var montoMaximo: Swift.Int
  @objc public var montoMinimo: Swift.Int
  @objc public var aplicaOriginacionPaperless: Swift.Bool
  @objc public var branchName: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEConsultaAnexo : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var Password: Swift.String
  @objc public var IP: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var anexo: DIGIPROSDK.FEAnexoData
  @objc public var IdsDel: Swift.String
  @objc public var datos: Swift.String
  @objc public var EstadoApp: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public enum ModalCenterPosition {
  case center
  case topCenter
  case bottomCenter
  case custom(centerPoint: CoreGraphics.CGPoint)
  case customOrigin(origin: CoreGraphics.CGPoint)
}
@objc @_inheritsConvenienceInitializers public class FolioAutomaticoResult : DIGIPROSDK.EVObject {
  @objc public var DescripcionRespuesta: Swift.String
  @objc public var RespuestaServicio: Swift.String
  @objc public var Provedor: Swift.String
  @objc public var Proveedor: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var ExpId: Swift.Int
  @objc public var GrupoId: Swift.Int
  @objc public var Folio: Swift.String
  @objc public var User: Swift.String
  @objc public var Item1: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FolioResponse : DIGIPROSDK.EVObject {
  @objc public var folio: Swift.String
  @objc public var Item1: Swift.String
  @objc public var mensaje: Swift.String
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
extension ChaCha20 {
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
@objc @_inheritsConvenienceInitializers public class OcrVisaFormulas : DIGIPROSDK.EVObject {
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers final public class Constraint {
  final public var layoutConstraints: [DIGIPROSDK.LayoutConstraint]
  final public var isActive: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, message: "Use activate().")
  final public func install()
  @available(*, deprecated, message: "Use deactivate().")
  final public func uninstall()
  final public func activate()
  final public func deactivate()
  @discardableResult
  final public func update(offset: DIGIPROSDK.ConstraintOffsetTarget) -> DIGIPROSDK.Constraint
  @discardableResult
  final public func update(inset: DIGIPROSDK.ConstraintInsetTarget) -> DIGIPROSDK.Constraint
  @discardableResult
  final public func update(priority: DIGIPROSDK.ConstraintPriorityTarget) -> DIGIPROSDK.Constraint
  @discardableResult
  final public func update(priority: DIGIPROSDK.ConstraintPriority) -> DIGIPROSDK.Constraint
  @available(*, deprecated, message: "Use update(offset: ConstraintOffsetTarget) instead.")
  final public func updateOffset(amount: DIGIPROSDK.ConstraintOffsetTarget)
  @available(*, deprecated, message: "Use update(inset: ConstraintInsetTarget) instead.")
  final public func updateInsets(amount: DIGIPROSDK.ConstraintInsetTarget)
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriority(amount: DIGIPROSDK.ConstraintPriorityTarget)
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityRequired()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityHigh()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityMedium()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityLow()
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: DIGIPROSDK.JSON) throws
  public func merged(with other: DIGIPROSDK.JSON) throws -> DIGIPROSDK.JSON
  public var type: DIGIPROSDK.`Type` {
    get
  }
  public var error: DIGIPROSDK.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: DIGIPROSDK.JSON {
    get
  }
  public static var null: DIGIPROSDK.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: DIGIPROSDK.Index<T>, rhs: DIGIPROSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: DIGIPROSDK.Index<T>, rhs: DIGIPROSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = DIGIPROSDK.Index<DIGIPROSDK.JSON>
public typealias JSONRawIndex = DIGIPROSDK.Index<Any>
extension JSON : Swift.Collection {
  public typealias Index = DIGIPROSDK.JSONRawIndex
  public var startIndex: DIGIPROSDK.JSON.Index {
    get
  }
  public var endIndex: DIGIPROSDK.JSON.Index {
    get
  }
  public func index(after i: DIGIPROSDK.JSON.Index) -> DIGIPROSDK.JSON.Index
  public subscript(position: DIGIPROSDK.JSON.Index) -> (Swift.String, DIGIPROSDK.JSON) {
    get
  }
  public typealias Element = (Swift.String, DIGIPROSDK.JSON)
  public typealias Iterator = Swift.IndexingIterator<DIGIPROSDK.JSON>
  public typealias SubSequence = Swift.Slice<DIGIPROSDK.JSON>
  public typealias Indices = Swift.DefaultIndices<DIGIPROSDK.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: DIGIPROSDK.JSONKey { get }
}
extension Int : DIGIPROSDK.JSONSubscriptType {
  public var jsonKey: DIGIPROSDK.JSONKey {
    get
  }
}
extension String : DIGIPROSDK.JSONSubscriptType {
  public var jsonKey: DIGIPROSDK.JSONKey {
    get
  }
}
extension JSON {
  public subscript(path: [DIGIPROSDK.JSONSubscriptType]) -> DIGIPROSDK.JSON {
    get
    set
  }
  public subscript(path: DIGIPROSDK.JSONSubscriptType...) -> DIGIPROSDK.JSON {
    get
    set
  }
}
extension JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [DIGIPROSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension JSON {
  public var array: [DIGIPROSDK.JSON]? {
    get
  }
  public var arrayValue: [DIGIPROSDK.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension JSON {
  public var dictionary: [Swift.String : DIGIPROSDK.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : DIGIPROSDK.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension JSON : Swift.Comparable {
}
public func == (lhs: DIGIPROSDK.JSON, rhs: DIGIPROSDK.JSON) -> Swift.Bool
public func <= (lhs: DIGIPROSDK.JSON, rhs: DIGIPROSDK.JSON) -> Swift.Bool
public func >= (lhs: DIGIPROSDK.JSON, rhs: DIGIPROSDK.JSON) -> Swift.Bool
public func > (lhs: DIGIPROSDK.JSON, rhs: DIGIPROSDK.JSON) -> Swift.Bool
public func < (lhs: DIGIPROSDK.JSON, rhs: DIGIPROSDK.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: DIGIPROSDK.writingOptionsKeys, b: DIGIPROSDK.writingOptionsKeys) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class MetaDataTableViewCell : UIKit.UITableViewCell, UIKit.UITextFieldDelegate {
  @objc @IBOutlet weak public var lblNameMD: UIKit.UILabel!
  @objc @IBOutlet weak public var textFieldMD: UIKit.UITextField!
  public static let identifier: Swift.String
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers public class MetaAttributesViewController : UIKit.UIViewController {
  public var metaDataTableView: UIKit.UITableView
  public var metaBtnCancel: UIKit.UIButton
  public var metaBtnGuardar: UIKit.UIButton
  public var documentType: UIKit.UIPickerView
  public var lblTipoDoc: UIKit.UILabel
  public var docID: Swift.Int
  public var arrayMetadatos: [DIGIPROSDK.FEListMetadatosHijos]
  public var listAllowed: [DIGIPROSDK.FEListTipoDoc]
  public var fedocumento: DIGIPROSDK.FEDocumento
  public var feanexo: DIGIPROSDK.FEAnexoData
  public var delegate: DIGIPROSDK.MetaFormDelegate?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension MetaAttributesViewController : UIKit.UIPickerViewDelegate, UIKit.UIPickerViewDataSource {
  @objc dynamic public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc dynamic public func pickerView(_ pickerView: UIKit.UIPickerView, viewForRow row: Swift.Int, forComponent component: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
}
extension MetaAttributesViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
public enum CascadeDirection {
  case topToBottom
  case bottomToTop
  case leftToRight
  case rightToLeft
  case radial(center: CoreGraphics.CGPoint)
  case inverseRadial(center: CoreGraphics.CGPoint)
}
extension String {
  public func match(regex: Swift.String) -> (Swift.String, Swift.CountableRange<Swift.Int>)?
}
extension SpreadsheetView {
  @objc override dynamic public func layoutSubviews()
}
extension Blowfish {
  convenience public init(key: Swift.String, iv: Swift.String, padding: DIGIPROSDK.Padding = .pkcs7) throws
}
extension APIManager {
  final public func decodeReturnSoap(_ getEncodeData: Swift.String) throws -> Swift.String
  final public func restoreToken()
}
final public class AES {
  public enum Error : Swift.Error {
    case invalidKeySize
    case dataPaddingRequired
    case invalidData
    public static func == (a: DIGIPROSDK.AES.Error, b: DIGIPROSDK.AES.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Variant : Swift.Int {
    case aes128, aes192, aes256
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  final public let variant: DIGIPROSDK.AES.Variant
  public init(key: Swift.Array<Swift.UInt8>, blockMode: DIGIPROSDK.BlockMode, padding: DIGIPROSDK.Padding = .pkcs7) throws
  @objc deinit
}
extension AES : DIGIPROSDK.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class Atributos_moneda : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var contenidoestatico: Swift.Bool
  @objc public var cultura: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var mascara: Swift.String
  @objc public var metadato: Swift.String
  @objc public var numeromaximo: Swift.Int
  @objc public var numerominimo: Swift.Int
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var expresionregular: Swift.String
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var mayusculasminusculas: Swift.String
  @objc public var ordenenresumen: Swift.Int
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension UIViewController : DIGIPROSDK.HeroCompatible {
  public typealias CompatibleType = UIKit.UIViewController
}
extension HeroExtension where Base : UIKit.UIViewController {
  public var modalAnimationType: DIGIPROSDK.HeroDefaultAnimationType {
    get
    set
  }
  public var modalAnimationTypeString: Swift.String? {
    get
    set
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
}
extension UIViewController {
  @available(*, deprecated, message: "Use hero.modalAnimationType instead")
  public var heroModalAnimationType: DIGIPROSDK.HeroDefaultAnimationType {
    get
    set
  }
  @objc @available(*, deprecated, message: "Use hero.modalAnimationTypeString instead")
  @IBInspectable dynamic public var heroModalAnimationTypeString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, message: "Use hero.isEnabled instead")
  @IBInspectable dynamic public var isHeroEnabled: Swift.Bool {
    @objc get
    @objc set
  }
}
extension HeroExtension where Base : UIKit.UINavigationController {
  public var navigationAnimationType: DIGIPROSDK.HeroDefaultAnimationType {
    get
    set
  }
  public var navigationAnimationTypeString: Swift.String? {
    get
    set
  }
}
extension UINavigationController {
  @available(*, deprecated, message: "Use hero.navigationAnimationType instead")
  public var heroNavigationAnimationType: DIGIPROSDK.HeroDefaultAnimationType {
    get
    set
  }
  @objc @available(*, deprecated, message: "Use hero.navigationAnimationTypeString instead")
  @IBInspectable dynamic public var heroNavigationAnimationTypeString: Swift.String? {
    @objc get
    @objc set
  }
}
extension HeroExtension where Base : UIKit.UITabBarController {
  public var tabBarAnimationType: DIGIPROSDK.HeroDefaultAnimationType {
    get
    set
  }
  public var tabBarAnimationTypeString: Swift.String? {
    get
    set
  }
}
extension UITabBarController {
  @available(*, deprecated, message: "Use hero.tabBarAnimationType instead")
  public var heroTabBarAnimationType: DIGIPROSDK.HeroDefaultAnimationType {
    get
    set
  }
  @objc @available(*, deprecated, message: "Use hero.tabBarAnimationTypeString instead")
  @IBInspectable dynamic public var heroTabBarAnimationTypeString: Swift.String? {
    @objc get
    @objc set
  }
}
extension HeroExtension where Base : UIKit.UIViewController {
  public func dismissViewController(completion: (() -> Swift.Void)? = nil)
  public func unwindToRootViewController()
  public func unwindToViewController(_ toViewController: UIKit.UIViewController)
  public func unwindToViewController(withSelector: ObjectiveC.Selector)
  public func unwindToViewController(withClass: Swift.AnyClass)
  public func unwindToViewController(withMatchBlock: (UIKit.UIViewController) -> Swift.Bool)
  public func replaceViewController(with next: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
}
extension UIViewController {
  @objc @available(swift, deprecated: 0.1.4, message: "use hero.dismissViewController instead")
  @IBAction dynamic public func ht_dismiss(_ sender: UIKit.UIView)
  @available(swift, deprecated: 0.1.4, message: "use hero.replaceViewController(with:) instead")
  public func heroReplaceViewController(with next: UIKit.UIViewController)
  @objc @available(*, deprecated, message: "Use hero.dismissViewController instead")
  @IBAction dynamic public func hero_dismissViewController()
  @objc @available(*, deprecated, message: "Use hero.unwindToRootViewController instead")
  @IBAction dynamic public func hero_unwindToRootViewController()
  @available(*, deprecated, message: "Use hero.unwindToViewController(_:) instead")
  public func hero_unwindToViewController(_ toViewController: UIKit.UIViewController)
  @available(*, deprecated, message: "Use hero.unwindToViewController(withSelector:) instead")
  public func hero_unwindToViewController(withSelector: ObjectiveC.Selector)
  @available(*, deprecated, message: "Use hero_unwindToViewController(withClass:) instead")
  public func hero_unwindToViewController(withClass: Swift.AnyClass)
  @available(*, deprecated, message: "Use hero.unwindToViewController(withMatchBlock:) instead")
  public func hero_unwindToViewController(withMatchBlock: (UIKit.UIViewController) -> Swift.Bool)
  @available(*, deprecated, message: "Use hero.replaceViewController(with:) instead")
  public func hero_replaceViewController(with next: UIKit.UIViewController)
}
@_hasMissingDesignatedInitializers public class HeroContext {
  final public let container: UIKit.UIView
  public var fromViews: [UIKit.UIView]
  public var toViews: [UIKit.UIView]
  @objc deinit
}
extension HeroContext {
  public func sourceView(for heroID: Swift.String) -> UIKit.UIView?
  public func destinationView(for heroID: Swift.String) -> UIKit.UIView?
  public func pairedView(for view: UIKit.UIView) -> UIKit.UIView?
  public func snapshotView(for view: UIKit.UIView) -> UIKit.UIView
  public subscript(view: UIKit.UIView) -> DIGIPROSDK.HeroTargetState? {
    get
    set
  }
  public func clean()
}
extension HeroContext {
  public func hide(view: UIKit.UIView)
  public func unhide(view: UIKit.UIView)
}
@objc @_inheritsConvenienceInitializers public class FEFormatoData : DIGIPROSDK.EVObject {
  @objc public var Guid: Swift.String
  @objc public var GuidPdf: Swift.String
  @objc public var InstanciaId: Swift.Int
  @objc public var DocID: Swift.Int
  @objc public var ExpID: Swift.Int
  @objc public var NombreExpediente: Swift.String
  @objc public var TipoDocID: Swift.Int
  @objc public var NombreTipoDoc: Swift.String
  @objc public var EstadoID: Swift.Int
  @objc public var NombreEstado: Swift.String
  @objc public var Usuario: Swift.String
  @objc public var FlujoID: Swift.Int
  @objc public var NombreFlujo: Swift.String
  @objc public var ProcesoID: Swift.Int
  @objc public var NombreProceso: Swift.String
  @objc public var PIID: Swift.Int
  @objc public var EstadoApp: Swift.Int
  @objc public var CoordenadasFormato: Swift.String
  @objc public var JsonDatos: Swift.String
  @objc public var Xml: Swift.String
  @objc public var Anexos: [DIGIPROSDK.FEAnexoData]
  @objc public var AnexosBorrados: [Swift.String]
  @objc public var Estadisticas: [DIGIPROSDK.FEEstadistica]
  @objc public var TareaSiguiente: DIGIPROSDK.FEEventosFlujo
  @objc public var Movil: Swift.Bool
  @objc public var Reserva: Swift.Bool
  @objc public var Enviado: Swift.Bool
  @objc public var Borrador: Swift.Bool
  @objc public var porEnviar: Swift.Bool
  @objc public var TipoReemplazo: Swift.Int
  @objc public var Accion: Swift.Int
  @objc public var Resumen: Swift.String
  @objc public var Editado: Swift.Bool
  @objc public var ShowLog: Swift.Bool
  @objc public var ShowLogTransitando: Swift.Bool
  @objc public var ShowLogEnviando: Swift.Bool
  @objc public var ShowLogDownloadAnexos: Swift.Bool
  @objc public var estatusEnvio: Swift.Int
  @objc public var estatusTransitando: Swift.Int
  @objc public var AnexosDescargados: Swift.Bool
  @objc public var isSelected: Swift.Bool
  @objc public var FechaFormatoLong: Swift.Int
  @objc public var FechaFormato: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FELogaltyDocuments : DIGIPROSDK.EVObject {
  @objc public var type: Swift.String
  @objc public var base64: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public struct ReglaRequerido<T> : Eureka.RuleType where T : Swift.Equatable {
  public init(msg: Swift.String = NSLocalizedString("rules_required", bundle: Cnstnt.Path.framework ?? Bundle.main, comment: ""), id: Swift.String? = nil)
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public func isValid(value: T?) -> Eureka.ValidationError?
  public typealias RowValueType = T
}
public struct ReglaListaRequerido<T> : Eureka.RuleType where T : Swift.Equatable {
  public init(msg: Swift.String = NSLocalizedString("rules_required", bundle: Cnstnt.Path.framework ?? Bundle.main, comment: ""), id: Swift.String? = nil)
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public func isValid(value: T?) -> Eureka.ValidationError?
  public typealias RowValueType = T
}
public struct ReglaListaValor : Eureka.RuleType {
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public init(msg: Swift.String = NSLocalizedString("rules_select", bundle: Cnstnt.Path.framework ?? Bundle.main, comment: ""), id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct ReglaMinFila : Eureka.RuleType {
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public init(minFila: Swift.UInt, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct ReglaMinLongitud : Eureka.RuleType {
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public init(minLength: Swift.UInt, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct ReglaRangoNumerico : Eureka.RuleType {
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public init(minNumber: Swift.Int64, maxNumber: Swift.Int64, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct ReglaMaxLongitud : Eureka.RuleType {
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public init(maxLength: Swift.UInt, msg: Swift.String, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct ReglaExactaLongitud : Eureka.RuleType {
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public init(exactLength: Swift.UInt, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  public typealias RowValueType = Swift.String
}
open class ReglaExpReg : Eureka.RuleType {
  public var regExpr: Swift.String
  public var id: Swift.String?
  public var validationError: Eureka.ValidationError
  public var allowsEmpty: Swift.Bool
  public init(regExpr: Swift.String, allowsEmpty: Swift.Bool = true, msg: Swift.String = NSLocalizedString("rules_value", bundle: Cnstnt.Path.framework ?? Bundle.main, comment: ""), id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> Eureka.ValidationError?
  @objc deinit
  public typealias RowValueType = Swift.String
}
extension Promise {
  final public func `return`<A>(on queue: Dispatch.DispatchQueue = .main, _ value: A) -> DIGIPROSDK.Promise<A>
  final public func thenReturn<A>(on queue: Dispatch.DispatchQueue = .main, _ value: A) -> DIGIPROSDK.Promise<A>
}
public struct PrintOptions : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: DIGIPROSDK.PrintOptions
  public static let UnknownKeypath: DIGIPROSDK.PrintOptions
  public static let IncorrectKey: DIGIPROSDK.PrintOptions
  public static let ShouldExtendNSObject: DIGIPROSDK.PrintOptions
  public static let IsInvalidJson: DIGIPROSDK.PrintOptions
  public static let MissingProtocol: DIGIPROSDK.PrintOptions
  public static let MissingKey: DIGIPROSDK.PrintOptions
  public static let InvalidType: DIGIPROSDK.PrintOptions
  public static let InvalidValue: DIGIPROSDK.PrintOptions
  public static let InvalidClass: DIGIPROSDK.PrintOptions
  public static let EnumWithoutAssociatedValue: DIGIPROSDK.PrintOptions
  public static let UseWorkaround: DIGIPROSDK.PrintOptions
  public static var All: DIGIPROSDK.PrintOptions
  public static var Active: DIGIPROSDK.PrintOptions
  public var description: Swift.String {
    get
  }
  public typealias Element = DIGIPROSDK.PrintOptions
  public typealias ArrayLiteralElement = DIGIPROSDK.PrintOptions
  public typealias RawValue = Swift.Int
}
public func evPrint(_ options: DIGIPROSDK.PrintOptions, _ value: Swift.String)
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerPriortizable : DIGIPROSDK.ConstraintMakerFinalizable {
  @discardableResult
  public func priority(_ amount: DIGIPROSDK.ConstraintPriority) -> DIGIPROSDK.ConstraintMakerFinalizable
  @discardableResult
  public func priority(_ amount: DIGIPROSDK.ConstraintPriorityTarget) -> DIGIPROSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.required) instead.")
  @discardableResult
  public func priorityRequired() -> DIGIPROSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.high) instead.")
  @discardableResult
  public func priorityHigh() -> DIGIPROSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.medium) instead.")
  @discardableResult
  public func priorityMedium() -> DIGIPROSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.low) instead.")
  @discardableResult
  public func priorityLow() -> DIGIPROSDK.ConstraintMakerFinalizable
  @objc deinit
}
public enum Corner {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public static func == (a: DIGIPROSDK.Corner, b: DIGIPROSDK.Corner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class CoverFromCornerAnimation : DIGIPROSDK.PresentrAnimation {
  public init(corner: DIGIPROSDK.Corner)
  override public func transform(containerFrame: CoreGraphics.CGRect, finalFrame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc deinit
  override public init(options: DIGIPROSDK.AnimationOptions = super)
}
@objc @_inheritsConvenienceInitializers public class Atributos_video : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var leyendavideo: Swift.String
  @objc public var modocamara: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var permisocamara: Swift.Bool
  @objc public var permisoimportar: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var colortomarvideo: Swift.String
  @objc public var colorimportar: Swift.String
  @objc public var colorborrar: Swift.String
  @objc public var colorreemplazar: Swift.String
  @objc public var permisotipificar: Swift.Bool
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension Promise {
  final public func recover(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Swift.Error) throws -> DIGIPROSDK.Promise<Result>) -> DIGIPROSDK.Promise<Result>
  final public func recover(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Swift.Error) throws -> Result) -> DIGIPROSDK.Promise<Result>
}
@available(iOS 8.0, *)
public struct ConstraintLayoutSupportDSL : DIGIPROSDK.ConstraintDSL {
  public var target: Swift.AnyObject? {
    get
  }
  public var top: DIGIPROSDK.ConstraintItem {
    get
  }
  public var bottom: DIGIPROSDK.ConstraintItem {
    get
  }
  public var height: DIGIPROSDK.ConstraintItem {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FELogError : DIGIPROSDK.EVObject {
  @objc public var Modulo: Swift.String
  @objc public var ErrorResumido: Swift.String
  @objc public var ErrorInterno: Swift.String
  @objc public var Fecha: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public protocol HeroPreprocessor : AnyObject {
  var hero: DIGIPROSDK.HeroTransition! { get set }
  func process(fromViews: [UIKit.UIView], toViews: [UIKit.UIView])
}
public protocol HeroAnimator : AnyObject {
  var hero: DIGIPROSDK.HeroTransition! { get set }
  func canAnimate(view: UIKit.UIView, appearing: Swift.Bool) -> Swift.Bool
  func animate(fromViews: [UIKit.UIView], toViews: [UIKit.UIView]) -> Foundation.TimeInterval
  func clean()
  func seekTo(timePassed: Foundation.TimeInterval)
  func resume(timePassed: Foundation.TimeInterval, reverse: Swift.Bool) -> Foundation.TimeInterval
  func apply(state: DIGIPROSDK.HeroTargetState, to view: UIKit.UIView)
  func changeTarget(state: DIGIPROSDK.HeroTargetState, isDestination: Swift.Bool, to view: UIKit.UIView)
}
public protocol HeroProgressUpdateObserver : AnyObject {
  func heroDidUpdateProgress(progress: Swift.Double)
}
public enum HeroViewOrderingStrategy {
  case auto, sourceViewOnTop, destinationViewOnTop
  public static func == (a: DIGIPROSDK.HeroViewOrderingStrategy, b: DIGIPROSDK.HeroViewOrderingStrategy) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public func join<A, B>(on queue: Dispatch.DispatchQueue = .main, _ a: DIGIPROSDK.Promise<A>, _ b: DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<(A, B)>
public func join<A, B, C>(on queue: Dispatch.DispatchQueue = .main, _ a: DIGIPROSDK.Promise<A>, _ b: DIGIPROSDK.Promise<B>, _ c: DIGIPROSDK.Promise<C>) -> DIGIPROSDK.Promise<(A, B, C)>
public func join<A, B, C, D>(on queue: Dispatch.DispatchQueue = .main, _ a: DIGIPROSDK.Promise<A>, _ b: DIGIPROSDK.Promise<B>, _ c: DIGIPROSDK.Promise<C>, _ d: DIGIPROSDK.Promise<D>) -> DIGIPROSDK.Promise<(A, B, C, D)>
@objc @_inheritsConvenienceInitializers public class FEAppSkinLogin : DIGIPROSDK.EVObject {
  @objc public var NombreLogo: Swift.String
  @objc public var Logo: Swift.String
  @objc public var LogoHeight: Swift.String
  @objc public var LogoWidth: Swift.String
  @objc public var NombreBackGround: Swift.String
  @objc public var BackGround: Swift.String
  @objc public var BienvenidosTexto: Swift.String
  @objc public var BienvenidosTamano: Swift.String
  @objc public var BienvenidosColor: Swift.String
  @objc public var SubtituloTexto: Swift.String
  @objc public var SubtituloTamano: Swift.String
  @objc public var SubtituloColor: Swift.String
  @objc public var EtiquetaUsuario: Swift.String
  @objc public var EtiquetaUsuarioColor: Swift.String
  @objc public var EtiquetaPassword: Swift.String
  @objc public var EtiquetaPasswordColor: Swift.String
  @objc public var BotonTexto: Swift.String
  @objc public var BotonColor: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension HeroTransition {
  public func transition(from: UIKit.UIViewController, to: UIKit.UIViewController, in view: UIKit.UIView, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers public class CompareFacesJson : DIGIPROSDK.EVObject {
  @objc public var imagen1: Swift.String
  @objc public var imagen2: Swift.String
  @objc public var proveedor: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class CompareFacesResult : DIGIPROSDK.EVObject {
  @objc public var DescripcionRespuesta: Swift.String
  @objc public var RespuestaServicio: Swift.String
  @objc public var Provedor: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var User: Swift.String
  @objc public var Rostro1: Swift.String
  @objc public var Rostro2: Swift.String
  @objc public var Score: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CompareFacesResponse : DIGIPROSDK.EVObject {
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc public var mensaje: Swift.String
  @objc public var score: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public typealias CipherOperationOnBlock = (Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
public protocol BlockMode {
  var options: DIGIPROSDK.BlockModeOption { get }
  func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
final public class Rabbit {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    public static func == (a: DIGIPROSDK.Rabbit.Error, b: DIGIPROSDK.Rabbit.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static let ivSize: Swift.Int
  public static let keySize: Swift.Int
  public static let blockSize: Swift.Int
  final public var keySize: Swift.Int {
    get
  }
  convenience public init(key: Swift.Array<Swift.UInt8>) throws
  public init(key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>?) throws
  @objc deinit
}
extension Rabbit : DIGIPROSDK.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers @objcMembers open class EVObject : ObjectiveC.NSObject, Foundation.NSCoding, DIGIPROSDK.EVReflectable {
  @objc override dynamic open func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  @objc required override dynamic public init()
  @objc convenience required public init?(coder: Foundation.NSCoder)
  @objc open func encode(with aCoder: Foundation.NSCoder)
  @objc open func initValidation(_ dict: Foundation.NSDictionary)
  open func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  open func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  @objc open func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  @objc open func encodePropertyValue(value: Any, key: Swift.String) -> Any
  @objc open func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  open func getSpecificType(_ dict: Foundation.NSDictionary) -> DIGIPROSDK.EVReflectable?
  @objc open func customConverter() -> Swift.AnyObject?
  @objc deinit
}
public protocol Authenticator {
  func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension HeroTransition {
  open func animate()
}
public enum ModalSize {
  case `default`
  case half
  case full
  case fluid(percentage: Swift.Float)
  case sideMargin(value: Swift.Float)
  case custom(size: Swift.Float)
  case customOrientation(sizePortrait: Swift.Float, sizeLandscape: Swift.Float)
}
@objc @_inheritsConvenienceInitializers public class FEListaServicios : DIGIPROSDK.EVObject {
  @objc public var Activo: Swift.Bool
  @objc public var TipoCatalogoID: Swift.Int
  @objc public var CVECatalogoPID: Swift.String
  @objc public var Descripcion: Swift.String
  @objc public var CVECatalogo: Swift.String
  @objc public var CatalogoId: Swift.Int
  @objc public var Json: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEIncidencias : DIGIPROSDK.EVObject {
  @objc public var causa: Swift.String
  @objc public var motivo: Swift.String
  @objc public var descripcion: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
public protocol _UInt8Type {
}
extension UInt8 : DIGIPROSDK._UInt8Type {
}
extension UInt8 {
  public func bits() -> [DIGIPROSDK.Bit]
  public func bits() -> Swift.String
}
extension EVReflectable where Self : ObjectiveC.NSObject {
  public init?(xmlString: Swift.String, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init?(xmlData: Foundation.Data?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
}
@_hasMissingDesignatedInitializers open class JSONSerializer {
  public enum JSONSerializerError : Swift.Error {
    case jsonIsNotDictionary
    case jsonIsNotArray
    case jsonIsNotValid
    public static func == (a: DIGIPROSDK.JSONSerializer.JSONSerializerError, b: DIGIPROSDK.JSONSerializer.JSONSerializerError) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func toDictionary(_ jsonString: Swift.String) throws -> Foundation.NSDictionary
  public static func toArray(_ jsonString: Swift.String) throws -> Foundation.NSArray
  public static func toJson(_ object: Any, prettify: Swift.Bool = false) -> Swift.String
  @objc deinit
}
public protocol Cryptor {
  mutating func seek(to: Swift.Int) throws
}
@_hasMissingDesignatedInitializers final public class EVReflection {
  final public class func fromDictionary(_ dictionary: Foundation.NSDictionary, anyobjectTypeString: Swift.String, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize) -> ObjectiveC.NSObject?
  @discardableResult
  final public class func setPropertiesfromDictionary<T>(_ dictionary: Foundation.NSDictionary, anyObject: T, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> T where T : ObjectiveC.NSObject
  final public class func getValue(_ fromObject: ObjectiveC.NSObject, key: Swift.String) -> Any?
  final public class func toDictionary(_ theObject: ObjectiveC.NSObject, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, isCachable: Swift.Bool = false, parents: [ObjectiveC.NSObject] = []) -> (Foundation.NSDictionary, Foundation.NSDictionary)
  final public class func dictionaryFromJson(_ json: Swift.String?) -> Foundation.NSDictionary
  final public class func dictionaryArrayFromJson(_ json: Swift.String?) -> [Foundation.NSDictionary]
  final public class func arrayFromData<T>(_ theObject: ObjectiveC.NSObject? = nil, type: T, data: Foundation.Data?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> [T]
  final public class func arrayFromJson<T>(type: T, json: Swift.String?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil) -> [T]
  final public class func toJsonString(_ theObject: ObjectiveC.NSObject, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  final public class func toJsonData(_ theObject: ObjectiveC.NSObject, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  final public class func logObject(_ theObject: DIGIPROSDK.EVReflectable, prettyPrinted: Swift.Bool = true)
  final public class func description(_ theObject: DIGIPROSDK.EVReflectable, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = true) -> Swift.String
  final public class func hashValue(_ theObject: ObjectiveC.NSObject) -> Swift.Int
  final public class func encodeWithCoder(_ theObject: ObjectiveC.NSObject, aCoder: Foundation.NSCoder, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultNSCoding)
  final public class func decodeObjectWithCoder(_ theObject: ObjectiveC.NSObject, aDecoder: Foundation.NSCoder, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultNSCoding)
  final public class func areEqual(_ lhs: ObjectiveC.NSObject, rhs: ObjectiveC.NSObject) -> Swift.Bool
  final public class func dictionariesAreEqual(_ lhsdict: Foundation.NSDictionary, rhsdict: Foundation.NSDictionary) -> Swift.Bool
  final public class func getCleanAppName(_ forObject: ObjectiveC.NSObject? = nil) -> Swift.String
  final public class func getCleanAppName(_ aClass: Swift.AnyClass?) -> Swift.String
  final public class func setBundleIdentifier(_ forClass: Swift.AnyClass)
  final public class func setBundleIdentifier(_ identifier: Swift.String)
  final public class func setBundleIdentifiers(_ classes: Swift.Array<Swift.AnyClass>)
  final public class func setBundleIdentifiers(_ identifiers: Swift.Array<Swift.String>)
  final public class func setDateFormatter(_ formatter: Foundation.DateFormatter?)
  final public class func swiftClassTypeFromString(_ className: Swift.String) -> Swift.AnyClass?
  final public class func swiftClassFromString(_ className: Swift.String) -> ObjectiveC.NSObject?
  final public class func swiftStringFromClass(_ theObject: ObjectiveC.NSObject) -> Swift.String
  final public class func swiftStringFromClass(_ aClass: Swift.AnyClass) -> Swift.String
  final public class func valueForAny(_ parentObject: Any? = nil, key: Swift.String? = nil, anyValue: Any, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, isCachable: Swift.Bool = false, parents: [ObjectiveC.NSObject] = []) -> (value: Swift.AnyObject, type: Swift.String, isObject: Swift.Bool)
  final public class func convertToInternalSwiftRepresentation(type: Swift.String) -> Swift.String
  final public class func valueForAnyDetail(_ parentObject: Any? = nil, key: Swift.String? = nil, theValue: Any, valueType: Swift.String) -> (value: Swift.AnyObject, type: Swift.String, isObject: Swift.Bool)
  public static func setObjectValue<T>(_ anyObject: T, key: Swift.String, theValue: Any?, typeInObject: Swift.String? = nil, valid: Swift.Bool, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, parents: [ObjectiveC.NSObject] = []) where T : ObjectiveC.NSObject
  @objc deinit
}
extension Date {
  public init?(fromDateTimeString: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class FEItemCatalogo : DIGIPROSDK.EVObject {
  @objc public var TipoCatalogoID: Swift.Int
  @objc public var CatalogoId: Swift.Int
  @objc public var Descripcion: Swift.String
  @objc public var CVECatalogoPID: Swift.String
  @objc public var CVECatalogo: Swift.String
  @objc public var Activo: Swift.Int
  @objc public var Json: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
extension UIView {
  public func shake()
  public func asImage() -> UIKit.UIImage
  public func dropShadow(scale: Swift.Bool = true)
  public func dropShadow(color: UIKit.UIColor, opacity: Swift.Float = 0.5, offSet: CoreGraphics.CGSize, radius: CoreGraphics.CGFloat = 1, scale: Swift.Bool = true)
}
public enum BannerStyle {
  case danger
  case info
  case none
  case success
  case warning
  public static func == (a: DIGIPROSDK.BannerStyle, b: DIGIPROSDK.BannerStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Rabbit {
  convenience public init(key: Swift.String) throws
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
@objc @_inheritsConvenienceInitializers public class Formula : DIGIPROSDK.EVObject {
  @objc public var id: Swift.String
  @objc public var tipo: Swift.String
  @objc public var type: Swift.String
  @objc public var value: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public protocol EVCustomReflectable {
  static func constructWith(value: Any?) -> DIGIPROSDK.EVCustomReflectable?
  func constructWith(value: Any?) -> DIGIPROSDK.EVCustomReflectable?
  func toCodableValue() -> Any
}
@objc public class myCustomSlider : UIKit.UISlider {
  public var label: UIKit.UILabel
  public var prefijo: Swift.String
  public var posfijo: Swift.String
  public var estilo: Swift.String
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @IBInspectable open var trackWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override dynamic open func trackRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public func updateLabel()
  public func updateEstilo()
  @objc override dynamic public func layoutSubviews()
  @objc public func onValueChanged(sender: DIGIPROSDK.myCustomSlider)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
final public class Expression : Swift.CustomStringConvertible {
  public typealias SymbolEvaluator = ([Swift.Double]) throws -> Swift.Double
  public enum Arity : Swift.ExpressibleByIntegerLiteral, Swift.CustomStringConvertible, Swift.Hashable {
    case exactly(Swift.Int)
    case atLeast(Swift.Int)
    public static let any: DIGIPROSDK.Expression.Arity
    public init(integerLiteral value: Swift.Int)
    public var description: Swift.String {
      get
    }
    public func hash(into _: inout Swift.Hasher)
    public static func == (lhs: DIGIPROSDK.Expression.Arity, rhs: DIGIPROSDK.Expression.Arity) -> Swift.Bool
    public typealias IntegerLiteralType = Swift.Int
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Symbol : Swift.CustomStringConvertible, Swift.Hashable {
    case variable(Swift.String)
    case infix(Swift.String)
    case prefix(Swift.String)
    case postfix(Swift.String)
    case function(Swift.String, arity: DIGIPROSDK.Expression.Arity)
    case array(Swift.String)
    public var name: Swift.String {
      get
    }
    public var description: Swift.String {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: DIGIPROSDK.Expression.Symbol, b: DIGIPROSDK.Expression.Symbol) -> Swift.Bool
  }
  public enum Error : Swift.Error, Swift.CustomStringConvertible, Swift.Equatable {
    case message(Swift.String)
    case unexpectedToken(Swift.String)
    case missingDelimiter(Swift.String)
    case undefinedSymbol(DIGIPROSDK.Expression.Symbol)
    case arityMismatch(DIGIPROSDK.Expression.Symbol)
    case arrayBounds(DIGIPROSDK.Expression.Symbol, Swift.Double)
    public static let emptyExpression: DIGIPROSDK.Expression.Error
    public var description: Swift.String {
      get
    }
    public static func == (a: DIGIPROSDK.Expression.Error, b: DIGIPROSDK.Expression.Error) -> Swift.Bool
  }
  public struct Options : Swift.OptionSet {
    public static let noOptimize: DIGIPROSDK.Expression.Options
    public static let boolSymbols: DIGIPROSDK.Expression.Options
    public static let pureSymbols: DIGIPROSDK.Expression.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias Element = DIGIPROSDK.Expression.Options
    public typealias ArrayLiteralElement = DIGIPROSDK.Expression.Options
    public typealias RawValue = Swift.Int
  }
  convenience public init(_ expression: Swift.String, options: DIGIPROSDK.Expression.Options = [], constants: [Swift.String : Swift.Double] = [:], arrays: [Swift.String : [Swift.Double]] = [:], symbols: [DIGIPROSDK.Expression.Symbol : DIGIPROSDK.Expression.SymbolEvaluator] = [:])
  convenience public init(_ expression: DIGIPROSDK.ParsedExpression, options: DIGIPROSDK.Expression.Options = [], constants: [Swift.String : Swift.Double] = [:], arrays: [Swift.String : [Swift.Double]] = [:], symbols: [DIGIPROSDK.Expression.Symbol : DIGIPROSDK.Expression.SymbolEvaluator] = [:])
  public init(_ expression: DIGIPROSDK.ParsedExpression, impureSymbols: (DIGIPROSDK.Expression.Symbol) -> DIGIPROSDK.Expression.SymbolEvaluator?, pureSymbols: (DIGIPROSDK.Expression.Symbol) -> DIGIPROSDK.Expression.SymbolEvaluator? = { _ in nil })
  convenience public init(_ expression: DIGIPROSDK.ParsedExpression, pureSymbols: (DIGIPROSDK.Expression.Symbol) -> DIGIPROSDK.Expression.SymbolEvaluator?)
  public static func isValidIdentifier(_ string: Swift.String) -> Swift.Bool
  public static func isValidOperator(_ string: Swift.String) -> Swift.Bool
  public static func parse(_ expression: Swift.String, usingCache: Swift.Bool = true) -> DIGIPROSDK.ParsedExpression
  public static func parse(_ input: inout Swift.Substring.UnicodeScalarView, upTo delimiters: Swift.String...) -> DIGIPROSDK.ParsedExpression
  public static func clearCache(for expression: Swift.String? = nil)
  final public var description: Swift.String {
    get
  }
  final public var symbols: Swift.Set<DIGIPROSDK.Expression.Symbol> {
    get
  }
  final public func evaluate() throws -> Swift.Double
  public static let mathSymbols: [DIGIPROSDK.Expression.Symbol : DIGIPROSDK.Expression.SymbolEvaluator]
  public static let boolSymbols: [DIGIPROSDK.Expression.Symbol : DIGIPROSDK.Expression.SymbolEvaluator]
  @objc deinit
}
public struct ParsedExpression : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var symbols: Swift.Set<DIGIPROSDK.Expression.Symbol> {
    get
  }
  public var error: DIGIPROSDK.Expression.Error? {
    get
  }
}
extension PresentationType : Swift.Equatable {
}
public func == (lhs: DIGIPROSDK.PresentationType, rhs: DIGIPROSDK.PresentationType) -> Swift.Bool
extension ModalSize : Swift.Equatable {
}
public func == (lhs: DIGIPROSDK.ModalSize, rhs: DIGIPROSDK.ModalSize) -> Swift.Bool
extension ModalCenterPosition : Swift.Equatable {
}
public func == (lhs: DIGIPROSDK.ModalCenterPosition, rhs: DIGIPROSDK.ModalCenterPosition) -> Swift.Bool
public struct ConstraintPriority : Swift.ExpressibleByFloatLiteral, Swift.Equatable, Swift.Strideable {
  public typealias FloatLiteralType = Swift.Float
  public let value: Swift.Float
  public init(floatLiteral value: Swift.Float)
  public init(_ value: Swift.Float)
  public static var required: DIGIPROSDK.ConstraintPriority {
    get
  }
  public static var high: DIGIPROSDK.ConstraintPriority {
    get
  }
  public static var medium: DIGIPROSDK.ConstraintPriority {
    get
  }
  public static var low: DIGIPROSDK.ConstraintPriority {
    get
  }
  public static func == (lhs: DIGIPROSDK.ConstraintPriority, rhs: DIGIPROSDK.ConstraintPriority) -> Swift.Bool
  public func advanced(by n: DIGIPROSDK.ConstraintPriority.FloatLiteralType) -> DIGIPROSDK.ConstraintPriority
  public func distance(to other: DIGIPROSDK.ConstraintPriority) -> DIGIPROSDK.ConstraintPriority.FloatLiteralType
  public typealias Stride = DIGIPROSDK.ConstraintPriority.FloatLiteralType
}
public struct HKDF {
  public enum Error : Swift.Error {
    case invalidInput
    case derivedKeyTooLong
    public static func == (a: DIGIPROSDK.HKDF.Error, b: DIGIPROSDK.HKDF.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>? = nil, info: Swift.Array<Swift.UInt8>? = nil, keyLength: Swift.Int? = nil, variant: DIGIPROSDK.HMAC.Variant = .sha256) throws
  public func calculate() throws -> Swift.Array<Swift.UInt8>
}
public protocol HeroStringConvertible {
  static func from(node: DIGIPROSDK.ExprNode) -> Self?
}
@objc public protocol HeroViewControllerDelegate {
  @objc optional func heroWillStartAnimatingFrom(viewController: UIKit.UIViewController)
  @objc optional func heroDidEndAnimatingFrom(viewController: UIKit.UIViewController)
  @objc optional func heroDidCancelAnimatingFrom(viewController: UIKit.UIViewController)
  @objc optional func heroWillStartTransition()
  @objc optional func heroDidEndTransition()
  @objc optional func heroDidCancelTransition()
  @objc optional func heroWillStartAnimatingTo(viewController: UIKit.UIViewController)
  @objc optional func heroDidEndAnimatingTo(viewController: UIKit.UIViewController)
  @objc optional func heroDidCancelAnimatingTo(viewController: UIKit.UIViewController)
}
public enum ReflectionState<T> {
  case resolved(T)
  case rejected(Swift.Error)
  public var result: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension Promise {
  final public func reflect(on queue: Dispatch.DispatchQueue = .main) -> DIGIPROSDK.Promise<DIGIPROSDK.ReflectionState<Result>>
}
public enum LogType : Swift.String {
  case error
  case warning
  case success
  case action
  case canceled
  case log
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum enumColorDefault : Swift.String {
  case black
  case blue
  case bluedark
  case green
  case red
  case white
  case whitelight
  case yellow
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum EnumTipoSms : Swift.Int {
  case ninguno
  case registro
  case credito
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum Language : Swift.String {
  case none
  case en
  case es
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum enumErrorType : Swift.Int {
  case info = 0
  case success = 1
  case warning = 2
  case error = 3
  case format = 4
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum httpMethod : Swift.String {
  case POST
  case GET
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum plist : Swift.String {
  case version
  case bundle
  case idportal
  case data
  case delete
  case member
  case memberSwitch
  case codigo
  case usuario
  case nombre
  case paterno
  case materno
  case email
  case tel
  case estado
  case tutorial
  case touchid
  case faceid
  case calculadora
  case log
  case serial
  case tester
  case credifiel
  case ventas
  case implantacion
  case debugger
  case unittest
  case debugCode
  case debugUser
  case debugPass
  case licenceCode
  case licenceUser
  case licenceMode
  case regCell
  case regMail
  case regName
  case regValidate
  case regPass
  case regLogin
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum TipoElemento : Swift.String {
  case eventos
  case plantilla
  case pagina
  case seccion
  case boton
  case comboboxtemporal
  case combodinamico
  case deslizante
  case espacio
  case fecha
  case hora
  case leyenda
  case lista
  case logico
  case logo
  case moneda
  case numero
  case password
  case rangofechas
  case semaforotiempo
  case tabber
  case tabla
  case texto
  case textarea
  case wizard
  case metodo
  case servicio
  case marcadodocumentos
  case audio
  case calculadora
  case codigobarras
  case codigoqr
  case nfc
  case firma
  case firmafad
  case georeferencia
  case imagen
  case mapa
  case video
  case videollamada
  case voz
  case documento
  case huelladigital
  case rostrovivo
  case capturafacial
  case other
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum APISuccessResponse : Swift.Int {
  case success = 200
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum ApiErrors : Swift.Int {
  case success
  case terms
  case malfunction
  case changePassword
  case noSession
  case disabledAccount
  case misConfiguration
  case unknown
  case data
  case xml
  case request
  case nofile
  case notask
  case noFormat
  case noData
  case connection
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
public enum Domain : Swift.String {
  case sdk
  case so
  case ato
  case fo
  case vo
  case ui
  case bnl
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum APIErrorResponse : Swift.Error {
  case DetectLicenceError
  case InternetConnectionError
  case LoginCodeError(Swift.Int)
  case LoginUserError(Swift.Int)
  case TemplatesError(Swift.Int)
  case VariablesError(Swift.Int)
  case FormatsError(Swift.Int)
  case CodigoOnlineError
  case SkinOnlineError
  case UsuarioOnlineError
  case PlantillasOnlineError
  case VariablesOnlineError
  case FormatosOnlineError
  case FlujosAndProcesosOnlineError
  case RegistroOnlineError
  case RegistroRegistradoOnlineError
  case SMSOnlineError
  case CodigoOfflineError
  case SkinOfflineError
  case UsuarioOfflineError
  case PlantillasOfflineError
  case VariablesOfflineError
  case CodigoError
  case LoginError
  case SkinError
  case XMLError
  case ParseError
  case ServerError
  case TransitedError
  case NoTransitedOptions
  case FormsError
  case defaultError
}
public enum ObfuscatedCnstnt {
  public static let dgp: [Swift.UInt8]
  public static let fcl: [Swift.UInt8]
  public static let fcll: [Swift.UInt8]
  public static let rln: [Swift.UInt8]
  public static let rfb: [Swift.UInt8]
  public static let uptl: [Swift.UInt8]
  public static let hac: [Swift.UInt8]
  public static let had: [Swift.UInt8]
  public static let cdl: [Swift.UInt8]
  public static let tmp: [Swift.UInt8]
  public static let spen: [Swift.UInt8]
  public static let cntr: [Swift.UInt8]
  public static let srvc: [Swift.UInt8]
  public static let tmprco: [Swift.UInt8]
  public static let tmprsk: [Swift.UInt8]
  public static let tmprlg: [Swift.UInt8]
  public static let tmprsnd: [Swift.UInt8]
  public static let tmpusri: [Swift.UInt8]
  public static let tmprrg: [Swift.UInt8]
  public static let tmprrgo: [Swift.UInt8]
  public static let tmprarg: [Swift.UInt8]
  public static let tmprarco: [Swift.UInt8]
  public static let tmprcpss: [Swift.UInt8]
  public static let tmprcpsso: [Swift.UInt8]
  public static let tmprrstpss: [Swift.UInt8]
  public static let tmprcdpl: [Swift.UInt8]
  public static let tmprobpl: [Swift.UInt8]
  public static let tmprobvr: [Swift.UInt8]
  public static let tmprcnfr: [Swift.UInt8]
  public static let tmprbfor: [Swift.UInt8]
  public static let tmprenf: [Swift.UInt8]
  public static let tmprena: [Swift.UInt8]
  public static let tmprcnan: [Swift.UInt8]
  public static let tmprtrf: [Swift.UInt8]
  public static let tmprcnt: [Swift.UInt8]
  public static let tmprpdf: [Swift.UInt8]
  public static let tmprcmfa: [Swift.UInt8]
  public static let tmprfol: [Swift.UInt8]
  public static let tmprsms: [Swift.UInt8]
  public static let tmprpnsms: [Swift.UInt8]
  public static let tmprvlsms: [Swift.UInt8]
  public static let tmprsndml: [Swift.UInt8]
  public static let tmprsrgn: [Swift.UInt8]
  public static let tmprsrgns: [Swift.UInt8]
  public static let tmprgnlg: [Swift.UInt8]
  public static let tmprgnsl: [Swift.UInt8]
  public static let tmprtmply: [Swift.UInt8]
  public static let tmprccrm: [Swift.UInt8]
  public static let tmprpdfpublicado: [Swift.UInt8]
}
extension UIImage {
  public func resizeVI(size: CoreGraphics.CGSize) -> UIKit.UIImage?
  public func getCGSizeImage(frameWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGSize
  public func upOrientationImage() -> UIKit.UIImage?
  public func crop(image: UIKit.UIImage, cropRect: CoreGraphics.CGRect) -> UIKit.UIImage?
  public func rotateImage(radians: Swift.Float) -> UIKit.UIImage?
  public func resized(withPercentage percentage: CoreGraphics.CGFloat) -> UIKit.UIImage?
  public func resized(toWidth width: CoreGraphics.CGFloat) -> UIKit.UIImage?
  public func tinted(color: UIKit.UIColor, blendMode: CoreGraphics.CGBlendMode) -> UIKit.UIImage?
  convenience public init?(withContentsOfUrl url: Foundation.URL) throws
  public func sha512Image() -> Swift.String
}
public protocol ConstraintMultiplierTarget {
  var constraintMultiplierTargetValue: CoreGraphics.CGFloat { get }
}
extension Int : DIGIPROSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreGraphics.CGFloat {
    get
  }
}
extension UInt : DIGIPROSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreGraphics.CGFloat {
    get
  }
}
extension Float : DIGIPROSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreGraphics.CGFloat {
    get
  }
}
extension Double : DIGIPROSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreGraphics.CGFloat {
    get
  }
}
extension CGFloat : DIGIPROSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreGraphics.CGFloat {
    get
  }
}
public enum BannerPosition {
  case bottom
  case top
  public static func == (a: DIGIPROSDK.BannerPosition, b: DIGIPROSDK.BannerPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class FETokenSeguridad : DIGIPROSDK.EVObject {
  @objc public var Token: Swift.String
  @objc public var Time: Swift.Int
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_firmafad : DIGIPROSDK.Atributos_Generales {
  @objc public var acuerdofirma: Swift.String
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var dispositivo: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var fecha: Swift.String
  @objc public var georeferencia: Swift.String
  @objc public var guidtimestamp: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampoanexo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var personafirma: Swift.String
  @objc public var tipocodificacion: Swift.String
  @objc public var obtenerhash: Swift.Bool
  @objc public var obtenerpruebasvideo: Swift.Bool
  @objc public var idelementovideo: Swift.String
  @objc public var hashCrypt: Swift.String
  @objc public var colorfirma: Swift.String
  @objc public var colorborrar: Swift.String
  @objc public var colorreemplazar: Swift.String
  @objc public var permisotipificar: Swift.Bool
  @objc public var intervalomaximo: Swift.Int
  @objc public var tipovalidacion: Swift.String
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_fecha : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var fechamax: Swift.String
  @objc public var fechamin: Swift.String
  @objc public var formato: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var mascara: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var separador: Swift.String
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var formatoObject: [Swift.String : Any]
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public struct Borders {
  public var top: DIGIPROSDK.BorderStyle
  public var bottom: DIGIPROSDK.BorderStyle
  public var left: DIGIPROSDK.BorderStyle
  public var right: DIGIPROSDK.BorderStyle
  public static func all(_ style: DIGIPROSDK.BorderStyle) -> DIGIPROSDK.Borders
}
public enum BorderStyle {
  case none
  case solid(width: CoreGraphics.CGFloat, color: UIKit.UIColor)
}
extension BorderStyle : Swift.Equatable {
  public static func == (lhs: DIGIPROSDK.BorderStyle, rhs: DIGIPROSDK.BorderStyle) -> Swift.Bool
}
public func Bluebirddelay<A>(on queue: Dispatch.DispatchQueue = .main, _ seconds: Foundation.TimeInterval, _ result: A) -> DIGIPROSDK.Promise<A>
public func Bluebirddelay<A>(on queue: Dispatch.DispatchQueue = .main, _ seconds: Foundation.TimeInterval, _ promise: DIGIPROSDK.Promise<A>) -> DIGIPROSDK.Promise<A>
extension Promise {
  final public func Bluebirddelay(on queue: Dispatch.DispatchQueue = .main, _ seconds: Foundation.TimeInterval) -> DIGIPROSDK.Promise<Result>
}
extension SpreadsheetView {
  @objc override dynamic public func insertSubview(_ view: UIKit.UIView, at index: Swift.Int)
  @objc override dynamic public func exchangeSubview(at index1: Swift.Int, withSubviewAt index2: Swift.Int)
  @objc override dynamic public func addSubview(_ view: UIKit.UIView)
  @objc override dynamic public func insertSubview(_ view: UIKit.UIView, belowSubview siblingSubview: UIKit.UIView)
  @objc override dynamic public func insertSubview(_ view: UIKit.UIView, aboveSubview siblingSubview: UIKit.UIView)
  @objc override dynamic public func bringSubviewToFront(_ view: UIKit.UIView)
  @objc override dynamic public func sendSubviewToBack(_ view: UIKit.UIView)
}
public func `try`<A>(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping () throws -> DIGIPROSDK.Promise<A>) -> DIGIPROSDK.Promise<A>
public func `try`<A>(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping () throws -> A) -> DIGIPROSDK.Promise<A>
@objc @_inheritsConvenienceInitializers public class Atributos_marcadodocumentos : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campo: Swift.String
  @objc public var campocss: Swift.String
  @objc public var cargacamara: Swift.String
  @objc public var cargaimportacion: Swift.String
  @objc public var catalogodestino: [Any]
  @objc public var catalogoorigen: Swift.String
  @objc public var catalogoupdated: Swift.Bool
  @objc public var chosenitems: [Any]
  @objc public var decoraciontexto: Swift.String
  @objc public var elementodocumento: [Any]
  @objc public var elementopadre: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var estilotexto: Swift.String
  @objc public var executeonce: Swift.Bool
  @objc public var filtrarcatalogo: Foundation.NSMutableDictionary
  @objc public var fuentedatos: Swift.String
  @objc public var grosortexto: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var isRule: Swift.Bool
  @objc public var margenderecho: Swift.String
  @objc public var margenizquierdo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var opcionrequerida: Swift.String
  @objc public var orientacion: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var textoopcioncatalogo: Swift.String
  @objc public var tipo: Swift.String
  @objc public var tipoasociacion: Swift.String
  @objc public var tipolista: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEEnterpriseCalculadora : DIGIPROSDK.EVObject {
  @objc public var enterpriseID: Swift.String
  @objc public var enterpriseName: Swift.String
  @objc public var enterpriseBPID: Swift.String
  @objc public var enterpriseSigla: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public protocol EVReflectable : AnyObject, ObjectiveC.NSObjectProtocol {
  func initValidation(_ dict: Foundation.NSDictionary)
  func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  func encodePropertyValue(value: Any, key: Swift.String) -> Any
  func getType(_ dict: Foundation.NSDictionary) -> DIGIPROSDK.EVReflectable
  func getSpecificType(_ dict: Foundation.NSDictionary) -> DIGIPROSDK.EVReflectable?
  func customConverter() -> Swift.AnyObject?
  var evReflectionStatuses: [(DIGIPROSDK.DeserializationStatus, Swift.String)] { get set }
}
extension EVReflectable where Self : ObjectiveC.NSObject {
  public var evReflectionStatuses: [(DIGIPROSDK.DeserializationStatus, Swift.String)] {
    get
    set
  }
  public init(dictionary: Foundation.NSDictionary, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(json: Swift.String?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(data: Foundation.Data, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize, forKeyPath: Swift.String? = nil)
  public init(fileNameInTemp: Swift.String, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultNSCoding)
  public init(fileNameInDocuments: Swift.String, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultNSCoding)
  public init(usingValuesFrom: DIGIPROSDK.EVReflectable, conversionOptions: DIGIPROSDK.ConversionOptions = .None)
  public var hashValue: Swift.Int {
    get
  }
  public var hash: Swift.Int {
    get
  }
}
extension EVReflectable {
  public static func == (lhs: DIGIPROSDK.EVReflectable, rhs: DIGIPROSDK.EVReflectable) -> Swift.Bool
  public static func != (lhs: DIGIPROSDK.EVReflectable, rhs: DIGIPROSDK.EVReflectable) -> Swift.Bool
  public func initValidation(_ dict: Foundation.NSDictionary)
  public func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  public func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  public func decodePropertyValue(value: Any, key: Swift.String) -> Any?
  public func encodePropertyValue(value: Any, key: Swift.String) -> Any
  public func customConverter() -> Swift.AnyObject?
  public func getType(_ dict: Foundation.NSDictionary) -> DIGIPROSDK.EVReflectable
  public func getSpecificType(_ dict: Foundation.NSDictionary) -> DIGIPROSDK.EVReflectable?
  @discardableResult
  public func saveToTemp(_ fileName: Swift.String) -> Swift.Bool
  @discardableResult
  public func saveToDocuments(_ fileName: Swift.String) -> Swift.Bool
  public func toDictionary(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize) -> Foundation.NSDictionary
  public func toJsonString(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  public static func arrayFromJson<T>(_ json: Swift.String?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize) -> [T] where T : ObjectiveC.NSObject
  public func mapObjectTo<T>(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize) -> T where T : ObjectiveC.NSObject
  public func typeForKey(_ propertyName: Swift.String) -> Any.Type?
  public func convertDictionary(_ key: Swift.String, dict: Any) -> Foundation.NSDictionary
  public func initMayNotContainKeys(_ keys: [Swift.String], dict: Foundation.NSDictionary)
  public func initMustContainKeys(_ keys: [Swift.String], dict: Foundation.NSDictionary)
  public func evReflectionStatus() -> DIGIPROSDK.DeserializationStatus
  public func addStatusMessage(_ type: DIGIPROSDK.DeserializationStatus, message: Swift.String)
}
public enum ParseError : Swift.Error {
  case unexpectToken
  case undefinedOperator(Swift.String)
  case expectCharacter(Swift.Character)
  case expectExpression
  case expectArgumentList
  case expectFunctionName
}
public class HeroParser {
  public init(tokens: [DIGIPROSDK.Token])
  public func parse() throws -> [DIGIPROSDK.ExprNode]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SepoMexResult : DIGIPROSDK.EVObject {
  @objc public var CodigoPostal: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class SepomexResponse : DIGIPROSDK.EVObject {
  @objc public var folio: Swift.String
  @objc public var Item1: Swift.String
  @objc public var Item2: Swift.String
  @objc public var Item3: Swift.String
  @objc public var mensaje: Swift.String
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc public var estado: Swift.String
  @objc public var colonias: Swift.String
  @objc public var delegacion: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class SepomexJson : DIGIPROSDK.EVObject {
  @objc public var cp: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FECotizacionesData : DIGIPROSDK.EVObject {
  @objc public var status: Swift.String
  @objc public var ProductId: Swift.Int
  @objc public var response: Swift.String
  @objc public var code: Swift.Int
  @objc public var quotations: [DIGIPROSDK.FECotizaciones]
  @objc deinit
  @objc required dynamic public init()
}
extension Data {
  public func compress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public func decompress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public enum CompressionAlgorithm {
    case zlib
    case lzfse
    case lzma
    case lz4
    public static func == (a: Foundation.Data.CompressionAlgorithm, b: Foundation.Data.CompressionAlgorithm) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public func deflate() -> Foundation.Data?
  public func inflate() -> Foundation.Data?
  public func zip() -> Foundation.Data?
  public func unzip(skipCheckSumValidation: Swift.Bool = true) -> Foundation.Data?
  public func gzip() -> Foundation.Data?
  public func gunzip() -> Foundation.Data?
  public func adler32() -> DIGIPROSDK.Adler32
  public func crc32() -> DIGIPROSDK.Crc32
  public func aesEncrypt(keyData: Foundation.Data, ivData: Foundation.Data, operation: Swift.Int) -> Foundation.Data
}
public struct Crc32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  public mutating func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public struct Adler32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  public mutating func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public struct Cnstnt {
  public struct Color {
    public static let dark: UIKit.UIColor
    public static let blue: UIKit.UIColor
    public static let bluedark: UIKit.UIColor
    public static let gray: UIKit.UIColor
    public static let green: UIKit.UIColor
    public static let pushEConsubanco: UIKit.UIColor
    public static let red: UIKit.UIColor
    public static let white: UIKit.UIColor
    public static let whitelight: UIKit.UIColor
    public static let yellow: UIKit.UIColor
  }
  public struct Path {
    public static let main: Foundation.Bundle?
    public static let ui: Foundation.Bundle?
    public static let framework: Foundation.Bundle?
    public static let so: Foundation.Bundle?
    public static let ato: Foundation.Bundle?
    public static let fo: Foundation.Bundle?
    public static let vo: Foundation.Bundle?
    public static let bnl: Foundation.Bundle?
  }
  public struct Tree {
    public static let main: Swift.String
    public static let collector: Swift.String
    public static let codigos: Swift.String
    public static let usuarios: Swift.String
    public static let anexos: Swift.String
    public static let presets: Swift.String
    public static let customBorrador: Swift.String
    public static let servicios: Swift.String
    public static let plantillas: Swift.String
    public static let formatos: Swift.String
    public static let catalogos: Swift.String
    public static let componentes: Swift.String
    public static let imageProfile: Swift.String
    public static let logs: Swift.String
  }
  public struct BundlePrf {
    public static let version: Swift.String
    public static let bundle: Swift.String
    public static let data: Swift.String
    public static let delete: Swift.String
    public static let member: Swift.String
    public static let memberSwitch: Swift.String
    public static let codigo: Swift.String
    public static let usuario: Swift.String
    public static let nombre: Swift.String
    public static let paterno: Swift.String
    public static let materno: Swift.String
    public static let email: Swift.String
    public static let tel: Swift.String
    public static let estado: Swift.String
    public static let tutorial: Swift.String
    public static let touchid: Swift.String
    public static let faceid: Swift.String
    public static let calculadora: Swift.String
    public static let log: Swift.String
    public static let serial: Swift.String
    public static let tester: Swift.String
    public static let credifiel: Swift.String
    public static let ventas: Swift.String
    public static let implantacion: Swift.String
    public static let debugger: Swift.String
    public static let unittest: Swift.String
    public static let debugCode: Swift.String
    public static let debugUser: Swift.String
    public static let debugPass: Swift.String
    public static let licenceCode: Swift.String
    public static let licenceUser: Swift.String
    public static let licenceMode: Swift.String
  }
  public struct ThemeDefault {
    public static let blueHex: UIKit.UIColor?
    public static let blueRGB: UIKit.UIColor
    public static let greenHex: UIKit.UIColor?
    public static let greenRGB: UIKit.UIColor
    public static let grayHex: UIKit.UIColor?
    public static let grayRGB: UIKit.UIColor
    public static let blackHex: UIKit.UIColor?
    public static let blackRGB: UIKit.UIColor
    public static let blueDarkHex: UIKit.UIColor?
    public static let blueDarkRGB: UIKit.UIColor
    public static let redHex: UIKit.UIColor?
    public static let redRGB: UIKit.UIColor
    public static let socialBlueHex: UIKit.UIColor?
    public static let socialBlueRGB: UIKit.UIColor
    public static let socialGreenHex: UIKit.UIColor?
    public static let socialGreenRGB: UIKit.UIColor
  }
}
public struct Fnts {
  public static let generic: Swift.String
  public static let android: Swift.String
  public static let jll: Swift.String
}
public class ConfigurationManager {
  public static let shared: DIGIPROSDK.ConfigurationManager
  public var launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?
  public var isCodePresented: Swift.Bool
  public var isInitiated: Swift.Bool
  public var isShortcutItemLaunchActived: Swift.Bool
  public var hasNewFormat: Swift.Bool
  public var isConsubanco: Swift.Bool
  public var isDismissable: Swift.Bool
  public var isNotification: Swift.Bool
  public var elementosArray: Foundation.NSMutableDictionary
  public var deviceToken: Swift.String
  public var deviceTokenRemote: Swift.String
  public var veridiumLicense: Swift.Bool
  public var licenciaUIAppDelegate: DIGIPROSDK.FELicencia?
  public var codigoUIAppDelegate: DIGIPROSDK.FECodigo
  public var skinUIAppDelegate: DIGIPROSDK.FEAppSkin
  public var usuarioUIAppDelegate: DIGIPROSDK.FEUsuario
  public var plantillaUIAppDelegate: DIGIPROSDK.FEConsultaPlantilla
  public var plantillaDataUIAppDelegate: DIGIPROSDK.FEPlantillaData
  public var variablesUIAppDelegate: DIGIPROSDK.FEConsultaVariable
  public var variablesDataUIAppDelegate: DIGIPROSDK.FEVariablesData
  public var catRemotoUIAppDelegate: DIGIPROSDK.FECatRemoto
  public var openPlantilla: [DIGIPROSDK.FEOpenPlantilla]
  public var registroUIAppDelegate: DIGIPROSDK.FERegistro
  public var consultasUIAppDelegate: [DIGIPROSDK.FETipoReporte]
  public var flujosOrdered: [DIGIPROSDK.FEPlantillaMerge]
  public var procesosOrdered: [DIGIPROSDK.FEProcesos]
  public var utilities: DIGIPROSDK.Utilities
  public var jsonCalculadora: [DIGIPROSDK.FEJsonCalculadora]
  public var consultaSum: Swift.Int
  public var consultaHackPage: Swift.Int
  public var isInEditionMode: Swift.Bool
  public var isUnitTestMode: Swift.Bool
  public var fontApp: Swift.String
  public var tagElement: Swift.String
  public var extensionDoc: [DIGIPROSDK.FEDocumento]
  public var keyaes: Swift.String
  public var ivaes: Swift.String
  public var viewConsole: UIKit.UIView?
  public var textConsole: UIKit.UITextView?
  public var console: DIGIPROSDK.Console
  public var mainTab: UIKit.UITabBarController?
  public var garbageCollector: [(id: Swift.String, value: Swift.String, desc: Swift.String)]
  public var guid: Swift.String
  public var longitud: Swift.String
  public var latitud: Swift.String
  public var isLoading: Swift.Bool
  public var isContentDownloaded: Swift.Bool
  public init()
  public func configure()
  @objc deinit
}
public struct Utilities {
  public func save(info: Swift.String, path: Swift.String) -> Swift.Bool
  public func save(object: Foundation.Data, path: Swift.String) -> Swift.Bool
  public func read(asData: Swift.String) -> Foundation.Data?
  public func read(asString: Swift.String) -> Swift.String?
  public func getLL() -> (l: Swift.String, ll: Swift.String)
  public func resetAppForNewVersion()
  public func setEVReflection()
  public func detectResources()
  public func registerNotification(_ number: Swift.Int)
  public func registerShorcutItems()
  public func restartAllServices()
  public func checkPreferences()
  public func getIPAddress() -> Swift.String
  public func checkNetwork() -> Swift.Bool
  public func isConnectedToNetwork() -> DIGIPROSDK.Promise<Swift.Bool>
  public func isConnected() -> Swift.Bool
  public func refreshFolderCapacity()
  public func settingGlobalPreferencesInfo()
  public func refreshFileLogCapacity()
  public func getCodeInLibrary() -> Swift.Bool
  public func getSkinInLibrary() -> Swift.Bool
  public func getUserInLibrary() -> Swift.Bool
  public func getPlantillaInLibrary() -> Swift.Bool
  public func getVariableInLibrary() -> Swift.Bool
  public func getCatalogoInLibrary(_ catId: Swift.String) -> DIGIPROSDK.FEItemCatalogoEsquema?
  public func getXML(flujo: Swift.String, exp: Swift.String, doc: Swift.String) -> Swift.String
  public func getFormatoJson(_ formato: DIGIPROSDK.FEFormatoData) -> Swift.String?
  public func getAdditionals(_ formato: DIGIPROSDK.FEFormatoData) -> Swift.String?
  public func resetFolderTree(_ path: Swift.String)
  public func settingFolderTree()
  public func initLogFormat()
  public func globalWritterLoggerForServices(_ method: Swift.String, _ type: DIGIPROSDK.enumErrorType)
  public func writeLogger(_ string: Swift.String, _ type: DIGIPROSDK.enumErrorType)
  public func log(_ logType: DIGIPROSDK.LogType, _ message: Swift.String)
  public func writeNotifications(_ string: Swift.String)
  public func detectExtension(ext: Swift.String) -> Swift.Int
  public func readLogger(_ file: Swift.String) -> Swift.String
  public func saveImageProfile(_ image: UIKit.UIImage, _ folder: Swift.String, name: Swift.String) -> Swift.String
  public func saveWSQToFolder(_ data: Swift.String, _ name: Swift.String) -> Swift.String
  public func saveAnexoToFolder(_ data: Foundation.NSData, _ name: Swift.String) -> Swift.String
  public func saveImageToFolder(_ image: UIKit.UIImage, _ name: Swift.String) -> Swift.String
  public func removeFilesForFormat(_ formato: DIGIPROSDK.FEFormatoData)
  public func detectIfFileExistInLibrary(_ url: Swift.String) -> Swift.Bool
  public func getDataFromFile(_ url: Swift.String) -> Foundation.Data?
  public func getFormatDate() -> Swift.String
  public func getCurrentDate() -> Swift.String
  public func guid() -> Swift.String
  public func removeFromDeviceFolder(_ path: Swift.String)
  public func incrementHUD(_ hud: DIGIPROSDK.JGProgressHUD, _ view: UIKit.UIView, progress previousProgress: Swift.Int, _ label: Swift.String)
  public func setNotificationBanner(_ title: Swift.String, _ subtitle: Swift.String, _ style: DIGIPROSDK.BannerStyle, _ direction: DIGIPROSDK.BannerPosition) -> DIGIPROSDK.NotificationBanner
  public func setStatusBarNotificationBanner(_ title: Swift.String, _ style: DIGIPROSDK.BannerStyle, _ direction: DIGIPROSDK.BannerPosition) -> DIGIPROSDK.StatusBarNotificationBanner
  public func authenticationWithTouchID() -> DIGIPROSDK.Promise<Swift.Bool>
  public func configureDirectAccess() -> DIGIPROSDK.Promise<Swift.Bool>
  public func evaluatePolicyFailErrorMessageForLA(errorCode: Swift.Int) -> Swift.String
  public func evaluateAuthenticationPolicyMessageForLA(errorCode: Swift.Int) -> Swift.String
  public func errorGen(_ domain: DIGIPROSDK.Domain, _ code: DIGIPROSDK.ApiErrors, _ success: Swift.Bool, _ message: Swift.String?, _ localized: Swift.String?) -> Foundation.NSError
}
public struct Console {
  public func initConsole(_ ex: CoreGraphics.CGFloat, _ ye: CoreGraphics.CGFloat, _ w: CoreGraphics.CGFloat, _ h: CoreGraphics.CGFloat, _ guide: UIKit.UILayoutGuide? = nil)
  public func addTextConsole(_ string: Swift.String, _ typeConsole: Swift.String)
}
public enum ReturnFormulaType {
  case typeString(Swift.String)
  case typeInt(Swift.Int)
  case typeArray(Foundation.NSArray)
  case typeDictionary(Foundation.NSDictionary)
  case typeNil(Swift.String?)
}
public enum ReturnOperacionType {
  case typeString(Swift.String)
  case typeInt(Swift.Int)
  case typeBoolean(Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class OcrCfeObject : DIGIPROSDK.EVObject {
  @objc public var anchornombre: Swift.String
  @objc public var motor: Swift.String
  @objc public var detecteddomicilio: Swift.Bool
  @objc public var detectednombre: Swift.Bool
  @objc public var nombre: Swift.String
  @objc public var calle: Swift.String
  @objc public var colonia: Swift.String
  @objc public var delegacion: Swift.String
  @objc public var ciudad: Swift.String
  @objc public var cP: Swift.String
  @objc public var rmu: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_firma_hash : DIGIPROSDK.EVObject {
  @objc public var tiempo: Swift.String
  @objc public var imagebase64: Swift.String
  @objc public var videobase64: Swift.String
  @objc public var imagevideobase64: Swift.String
  @objc public var gps: Swift.String
  @objc public var personafirma: Swift.String
  @objc public var acuerdofirma: Swift.String
  @objc public var deviceDesc: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_firma_Anexo : DIGIPROSDK.EVObject {
  @objc public var localizacion: Swift.String
  @objc public var tiempo: Swift.String
  @objc public var personafirma: Swift.String
  @objc public var acuerdofirma: Swift.String
  @objc public var hashCrypt: Swift.String
  @objc public var timestamp: Swift.String
  @objc public var dispositivo: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_firma : DIGIPROSDK.Atributos_Generales {
  @objc public var acuerdofirma: Swift.String
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampoanexo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var personafirma: Swift.String
  @objc public var hashCrypt: Swift.String
  @objc public var colorfirma: Swift.String
  @objc public var colorborrar: Swift.String
  @objc public var colorreemplazar: Swift.String
  @objc public var permisotipificar: Swift.Bool
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEConsultaLogalty : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var Password: Swift.String
  @objc public var IP: Swift.String
  @objc public var Saml: DIGIPROSDK.FELogaltySaml
  @objc public var Formato: DIGIPROSDK.FEFormatoData
  @objc public var FechaSincronizacionIncidencia: Swift.Int
  @objc public var FechaSincronizacionReserva: Swift.Int
  @objc public var FechaSincronizacionBorradores: Swift.Int
  @objc public var CheckSync: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
extension LayoutConstraint {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public protocol ConstraintOffsetTarget : DIGIPROSDK.ConstraintConstantTarget {
}
extension Int : DIGIPROSDK.ConstraintOffsetTarget {
}
extension UInt : DIGIPROSDK.ConstraintOffsetTarget {
}
extension Float : DIGIPROSDK.ConstraintOffsetTarget {
}
extension Double : DIGIPROSDK.ConstraintOffsetTarget {
}
extension CGFloat : DIGIPROSDK.ConstraintOffsetTarget {
}
extension Promise {
  public typealias Resolver = (promise: DIGIPROSDK.Promise<Result>, resolve: (Result) -> Swift.Void, reject: (Swift.Error) -> Swift.Void)
  public static func `defer`() -> DIGIPROSDK.Promise<Result>.Resolver
}
extension UIColor {
  convenience public init(hexFromString: Swift.String, alpha: CoreGraphics.CGFloat = 1.0)
  convenience public init?(hexString: Swift.String)
  public func setStateMessage(_ state: Swift.String) -> UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers open class JMMaskTextField : UIKit.UITextField {
  public var stringMask: DIGIPROSDK.JMStringMask? {
    get
  }
  @objc override weak dynamic open var delegate: UIKit.UITextFieldDelegate? {
    @objc get
    @objc set(newValue)
  }
  public var unmaskedText: Swift.String? {
    get
  }
  @objc @IBInspectable open var maskString: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
}
extension JMMaskTextField : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc dynamic public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public struct CTR {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: DIGIPROSDK.CTR.Error, b: DIGIPROSDK.CTR.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let options: DIGIPROSDK.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>, counter: Swift.Int = 0)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
extension Array where Element : DIGIPROSDK.EVManagedObject {
  public init(context: CoreData.NSManagedObjectContext, json: Swift.String?, conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultDeserialize)
  public func getArrayTypeInstance<T>(_ arr: Swift.Array<T>, context: CoreData.NSManagedObjectContext) -> T where T : DIGIPROSDK.EVManagedObject
  public func getTypeInstance<T>(context: CoreData.NSManagedObjectContext) -> T where T : DIGIPROSDK.EVManagedObject
  public func getTypeAsString() -> Swift.String
}
extension Data {
  public func checksum() -> Swift.UInt16
  public func md5() -> Foundation.Data
  public func sha1() -> Foundation.Data
  public func sha224() -> Foundation.Data
  public func sha256() -> Foundation.Data
  public func sha384() -> Foundation.Data
  public func sha512() -> Foundation.Data
  public func sha3(_ variant: DIGIPROSDK.SHA3.Variant) -> Foundation.Data
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc16(seed: Swift.UInt16? = nil) -> Foundation.Data
  public func encrypt(cipher: DIGIPROSDK.Cipher) throws -> Foundation.Data
  public func decrypt(cipher: DIGIPROSDK.Cipher) throws -> Foundation.Data
  public func authenticate(with authenticator: DIGIPROSDK.Authenticator) throws -> Foundation.Data
}
extension Data {
  public init(hex: Swift.String)
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func toHexString() -> Swift.String
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerEditable : DIGIPROSDK.ConstraintMakerPriortizable {
  @discardableResult
  public func multipliedBy(_ amount: DIGIPROSDK.ConstraintMultiplierTarget) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func dividedBy(_ amount: DIGIPROSDK.ConstraintMultiplierTarget) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func offset(_ amount: DIGIPROSDK.ConstraintOffsetTarget) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func inset(_ amount: DIGIPROSDK.ConstraintInsetTarget) -> DIGIPROSDK.ConstraintMakerEditable
  @objc deinit
}
public protocol HeroCompatible {
  associatedtype CompatibleType
  var hero: DIGIPROSDK.HeroExtension<Self.CompatibleType> { get set }
}
extension HeroCompatible {
  public var hero: DIGIPROSDK.HeroExtension<Self> {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class HeroExtension<Base> {
  final public let base: Base
  @objc deinit
}
public enum enum_servicio {
  case undefined
  case sepomex
  case enrollfinger
  case verifyfinger
  case identifyfinger
  case enrollface
  case verifyface
  case identifyface
  case comparefaces
  case ocrine
  case ocrcfe
  case ocrtelmex
  case ocrcea
  case ocratt
  case inebydata
  case inebyfinger
  case sendsms
  case validatesmscode
  case obtenercurp
  case validarcurp
  case confirmmail
  case callvideochat
  case saassirh
  case folioautomatico
  public static func == (a: DIGIPROSDK.enum_servicio, b: DIGIPROSDK.enum_servicio) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class Atributos_servicio : DIGIPROSDK.Atributos_Generales {
  @objc public var elementopadre: Swift.String
  @objc public var mensajeservicio: Swift.String
  @objc public var parametrosentrada: Swift.String
  @objc public var parametrossalida: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var respuestacorrecta: Swift.Bool
  @objc public var tiposervicio: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var Item1: Swift.String
  @objc public var mensajeerrorservicio: Swift.String
  @objc public var mensajeexitoservicio: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CoverVerticalFromTopAnimation : DIGIPROSDK.PresentrAnimation {
  override public func transform(containerFrame: CoreGraphics.CGRect, finalFrame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc deinit
  override public init(options: DIGIPROSDK.AnimationOptions = super)
}
@objc @_inheritsConvenienceInitializers open class HeroPlugin : ObjectiveC.NSObject, DIGIPROSDK.HeroPreprocessor, DIGIPROSDK.HeroAnimator {
  weak public var hero: DIGIPROSDK.HeroTransition!
  public var context: DIGIPROSDK.HeroContext! {
    get
  }
  open var requirePerFrameCallback: Swift.Bool
  @objc override required dynamic public init()
  open func process(fromViews: [UIKit.UIView], toViews: [UIKit.UIView])
  open func canAnimate(view: UIKit.UIView, appearing: Swift.Bool) -> Swift.Bool
  open func animate(fromViews: [UIKit.UIView], toViews: [UIKit.UIView]) -> Foundation.TimeInterval
  open func clean()
  open func seekTo(timePassed: Foundation.TimeInterval)
  open func resume(timePassed: Foundation.TimeInterval, reverse: Swift.Bool) -> Foundation.TimeInterval
  open func apply(state: DIGIPROSDK.HeroTargetState, to view: UIKit.UIView)
  open func changeTarget(state: DIGIPROSDK.HeroTargetState, isDestination: Swift.Bool, to view: UIKit.UIView)
  @objc deinit
}
extension HeroPlugin {
  public static var isEnabled: Swift.Bool {
    get
    set
  }
  public static func enable()
  public static func disable()
}
@objc @_inheritsConvenienceInitializers public class Atributos_leyenda : DIGIPROSDK.Atributos_Generales {
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var isencoded: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var valor: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class MarqueeLabel : UIKit.UILabel, QuartzCore.CAAnimationDelegate {
  public enum MarqueeType {
    case left
    case leftRight
    case right
    case rightLeft
    case continuous
    case continuousReverse
    public static func == (a: DIGIPROSDK.MarqueeLabel.MarqueeType, b: DIGIPROSDK.MarqueeLabel.MarqueeType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  open var type: DIGIPROSDK.MarqueeLabel.MarqueeType {
    get
    set
  }
  open var scrollSequence: Swift.Array<DIGIPROSDK.MarqueeStep>?
  open var animationCurve: UIKit.UIView.AnimationCurve
  @objc @IBInspectable open var labelize: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var holdScrolling: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var tapToScroll: Swift.Bool {
    @objc get
    @objc set
  }
  open var isPaused: Swift.Bool {
    get
  }
  open var awayFromHome: Swift.Bool {
    get
  }
  public enum SpeedLimit {
    case rate(CoreGraphics.CGFloat)
    case duration(CoreGraphics.CGFloat)
  }
  open var speed: DIGIPROSDK.MarqueeLabel.SpeedLimit {
    get
    set
  }
  @objc @IBInspectable open var scrollDuration: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var scrollRate: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var leadingBuffer: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var trailingBuffer: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var fadeLength: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var animationDelay: CoreGraphics.CGFloat
  public var animationDuration: CoreGraphics.CGFloat {
    get
  }
  open class func restartLabelsOfController(_ controller: UIKit.UIViewController)
  open class func controllerViewWillAppear(_ controller: UIKit.UIViewController)
  open class func controllerViewDidAppear(_ controller: UIKit.UIViewController)
  open class func controllerLabelsLabelize(_ controller: UIKit.UIViewController)
  open class func controllerLabelsAnimate(_ controller: UIKit.UIViewController)
  public init(frame: CoreGraphics.CGRect, rate: CoreGraphics.CGFloat, fadeLength fade: CoreGraphics.CGFloat)
  public init(frame: CoreGraphics.CGRect, duration: CoreGraphics.CGFloat, fadeLength fade: CoreGraphics.CGFloat)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc convenience override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open func awakeFromNib()
  @available(iOS 8.0, *)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  open func labelShouldScroll() -> Swift.Bool
  @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic open func draw(_ layer: QuartzCore.CALayer, in ctx: CoreGraphics.CGContext)
  @objc public func restartForViewController(_ notification: Foundation.Notification)
  @objc public func labelizeForController(_ notification: Foundation.Notification)
  @objc public func animateForController(_ notification: Foundation.Notification)
  public func triggerScrollStart()
  @objc public func restartLabel()
  public func resetLabel()
  @objc public func shutdownLabel()
  public func pauseLabel()
  public func unpauseLabel()
  @objc public func labelWasTapped(_ recognizer: UIKit.UIGestureRecognizer)
  open func labelWillBeginScroll()
  open func labelReturnedToHome(_ finished: Swift.Bool)
  @objc override dynamic open func forBaselineLayout() -> UIKit.UIView
  @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc override dynamic open var font: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open var shadowOffset: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc override dynamic open var highlightedTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic open var adjustsFontSizeToFitWidth: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var minimumScaleFactor: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override dynamic open var baselineAdjustment: UIKit.UIBaselineAdjustment {
    @objc get
    @objc set
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
public protocol MarqueeStep {
  var timeStep: CoreGraphics.CGFloat { get }
  var timingFunction: UIKit.UIView.AnimationCurve { get }
  var edgeFades: DIGIPROSDK.EdgeFade { get }
}
public struct ScrollStep : DIGIPROSDK.MarqueeStep {
  public enum Position {
    case home
    case away
    case partial(CoreGraphics.CGFloat)
  }
  public let timeStep: CoreGraphics.CGFloat
  public let timingFunction: UIKit.UIView.AnimationCurve
  public let position: DIGIPROSDK.ScrollStep.Position
  public let edgeFades: DIGIPROSDK.EdgeFade
  public init(timeStep: CoreGraphics.CGFloat, timingFunction: UIKit.UIView.AnimationCurve = .linear, position: DIGIPROSDK.ScrollStep.Position, edgeFades: DIGIPROSDK.EdgeFade)
}
public struct FadeStep : DIGIPROSDK.MarqueeStep {
  public let timeStep: CoreGraphics.CGFloat
  public let timingFunction: UIKit.UIView.AnimationCurve
  public let edgeFades: DIGIPROSDK.EdgeFade
  public init(timeStep: CoreGraphics.CGFloat, timingFunction: UIKit.UIView.AnimationCurve = .linear, edgeFades: DIGIPROSDK.EdgeFade)
}
public struct EdgeFade : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let leading: DIGIPROSDK.EdgeFade
  public static let trailing: DIGIPROSDK.EdgeFade
  public init(rawValue: Swift.Int)
  public typealias Element = DIGIPROSDK.EdgeFade
  public typealias ArrayLiteralElement = DIGIPROSDK.EdgeFade
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers public class Atributos_tabber : DIGIPROSDK.Atributos_Generales {
  @objc public var campo: Swift.String
  @objc public var colorborde: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var grosorborde: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var ayuda: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tabids: [Swift.Int]
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension HeroTransition {
  open func complete(finished: Swift.Bool)
}
public typealias ConstraintView = UIKit.UIView
final public class GCM : DIGIPROSDK.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: DIGIPROSDK.GCM.Mode, b: DIGIPROSDK.GCM.Mode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public let options: DIGIPROSDK.BlockModeOption
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case fail
    public static func == (a: DIGIPROSDK.GCM.Error, b: DIGIPROSDK.GCM.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: DIGIPROSDK.GCM.Mode = .detached)
  convenience public init(iv: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: DIGIPROSDK.GCM.Mode = .detached)
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_calculadora : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var campo: Swift.String
  @objc public var decimalesresultado: Swift.Int
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var formulaimportecuota: Swift.String
  @objc public var formulaplazocuota: Swift.String
  @objc public var formulaplazoimporte: Swift.String
  @objc public var formulatea: Swift.String
  @objc public var formulatem: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var idcuota: Swift.String
  @objc public var idimporte: Swift.String
  @objc public var idplazo: Swift.String
  @objc public var intervaloimporte: Swift.Int
  @objc public var intervalomeses: Swift.Int
  @objc public var maximporte: Swift.Int
  @objc public var maxmes: Swift.Int
  @objc public var minimporte: Swift.Int
  @objc public var minmes: Swift.Int
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var opcionmostrar: Swift.String
  @objc public var resultadocalculoactual: Swift.Int
  @objc public var subtitulo: Swift.String
  @objc public var tasaefectivaanual: Swift.Double
  @objc public var tasaefectivamensual: Swift.Double
  @objc public var tasanominalanual: Swift.Double
  @objc public var valorcuota: Swift.Int
  @objc public var valorimporte: Swift.Int
  @objc public var valorplazo: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var colorborde: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var grosorborde: Swift.Int
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var colorcalculadora: Swift.String
  @objc public var colortextoencabezadocalculadora: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var interes: Swift.Int
  @objc public var prestamo: Swift.Int
  @objc public var prestamototal: Swift.Int
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension NSMutableDictionary {
  convenience public init(json: Swift.String)
  convenience public init(data: Foundation.Data)
}
extension NSDictionary {
  public func toJsonString(prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(prettyPrinted: Swift.Bool = false) -> Foundation.Data
}
extension NSMutableDictionary {
  public func unionInPlace(dictionary: Foundation.NSDictionary)
  public func unionInPlace<S>(sequence: S) where S : Swift.Sequence, S.Element == (Foundation.NSMutableDictionary.Key, Foundation.NSMutableDictionary.Value)
}
@objc @_inheritsConvenienceInitializers public class FEFieldCalculadora : DIGIPROSDK.EVObject {
  @objc public var fieldId: Swift.String
  @objc public var fieldName: Swift.String
  @objc public var fieldTechnicalName: Swift.String
  @objc public var mandatory: Swift.String
  @objc public var isVirtual: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
extension Dictionary {
  public func nullKeyRemoval() -> Swift.Dictionary<Key, Value>
}
public enum PresentationType {
  case alert
  case popup
  case topHalf
  case bottomHalf
  case fullScreen
  case dynamic(center: DIGIPROSDK.ModalCenterPosition)
  case custom(width: DIGIPROSDK.ModalSize, height: DIGIPROSDK.ModalSize, center: DIGIPROSDK.ModalCenterPosition)
}
@_hasMissingDesignatedInitializers public class ConstraintMakerRelatable {
  @discardableResult
  public func equalTo(_ other: DIGIPROSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func equalToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualTo(_ other: DIGIPROSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualTo(_ other: DIGIPROSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, line: Swift.UInt = #line) -> DIGIPROSDK.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualToSuperview(_ file: Swift.String = #file, line: Swift.UInt = #line) -> DIGIPROSDK.ConstraintMakerEditable
  @objc deinit
}
public class Lock {
  public init()
  public func sync<T>(execute block: () throws -> T) rethrows -> T
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CorreoServicio : DIGIPROSDK.EVObject {
  @objc public var CorreoEnviado: Swift.Bool
  @objc public var Destinatarios: [Swift.String]
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_numero : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var contenidoestatico: Swift.Bool
  @objc public var decimales: Swift.Int
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var mascara: Swift.String
  @objc public var metadato: Swift.String
  @objc public var numeromaximo: Swift.Int
  @objc public var numerominimo: Swift.Int
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var separadormiles: Swift.String
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var expresionregular: Swift.String
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var ordenenresumen: Swift.Int
  @objc public var regexrerrormsg: Swift.String
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEGeolocation : DIGIPROSDK.EVObject {
  @objc public var Referencias: [DIGIPROSDK.FEGeolocationData]
  @objc public var UsrID: Swift.String
  @objc public var DeviceID: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEGeolocationData : DIGIPROSDK.EVObject {
  @objc public var FechaHoraIni: Swift.String
  @objc public var FechaHoraFin: Swift.String
  @objc public var Ubicacion: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public struct CFB : DIGIPROSDK.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: DIGIPROSDK.CFB.Error, b: DIGIPROSDK.CFB.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let options: DIGIPROSDK.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
@objc @_inheritsConvenienceInitializers public class FEExpDoc : DIGIPROSDK.EVObject {
  @objc public var expediente: Swift.String
  @objc public var documento: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEDocumentCalculadora : DIGIPROSDK.EVObject {
  @objc public var documentId: Swift.String
  @objc public var documentName: Swift.String
  @objc public var documentTechnicalName: Swift.String
  @objc public var classification: Swift.String
  @objc public var mandatory: Swift.String
  @objc public var visualization: Swift.String
  @objc public var field: [DIGIPROSDK.FEFieldCalculadora]
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEDiscount : DIGIPROSDK.EVObject {
  @objc public var Descuento: Swift.Double
  @objc public var Tasa: Swift.Double
  @objc public var MontoTotal: Swift.Double
  @objc required dynamic public init()
  @objc deinit
}
@available(swift, deprecated: 0.6.0, renamed: "Digest")
public typealias Hash = DIGIPROSDK.Digest
public struct Digest {
  public static func md5(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha1(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha224(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha256(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha384(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha512(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha2(_ bytes: Swift.Array<Swift.UInt8>, variant: DIGIPROSDK.SHA2.Variant) -> Swift.Array<Swift.UInt8>
  public static func sha3(_ bytes: Swift.Array<Swift.UInt8>, variant: DIGIPROSDK.SHA3.Variant) -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class FEListaComponentes : DIGIPROSDK.EVObject {
  @objc public var Activo: Swift.Bool
  @objc public var TipoCatalogoID: Swift.Int
  @objc public var CVECatalogoPID: Swift.String
  @objc public var Descripcion: Swift.String
  @objc public var CVECatalogo: Swift.String
  @objc public var CatalogoId: Swift.Int
  @objc public var Json: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
extension HeroTransition : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc dynamic public func interactionControllerForPresentation(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
extension HeroTransition : UIKit.UIViewControllerAnimatedTransitioning {
  @objc dynamic public func animateTransition(using context: UIKit.UIViewControllerContextTransitioning)
  @objc dynamic public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc dynamic public func animationEnded(_ transitionCompleted: Swift.Bool)
}
extension HeroTransition : UIKit.UIViewControllerInteractiveTransitioning {
  @objc dynamic public var wantsInteractiveStart: Swift.Bool {
    @objc get
  }
  @objc dynamic public func startInteractiveTransition(_ transitionContext: UIKit.UIViewControllerContextTransitioning)
}
public enum HeroDefaultAnimationType {
  public enum Direction : DIGIPROSDK.HeroStringConvertible {
    case left, right, up, down
    public static func from(node: DIGIPROSDK.ExprNode) -> DIGIPROSDK.HeroDefaultAnimationType.Direction?
    public static func == (a: DIGIPROSDK.HeroDefaultAnimationType.Direction, b: DIGIPROSDK.HeroDefaultAnimationType.Direction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  case auto
  case push(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case pull(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case cover(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case uncover(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case slide(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case zoomSlide(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case pageIn(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case pageOut(direction: DIGIPROSDK.HeroDefaultAnimationType.Direction)
  case fade
  case zoom
  case zoomOut
  indirect case selectBy(presenting: DIGIPROSDK.HeroDefaultAnimationType, dismissing: DIGIPROSDK.HeroDefaultAnimationType)
  public static func autoReverse(presenting: DIGIPROSDK.HeroDefaultAnimationType) -> DIGIPROSDK.HeroDefaultAnimationType
  case none
  public var label: Swift.String? {
    get
  }
}
extension HeroDefaultAnimationType : DIGIPROSDK.HeroStringConvertible {
  public static func from(node: DIGIPROSDK.ExprNode) -> DIGIPROSDK.HeroDefaultAnimationType?
}
public struct ECB : DIGIPROSDK.BlockMode {
  public let options: DIGIPROSDK.BlockModeOption
  public init()
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
@objc @_inheritsConvenienceInitializers public class Atributos_plantilla : DIGIPROSDK.Atributos_Generales {
  @objc public var anchocapturador: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var bordeelementos: Swift.Bool
  @objc public var colorbordeplantilla: Swift.String
  @objc public var colorcancelarplantilla: Swift.String
  @objc public var colorcancelartextoplantilla: Swift.String
  @objc public var colorguardarplantilla: Swift.String
  @objc public var colorguardartextoplantilla: Swift.String
  @objc public var colortabactivo: Swift.String
  @objc public var colortabinhabilitado: Swift.String
  @objc public var colortabnormal: Swift.String
  @objc public var colortabtextoactivo: Swift.String
  @objc public var colortabtextoinhabilitado: Swift.String
  @objc public var colortabtextonormal: Swift.String
  @objc public var coordenadasplantilla: Swift.String
  @objc public var colorfondoalertaadvertencia: Swift.String
  @objc public var colorfondoalertaerror: Swift.String
  @objc public var colorfondoalertaexito: Swift.String
  @objc public var colorfondoalertainfo: Swift.String
  @objc public var colorfondoerrorelemento: Swift.String
  @objc public var colortextoalertaadvertencia: Swift.String
  @objc public var colortextoalertaerror: Swift.String
  @objc public var colortextoalertaexito: Swift.String
  @objc public var colortextoalertainfo: Swift.String
  @objc public var colortextoerrorelemento: Swift.String
  @objc public var colortextosubtitulo: Swift.String
  @objc public var colortextotitulo: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var executeonce: Swift.Bool
  @objc public var fondoplantilla: Swift.String
  @objc public var grosorbordeplantilla: Swift.String
  @objc public var haserror: Swift.Bool
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfanterior: Swift.String
  @objc public var pdfnombre: Swift.String
  @objc public var pdfplantilla: Swift.String
  @objc public var pedircoordenadasalcargar: Swift.Bool
  @objc public var prevalidateall: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tamanofuente: Swift.String
  @objc public var textocancelarplantilla: Swift.String
  @objc public var textoguardarplantilla: Swift.String
  @objc public var textosalirmensaje: Swift.String
  @objc public var textosalirtitulo: Swift.String
  @objc public var tiempoautoguardado: Swift.Int
  @objc public var tipo: Swift.String
  @objc public var tipofuente: Swift.String
  @objc public var usarcoordenadas: Swift.String
  @objc public var validaralcargar: Swift.Bool
  @objc public var verguardar: Swift.Bool
  @objc public var versalir: Swift.Bool
  @objc public var autoredirectalguardar: Swift.Bool
  @objc public var ayuda: Swift.String
  @objc public var modoguardado: Swift.Bool
  @objc public var mostrartipodoc: Swift.Bool
  @objc public var mostrartipoexp: Swift.Bool
  @objc public var plantillamapearprellenado: Swift.String
  @objc public var tablahijo: Swift.Bool
  @objc public var components: [Swift.String : Any]
  @objc public var elementopadre: Swift.String
  @objc public var operacionesmatematicas: Foundation.NSArray
  @objc public var pagids: [Swift.String]
  @objc public var prefilleddata: Foundation.NSArray
  @objc public var reglas: [Swift.String : Any]
  @objc public var resumen: Swift.String
  @objc public var servicios: [Swift.String : Any]
  @objc public var validationerror: Swift.String
  @objc public var vertabspaginas: Swift.Bool
  @objc public var verpieplantilla: Swift.Bool
  @objc public var verexpres: Swift.Bool
  @objc public var vertipodocres: Swift.Bool
  @objc public var colorfondoplantilla: Swift.String
  @objc public var mapeopdfligar: Swift.String
  @objc public var lastupdate: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_textarea : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var alturacampo: Swift.Int
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var contenidoestatico: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var expresionregular: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var mascara: Swift.String
  @objc public var mayusculasminusculas: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var regexconfigmsg: Swift.String
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var mostrarmensajelonmax: Swift.Bool
  @objc public var mostrarmensajelonmin: Swift.Bool
  @objc public var mostrarmensajeexpreg: Swift.Bool
  @objc public var mensajelonmax: Swift.String
  @objc public var mensajelonmin: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_textarea_unit : DIGIPROSDK.EVObject {
  @objc public var nombre: Swift.String
  @objc public var icono: Swift.String
  @objc public var iscontainer: Swift.Bool
  @objc public var mensajerespuestaservicio: Swift.String
  @objc public var mensajerespuestaserviciotipo: Swift.String
  @objc public var ocultartitulo: Swift.Bool
  @objc public var ordencampo: Swift.Int
  @objc public var titulo: Swift.String
  @objc public var alineadotexto: Swift.String
  @objc public var alturacampo: Swift.Int
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var contenidoestatico: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var expresionregular: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var longitudmaxima: Swift.Int
  @objc public var longitudminima: Swift.Int
  @objc public var mascara: Swift.String
  @objc public var mayusculasminusculas: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var regexconfigmsg: Swift.String
  @objc public var regexrerror: Swift.Bool
  @objc public var regexrerrormsg: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var elementoprellenadoexterno: [Swift.String]
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var mostrarmensajelonmax: Swift.Bool
  @objc public var mostrarmensajelonmin: Swift.Bool
  @objc public var mostrarmensajeexpreg: Swift.Bool
  @objc public var mensajelonmax: Swift.String
  @objc public var mensajelonmin: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_boton : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ancho: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var colorfondo: Swift.String
  @objc public var colortexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var tamanio: Swift.String
  @objc public var urllink: Swift.String
  @objc public var valor: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var vercomoregistro: Swift.Bool
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var isclick: Swift.Bool
  @objc public var tamaniocss: Swift.String
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var cantidadmaximaclic: Swift.Int
  @objc public var urlnuevapagina: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public class Obfuscator {
  public init()
  public init(with salt: Swift.String)
  public func bytesByObfuscatingString(string: Swift.String) -> [Swift.UInt8]
  public func reveal(key: [Swift.UInt8]) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_comboDinamico : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var campobusqueda: Swift.String
  @objc public var camposfiltros: [Foundation.NSMutableDictionary]
  @objc public var catalogodestino: [Any]
  @objc public var catalogofuente: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var grosortexto: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var metadato: Swift.String
  @objc public var modocolumnas: Swift.Bool
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var ordenitems: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var textoconid: Swift.String
  @objc public var tipoasociacion: Swift.String
  @objc public var tipolista: Swift.String
  @objc public var valor: Swift.String
  @objc public var valordescripcion: Swift.String
  @objc public var valorid: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var configjson: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var margenderecho: Swift.String
  @objc public var margenizquierdo: Swift.String
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension SpreadsheetView {
  public var contentOffset: CoreGraphics.CGPoint {
    get
    set
  }
  public var scrollIndicatorInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  public var contentSize: CoreGraphics.CGSize {
    get
  }
  public var contentInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @available(iOS 11.0, *)
  public var adjustedContentInset: UIKit.UIEdgeInsets {
    get
  }
  public func flashScrollIndicators()
  public func setContentOffset(_ contentOffset: CoreGraphics.CGPoint, animated: Swift.Bool)
  public func scrollRectToVisible(_ rect: CoreGraphics.CGRect, animated: Swift.Bool)
  @objc override dynamic public func isKind(of aClass: Swift.AnyClass) -> Swift.Bool
  @objc override dynamic public func forwardingTarget(for aSelector: ObjectiveC.Selector!) -> Any?
}
final public class Blowfish {
  public enum Error : Swift.Error {
    case dataPaddingRequired
    case invalidKeyOrInitializationVector
    case invalidInitializationVector
    case invalidBlockMode
    public static func == (a: DIGIPROSDK.Blowfish.Error, b: DIGIPROSDK.Blowfish.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, blockMode: DIGIPROSDK.BlockMode = CBC(iv: Array<UInt8>(repeating: 0, count: Blowfish.blockSize)), padding: DIGIPROSDK.Padding) throws
  @objc deinit
}
extension Blowfish : DIGIPROSDK.Cipher {
  final public func encrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
  final public func decrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
}
public struct JMStringMask : Swift.Equatable {
  public init(mask: Swift.String)
  public static func == (lhs: DIGIPROSDK.JMStringMask, rhs: DIGIPROSDK.JMStringMask) -> Swift.Bool
  public func mask(string: Swift.String?) -> Swift.String?
  public func unmask(string: Swift.String?) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers public class LayoutConstraint : UIKit.NSLayoutConstraint {
  public var label: Swift.String? {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Promise {
  @discardableResult
  final public func finally(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping () throws -> Swift.Void) -> DIGIPROSDK.Promise<Result>
}
@objc @_inheritsConvenienceInitializers public class FEProductCalculadora : DIGIPROSDK.EVObject {
  @objc public var productId: Swift.String
  @objc public var productName: Swift.String
  @objc public var productShortname: Swift.String
  @objc public var productCategory: Swift.String
  @objc public var productBRMSCode: Swift.String
  @objc public var plazoMinimo: Swift.String
  @objc public var plazoMaximo: Swift.String
  @objc public var montoMinimo: Swift.String
  @objc public var montoMaximo: Swift.String
  @objc public var openingCommissionAmount: Swift.String
  @objc public var openingCommissionPercentage: Swift.Double
  @objc public var productFrequency: Swift.String
  @objc public var productFrequencyCode: Swift.String
  @objc public var order: Swift.Int
  @objc public var flagCot: Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FELicencia : DIGIPROSDK.EVObject {
  @objc public var NombreProyecto: Swift.String
  @objc public var BundleId: Swift.String
  @objc public var Fecha_Creacion: Foundation.Date?
  @objc public var Activo: Swift.Bool
  @objc public var JsonLicencia: Foundation.NSMutableDictionary?
  override public func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public protocol LayoutConstraintItem : AnyObject {
}
@available(iOS 9.0, OSX 10.11, *)
extension UILayoutGuide : DIGIPROSDK.LayoutConstraintItem {
}
extension UIView : DIGIPROSDK.LayoutConstraintItem {
}
@objc @_inheritsConvenienceInitializers public class CrossDissolveAnimation : DIGIPROSDK.PresentrAnimation {
  override public func beforeAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  override public func performAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  override public func afterAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  @objc deinit
  override public init(options: DIGIPROSDK.AnimationOptions = super)
}
@objc @_inheritsConvenienceInitializers public class Atributos_formula : DIGIPROSDK.EVObject {
  @objc public var value: Swift.String
  @objc public var type: Swift.String
  @objc public var id: Swift.String
  @objc public var tipo: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public enum Typeformula : Swift.String {
  case elementovariable
  case point
  case propiedadvariable
  case equal
  case character
  public var label: Swift.String? {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol PaddingProtocol {
  func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
}
public enum Padding : DIGIPROSDK.PaddingProtocol {
  case noPadding, zeroPadding, pkcs7, pkcs5
  public func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  public func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
  public static func == (a: DIGIPROSDK.Padding, b: DIGIPROSDK.Padding) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class FEEstadistica : DIGIPROSDK.EVObject {
  @objc public var Campo: Swift.String
  @objc public var FechaEntrada: Swift.String
  @objc public var FechaSalida: Swift.String
  @objc public var Resultado: Swift.String
  @objc public var Latitud: Swift.String
  @objc public var Usuario: Swift.String
  @objc public var KeyStroke: Swift.Int
  @objc public var Longitud: Swift.String
  @objc public var Dispositivo: Swift.String
  @objc public var TipoDispositivo: Swift.Int
  @objc public var NombrePlantilla: Swift.String
  @objc public var NombrePagina: Swift.String
  @objc public var NombreSeccion: Swift.String
  @objc public var CapturaOk: Swift.Bool
  @objc public var CapturaError: Swift.Bool
  @objc public var CapturaAyuda: Swift.Bool
  @objc public var OrdenCampo: Swift.Int
  @objc public var Sesion: Swift.String
  @objc public var PlantillaID: Swift.Int
  @objc public var PaginaID: Swift.Int
  @objc public var SeccionID: Swift.Int
  @objc public var CampoID: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
public enum Device {
  case iPodTouch5
  case iPodTouch6
  case iPodTouch7
  case iPhone4
  case iPhone4s
  case iPhone5
  case iPhone5c
  case iPhone5s
  case iPhone6
  case iPhone6Plus
  case iPhone6s
  case iPhone6sPlus
  case iPhone7
  case iPhone7Plus
  case iPhoneSE
  case iPhone8
  case iPhone8Plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSMax
  case iPhoneXR
  case iPhone11
  case iPhone11Pro
  case iPhone11ProMax
  case iPad2
  case iPad3
  case iPad4
  case iPadAir
  case iPadAir2
  case iPad5
  case iPad6
  case iPadAir3
  case iPad7
  case iPadMini
  case iPadMini2
  case iPadMini3
  case iPadMini4
  case iPadMini5
  case iPadPro9Inch
  case iPadPro12Inch
  case iPadPro12Inch2
  case iPadPro10Inch
  case iPadPro11Inch
  case iPadPro12Inch3
  case homePod
  indirect case simulator(DIGIPROSDK.Device)
  case unknown(Swift.String)
  public static var current: DIGIPROSDK.Device {
    get
  }
  public static var identifier: Swift.String
  public init()
  public static func mapToDevice(identifier: Swift.String) -> DIGIPROSDK.Device
  public static func realDevice(from device: DIGIPROSDK.Device) -> DIGIPROSDK.Device
  public var diagonal: Swift.Double {
    get
  }
  public var screenRatio: (width: Swift.Double, height: Swift.Double) {
    get
  }
  public static var allPods: [DIGIPROSDK.Device] {
    get
  }
  public static var allPhones: [DIGIPROSDK.Device] {
    get
  }
  public static var allPads: [DIGIPROSDK.Device] {
    get
  }
  public static var allXSeriesDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allPlusSizedDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allProDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allMiniDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorPods: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorPhones: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorPads: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorMiniDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorXSeriesDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorPlusSizedDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulatorProDevices: [DIGIPROSDK.Device] {
    get
  }
  public var isPod: Swift.Bool {
    get
  }
  public var isPhone: Swift.Bool {
    get
  }
  public var isPad: Swift.Bool {
    get
  }
  public var isSimulator: Swift.Bool {
    get
  }
  public var realDevice: DIGIPROSDK.Device {
    get
  }
  public var isZoomed: Swift.Bool? {
    get
  }
  public static var allTouchIDCapableDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allFaceIDCapableDevices: [DIGIPROSDK.Device] {
    get
  }
  public var isTouchIDCapable: Swift.Bool {
    get
  }
  public var isFaceIDCapable: Swift.Bool {
    get
  }
  public var hasBiometricSensor: Swift.Bool {
    get
  }
  public static var allDevicesWithSensorHousing: [DIGIPROSDK.Device] {
    get
  }
  public var hasSensorHousing: Swift.Bool {
    get
  }
  public static var allDevicesWithRoundedDisplayCorners: [DIGIPROSDK.Device] {
    get
  }
  public var hasRoundedDisplayCorners: Swift.Bool {
    get
  }
  public static var allDevicesWith3dTouchSupport: [DIGIPROSDK.Device] {
    get
  }
  public var has3dTouchSupport: Swift.Bool {
    get
  }
  public static var allDevicesWithWirelessChargingSupport: [DIGIPROSDK.Device] {
    get
  }
  public var supportsWirelessCharging: Swift.Bool {
    get
  }
  public static var allRealDevices: [DIGIPROSDK.Device] {
    get
  }
  public static var allSimulators: [DIGIPROSDK.Device] {
    get
  }
  public func isOneOf(_ devices: [DIGIPROSDK.Device]) -> Swift.Bool
  public var name: Swift.String? {
    get
  }
  public var systemName: Swift.String? {
    get
  }
  public var systemVersion: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var localizedModel: Swift.String? {
    get
  }
  public var ppi: Swift.Int? {
    get
  }
  public var isGuidedAccessSessionActive: Swift.Bool {
    get
  }
  public var screenBrightness: Swift.Int {
    get
  }
}
extension Device : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Device : Swift.Equatable {
  public static func == (lhs: DIGIPROSDK.Device, rhs: DIGIPROSDK.Device) -> Swift.Bool
}
@available(iOS 8.0, watchOS 4.0, *)
extension Device {
  public enum BatteryState : Swift.CustomStringConvertible, Swift.Equatable {
    case full
    case charging(Swift.Int)
    case unplugged(Swift.Int)
    public var lowPowerMode: Swift.Bool {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public var batteryState: DIGIPROSDK.Device.BatteryState? {
    get
  }
  public var batteryLevel: Swift.Int? {
    get
  }
}
@available(iOS 8.0, watchOS 4.0, *)
extension Device.BatteryState : Swift.Comparable {
  public static func == (lhs: DIGIPROSDK.Device.BatteryState, rhs: DIGIPROSDK.Device.BatteryState) -> Swift.Bool
  public static func < (lhs: DIGIPROSDK.Device.BatteryState, rhs: DIGIPROSDK.Device.BatteryState) -> Swift.Bool
}
extension Device {
  public enum Orientation {
    case landscape
    case portrait
    public static func == (a: DIGIPROSDK.Device.Orientation, b: DIGIPROSDK.Device.Orientation) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var orientation: DIGIPROSDK.Device.Orientation {
    get
  }
}
extension Device {
  public static var volumeTotalCapacity: Swift.Int? {
    get
  }
  public static var volumeAvailableCapacity: Swift.Int? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumeAvailableCapacityForImportantUsage: Swift.Int64? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumeAvailableCapacityForOpportunisticUsage: Swift.Int64? {
    get
  }
  @available(iOS 11.0, *)
  public static var volumes: [Foundation.URLResourceKey : Swift.Int64]? {
    get
  }
}
extension Device {
  public struct ApplePencilSupport : Swift.OptionSet {
    public var rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public static let firstGeneration: DIGIPROSDK.Device.ApplePencilSupport
    public static let secondGeneration: DIGIPROSDK.Device.ApplePencilSupport
    public typealias Element = DIGIPROSDK.Device.ApplePencilSupport
    public typealias ArrayLiteralElement = DIGIPROSDK.Device.ApplePencilSupport
    public typealias RawValue = Swift.UInt
  }
  public static var allApplePencilCapableDevices: [DIGIPROSDK.Device] {
    get
  }
  public var applePencilSupport: DIGIPROSDK.Device.ApplePencilSupport {
    get
  }
}
extension Device {
  public enum CameraTypes {
    case normal
    case telephoto
    case ultraWide
    public static func == (a: DIGIPROSDK.Device.CameraTypes, b: DIGIPROSDK.Device.CameraTypes) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var cameras: [DIGIPROSDK.Device.CameraTypes] {
    get
  }
  public static var allDevicesWithCamera: [DIGIPROSDK.Device] {
    get
  }
  public static var allDevicesWithNormalCamera: [DIGIPROSDK.Device] {
    get
  }
  public static var allDevicesWithTelephotoCamera: [DIGIPROSDK.Device] {
    get
  }
  public static var allDevicesWithUltraWideCamera: [DIGIPROSDK.Device] {
    get
  }
  public var hasCamera: Swift.Bool {
    get
  }
  public var hasNormalCamera: Swift.Bool {
    get
  }
  public var hasTelephotoCamera: Swift.Bool {
    get
  }
  public var hasUltraWideCamera: Swift.Bool {
    get
  }
}
public enum Bit : Swift.Int {
  case zero
  case one
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Updatable {
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
extension Updatable {
  public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
  public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
  public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public mutating func finish() throws -> Swift.Array<Swift.UInt8>
  public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>, output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
  public mutating func finish(output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
@objc @_inheritsConvenienceInitializers public class SmsServicio : DIGIPROSDK.EVObject {
  @objc public var Usuario: Swift.String
  @objc public var Telefono: Swift.String
  @objc public var Codigo: Swift.String
  @objc public var Enviado: Swift.Bool
  @objc public var Validado: Swift.Bool
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var TipoSms: Swift.Int
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_escanerNFC : DIGIPROSDK.Atributos_Generales {
  @objc public var metadato: Swift.String
  @objc public var subtitulo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var alineadotexto: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var mayusculasminusculas: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var permisoescaner: Swift.Bool
  @objc public var elementopadre: Swift.String
  @objc public var lado: Swift.Int
  @objc public var margenderecho: Swift.String
  @objc public var margenizquierdo: Swift.String
  @objc public var colorescaner: Swift.String
  @objc public var colortextoescaner: Swift.String
  @objc public var campo: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
public struct PCBC : DIGIPROSDK.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: DIGIPROSDK.PCBC.Error, b: DIGIPROSDK.PCBC.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let options: DIGIPROSDK.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
public protocol NotificationBannerDelegate : AnyObject {
  func notificationBannerWillAppear(_ banner: DIGIPROSDK.BaseNotificationBanner)
  func notificationBannerDidAppear(_ banner: DIGIPROSDK.BaseNotificationBanner)
  func notificationBannerWillDisappear(_ banner: DIGIPROSDK.BaseNotificationBanner)
  func notificationBannerDidDisappear(_ banner: DIGIPROSDK.BaseNotificationBanner)
}
@objc @_hasMissingDesignatedInitializers public class BaseNotificationBanner : UIKit.UIView {
  weak public var delegate: DIGIPROSDK.NotificationBannerDelegate?
  public var bannerHeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var titleLabel: DIGIPROSDK.MarqueeLabel? {
    get
  }
  public var duration: Swift.Double {
    get
    set
  }
  public var autoDismiss: Swift.Bool {
    get
    set
  }
  public var haptic: DIGIPROSDK.BannerHaptic
  public var dismissOnTap: Swift.Bool
  public var dismissOnSwipeUp: Swift.Bool
  public var onTap: (() -> Swift.Void)?
  public var onSwipeUp: (() -> Swift.Void)?
  public var bannerQueue: DIGIPROSDK.NotificationBannerQueue
  public var dismissDuration: Swift.Double
  public var isDisplaying: Swift.Bool {
    get
  }
  @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc public func dismiss()
  public func remove()
  public func show(queuePosition: DIGIPROSDK.QueuePosition = .back, bannerPosition: DIGIPROSDK.BannerPosition = .top, queue: DIGIPROSDK.NotificationBannerQueue = NotificationBannerQueue.default, on viewController: UIKit.UIViewController? = nil)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public enum AEXMLError : Swift.Error {
  case elementNotFound
  case rootElementMissing
  case parsingFailed
  public static func == (a: DIGIPROSDK.AEXMLError, b: DIGIPROSDK.AEXMLError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerExtendable : DIGIPROSDK.ConstraintMakerRelatable {
  public var left: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var top: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var bottom: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var right: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var leading: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var trailing: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var width: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var height: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var centerX: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var centerY: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, message: "Use lastBaseline instead")
  public var baseline: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, OSX 10.11, *)
  public var firstBaseline: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var edges: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var size: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FlipHorizontalAnimation : DIGIPROSDK.PresentrAnimation {
  override public func performAnimation(using transitionContext: DIGIPROSDK.PresentrTransitionContext)
  @objc deinit
  override public init(options: DIGIPROSDK.AnimationOptions = super)
}
extension Promise {
  @discardableResult
  final public func `catch`(on queue: Dispatch.DispatchQueue = .main, _ handler: @escaping (Swift.Error) throws -> Swift.Void) -> DIGIPROSDK.Promise<Swift.Void>
}
@objc @_inheritsConvenienceInitializers public class FECatalogo : DIGIPROSDK.EVObject {
  @objc public var FechaSincronizacionCatalogo: Swift.Int
  @objc public var TipoCatalogoID: Swift.Int
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEMensajesPush : DIGIPROSDK.EVObject {
  @objc public var ID: Swift.String
  @objc public var UsrID: Swift.String
  @objc public var FechaCreacion: Swift.String
  @objc public var Mensaje: Swift.String
  @objc public var Enviado: Swift.Bool
  @objc public var Visto: Swift.Bool
  @objc public var Borrado: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ConstraintItem {
  @objc deinit
}
public func == (lhs: DIGIPROSDK.ConstraintItem, rhs: DIGIPROSDK.ConstraintItem) -> Swift.Bool
extension Locale {
  public static var enLocale: Foundation.Locale {
    get
  }
  public static var currentLanguage: DIGIPROSDK.Language? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StatusBarNotificationBanner : DIGIPROSDK.BaseNotificationBanner {
  override public var bannerHeight: CoreGraphics.CGFloat {
    get
    set
  }
  convenience public init(title: Swift.String, style: DIGIPROSDK.BannerStyle = .info, colors: UIKit.UIColor? = nil)
  convenience public init(attributedTitle: Foundation.NSAttributedString, style: DIGIPROSDK.BannerStyle = .info, colors: UIKit.UIColor? = nil)
  public init(customView: UIKit.UIView)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum KeyboardTranslationType {
  case none
  case moveUp
  case compress
  case stickToTop
  public func getTranslationFrame(keyboardFrame: CoreGraphics.CGRect, presentedFrame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  public static func == (a: DIGIPROSDK.KeyboardTranslationType, b: DIGIPROSDK.KeyboardTranslationType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Array {
  public init(reserveCapacity: Swift.Int)
}
extension Array where Element == Swift.UInt8 {
  public init(hex: Swift.String)
  public func toHexString() -> Swift.String
}
extension Array where Element == Swift.UInt8 {
  @available(swift, deprecated: 0.8.0)
  public func chunks(size chunksize: Swift.Int) -> Swift.Array<Swift.Array<Element>>
  public func md5() -> [Element]
  public func sha1() -> [Element]
  public func sha224() -> [Element]
  public func sha256() -> [Element]
  public func sha384() -> [Element]
  public func sha512() -> [Element]
  public func sha2(_ variant: DIGIPROSDK.SHA2.Variant) -> [Element]
  public func sha3(_ variant: DIGIPROSDK.SHA3.Variant) -> [Element]
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.UInt16
  public func encrypt(cipher: DIGIPROSDK.Cipher) throws -> [Element]
  public func decrypt(cipher: DIGIPROSDK.Cipher) throws -> [Element]
  public func authenticate<A>(with authenticator: A) throws -> [Element] where A : DIGIPROSDK.Authenticator
}
@objc @_inheritsConvenienceInitializers public class FEAnexoData : DIGIPROSDK.EVObject {
  @objc public var Guid: Swift.String
  @objc public var FileName: Swift.String
  @objc public var ElementoId: Swift.String
  @objc public var Datos: Swift.String
  @objc public var TareaSiguiente: DIGIPROSDK.FEEventosFlujo
  @objc public var Movil: Swift.Bool
  @objc public var DocID: Swift.Int
  @objc public var InstanciaId: Swift.Int
  public var ExpID: Swift.Int?
  @objc public var TipoDocID: Swift.Int
  @objc public var Extension: Swift.String
  @objc public var Separador: Swift.Bool
  @objc public var OrdenVisor: Swift.Int
  @objc public var Error: Swift.Int
  @objc public var GuidAnexo: Swift.String
  @objc public var Borrado: Swift.Bool
  @objc public var Reemplazado: Swift.Bool
  @objc public var Descargado: Swift.Bool
  @objc public var Editado: Swift.Bool
  @objc public var DocIDAnexo: Swift.Int
  @objc public var Completado: Swift.Int
  @objc public var Publicado: Swift.Bool
  @objc public var NombreOriginal: Swift.String
  @objc public var isReemplazo: Swift.Bool
  @objc public var Metadatos: [DIGIPROSDK.FEListMetadatosHijos]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Checksum {
  @objc deinit
}
extension Checksum {
  public static func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public static func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public static func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16
}
extension Promise {
  final public func timeout(on queue: Dispatch.DispatchQueue = .main, _ seconds: Foundation.TimeInterval, _ error: Swift.Error? = nil) -> DIGIPROSDK.Promise<Result>
}
extension HeroTransition {
  public func update(_ percentageComplete: CoreGraphics.CGFloat)
  public func finish(animate: Swift.Bool = true)
  public func cancel(animate: Swift.Bool = true)
  public func apply(modifiers: [DIGIPROSDK.HeroModifier], to view: UIKit.UIView)
  public func changeTarget(modifiers: [DIGIPROSDK.HeroModifier], isDestination: Swift.Bool = true, to view: UIKit.UIView)
}
extension String {
  public func decryptBase64ToString(cipher: DIGIPROSDK.Cipher) throws -> Swift.String
  public func decryptBase64(cipher: DIGIPROSDK.Cipher) throws -> Swift.Array<Swift.UInt8>
}
@objc @_inheritsConvenienceInitializers public class FEConsultasFinalizados : DIGIPROSDK.EVObject {
  @objc public var DocID: Swift.String
  @objc public var DocumentoBusqueda: Swift.String
  @objc public var TipoExpediente: Swift.String
  @objc public var NombredelCliente: Swift.String
  @objc public var CURP: Swift.String
  @objc public var FoliodeSolicitud: Swift.String
  @objc public var Convenio: Swift.String
  @objc public var Fecha: Swift.String
  @objc public var Status: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public protocol EasyTipViewDelegate : AnyObject {
  func easyTipViewDidDismiss(_ tipView: DIGIPROSDK.EasyTipView)
}
extension EasyTipView {
  public class func show(animated: Swift.Bool = true, forItem item: UIKit.UIBarItem, withinSuperview superview: UIKit.UIView? = nil, text: Swift.String, preferences: DIGIPROSDK.EasyTipView.Preferences = EasyTipView.globalPreferences, delegate: DIGIPROSDK.EasyTipViewDelegate? = nil)
  public class func show(animated: Swift.Bool = true, forView view: UIKit.UIView, withinSuperview superview: UIKit.UIView? = nil, text: Swift.String, preferences: DIGIPROSDK.EasyTipView.Preferences = EasyTipView.globalPreferences, delegate: DIGIPROSDK.EasyTipViewDelegate? = nil)
  public func show(animated: Swift.Bool = true, forItem item: UIKit.UIBarItem, withinSuperView superview: UIKit.UIView? = nil)
  public func show(animated: Swift.Bool = true, forView view: UIKit.UIView, withinSuperview superview: UIKit.UIView? = nil)
  public func dismiss(withCompletion completion: (() -> ())? = nil)
}
extension EasyTipView : UIKit.UIGestureRecognizerDelegate {
  @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc open class EasyTipView : UIKit.UIView {
  public enum ArrowPosition {
    case any
    case top
    case bottom
    case right
    case left
    public static func == (a: DIGIPROSDK.EasyTipView.ArrowPosition, b: DIGIPROSDK.EasyTipView.ArrowPosition) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public struct Preferences {
    public struct Drawing {
      public var cornerRadius: CoreGraphics.CGFloat
      public var arrowHeight: CoreGraphics.CGFloat
      public var arrowWidth: CoreGraphics.CGFloat
      public var foregroundColor: UIKit.UIColor
      public var backgroundColor: UIKit.UIColor
      public var arrowPosition: DIGIPROSDK.EasyTipView.ArrowPosition
      public var textAlignment: UIKit.NSTextAlignment
      public var borderWidth: CoreGraphics.CGFloat
      public var borderColor: UIKit.UIColor
      public var font: UIKit.UIFont
    }
    public struct Positioning {
      public var bubbleHInset: CoreGraphics.CGFloat
      public var bubbleVInset: CoreGraphics.CGFloat
      public var textHInset: CoreGraphics.CGFloat
      public var textVInset: CoreGraphics.CGFloat
      public var maxWidth: CoreGraphics.CGFloat
    }
    public struct Animating {
      public var dismissTransform: CoreGraphics.CGAffineTransform
      public var showInitialTransform: CoreGraphics.CGAffineTransform
      public var showFinalTransform: CoreGraphics.CGAffineTransform
      public var springDamping: CoreGraphics.CGFloat
      public var springVelocity: CoreGraphics.CGFloat
      public var showInitialAlpha: CoreGraphics.CGFloat
      public var dismissFinalAlpha: CoreGraphics.CGFloat
      public var showDuration: Swift.Double
      public var dismissDuration: Swift.Double
      public var dismissOnTap: Swift.Bool
    }
    public var drawing: DIGIPROSDK.EasyTipView.Preferences.Drawing
    public var positioning: DIGIPROSDK.EasyTipView.Preferences.Positioning
    public var animating: DIGIPROSDK.EasyTipView.Preferences.Animating
    public var hasBorder: Swift.Bool {
      get
    }
    public init()
  }
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  open var preferences: DIGIPROSDK.EasyTipView.Preferences {
    get
  }
  final public let text: Swift.String
  public static var globalPreferences: DIGIPROSDK.EasyTipView.Preferences
  public init(text: Swift.String, preferences: DIGIPROSDK.EasyTipView.Preferences = EasyTipView.globalPreferences, delegate: DIGIPROSDK.EasyTipViewDelegate? = nil)
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc @_inheritsConvenienceInitializers public class FEEventosFlujo : DIGIPROSDK.EVObject {
  @objc public var FlujoID: Swift.Int
  @objc public var NombreFlujo: Swift.String
  @objc public var Descripcion: Swift.String
  @objc public var EstadoIniId: Swift.Int
  @objc public var EstadoFinId: Swift.Int
  @objc public var TareaID: Swift.Int
  @objc public var NombreTarea: Swift.String
  @objc public var ProcesoID: Swift.Int
  @objc public var NombreProceso: Swift.String
  @objc public var PIID: Swift.Int
  @objc public var Total: Swift.Int
  @objc public var UsuarioAsignar: Swift.String
  @objc public var seleccionadoFlujo: Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public enum TransitionType {
  case crossDissolve
  case coverVertical
  case coverVerticalFromTop
  case coverHorizontalFromRight
  case coverHorizontalFromLeft
  case flipHorizontal
  case coverFromCorner(DIGIPROSDK.Corner)
  case custom(DIGIPROSDK.PresentrAnimation)
}
@_hasMissingDesignatedInitializers public class ConstraintMaker {
  public var left: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var top: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var bottom: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var right: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var leading: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var trailing: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var width: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var height: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var centerX: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var centerY: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, message: "Use lastBaseline instead")
  public var baseline: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, OSX 10.11, *)
  public var firstBaseline: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var edges: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var size: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  public var center: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: DIGIPROSDK.ConstraintMakerExtendable {
    get
  }
  @objc deinit
}
public typealias AlertActionHandler = ((DIGIPROSDK.AlertAction) -> Swift.Void)
public class AlertAction {
  final public let title: Swift.String
  final public let style: DIGIPROSDK.AlertActionStyle
  final public let handler: DIGIPROSDK.AlertActionHandler?
  public init(title: Swift.String, style: DIGIPROSDK.AlertActionStyle, handler: DIGIPROSDK.AlertActionHandler?)
  @objc deinit
}
public enum AlertActionStyle {
  case `default`
  case cancel
  case destructive
  case custom(textColor: UIKit.UIColor)
}
public struct ColorPalette {
}
@objc @_inheritsConvenienceInitializers public class AlertViewController : UIKit.UIViewController {
  public var titleText: Swift.String?
  public var bodyText: Swift.String?
  public var autoDismiss: Swift.Bool
  public var dismissAnimated: Swift.Bool
  @objc override dynamic public func loadView()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func didReceiveMemoryWarning()
  @objc override dynamic public func updateViewConstraints()
  public func addAction(_ action: DIGIPROSDK.AlertAction)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum QueuePosition {
  case back
  case front
  public static func == (a: DIGIPROSDK.QueuePosition, b: DIGIPROSDK.QueuePosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class NotificationBannerQueue : ObjectiveC.NSObject {
  public static let `default`: DIGIPROSDK.NotificationBannerQueue
  public var numberOfBanners: Swift.Int {
    get
  }
  public func removeAll()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc open class EVManagedObject : CoreData.NSManagedObject, DIGIPROSDK.EVReflectable {
  @objc @discardableResult
  required public init(entityName: Swift.String? = nil, context: CoreData.NSManagedObjectContext!, json: Swift.String?, forKeyPath: Swift.String? = nil)
  @objc required override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  open func toDictionary(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize) -> Foundation.NSDictionary
  public func toJsonString(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Swift.String
  public func toJsonData(_ conversionOptions: DIGIPROSDK.ConversionOptions = .DefaultSerialize, prettyPrinted: Swift.Bool = false) -> Foundation.Data
  @objc override dynamic open func setValue(_ value: Any!, forUndefinedKey key: Swift.String)
  @objc convenience required public init?(coder: Foundation.NSCoder)
  @objc open func encode(with aCoder: Foundation.NSCoder)
  @objc open func initValidation(_ dict: Foundation.NSDictionary)
  open func propertyMapping() -> [(keyInObject: Swift.String?, keyInResource: Swift.String?)]
  open func propertyConverters() -> [(key: Swift.String, decodeConverter: ((Any?) -> ()), encodeConverter: (() -> Any?))]
  @objc open func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  open func getSpecificType(_ dict: Foundation.NSDictionary) -> DIGIPROSDK.EVReflectable?
  @objc open func customConverter() -> Swift.AnyObject?
  @objc deinit
}
extension PKCS5 {
  public struct PBKDF2 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: DIGIPROSDK.PKCS5.PBKDF2.Error, b: DIGIPROSDK.PKCS5.PBKDF2.Error) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil, variant: DIGIPROSDK.HMAC.Variant = .sha256) throws
    public func calculate() throws -> Swift.Array<Swift.UInt8>
  }
}
@objc @_inheritsConvenienceInitializers public class FEGruposConvenio : DIGIPROSDK.EVObject {
  @objc public var convenioGoup: Swift.String
  @objc public var convenios: [DIGIPROSDK.FEConvenioCalculadora]
  @objc deinit
  @objc required dynamic public init()
}
public struct ConstraintViewDSL : DIGIPROSDK.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void) -> [DIGIPROSDK.Constraint]
  public func makeConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (DIGIPROSDK.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var contentHuggingHorizontalPriority: Swift.Float {
    get
    set
  }
  public var contentHuggingVerticalPriority: Swift.Float {
    get
    set
  }
  public var contentCompressionResistanceHorizontalPriority: Swift.Float {
    get
    set
  }
  public var contentCompressionResistanceVerticalPriority: Swift.Float {
    get
    set
  }
  public var target: Swift.AnyObject? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class OcrPasaporteFormulas : DIGIPROSDK.EVObject {
  @objc public var accioncorrecta: Swift.String
  @objc public var accionincorrecta: Swift.String
  @objc public var tipo: Swift.String
  @objc public var clavedelpais: Swift.String
  @objc public var pasaportenumero: Swift.String
  @objc public var apellidopaterno: Swift.String
  @objc public var apellidomaterno: Swift.String
  @objc public var nombres: Swift.String
  @objc public var nacionalidad: Swift.String
  @objc public var observaciones: Swift.String
  @objc public var fechanacimiento: Swift.String
  @objc public var curp: Swift.String
  @objc public var sexo: Swift.String
  @objc public var lugarnacimiento: Swift.String
  @objc public var fechaexpedicion: Swift.String
  @objc public var fechacaducidad: Swift.String
  @objc public var autoridad: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
public protocol ConstraintInsetTarget : DIGIPROSDK.ConstraintConstantTarget {
}
extension Int : DIGIPROSDK.ConstraintInsetTarget {
}
extension UInt : DIGIPROSDK.ConstraintInsetTarget {
}
extension Float : DIGIPROSDK.ConstraintInsetTarget {
}
extension Double : DIGIPROSDK.ConstraintInsetTarget {
}
extension CGFloat : DIGIPROSDK.ConstraintInsetTarget {
}
extension UIEdgeInsets : DIGIPROSDK.ConstraintInsetTarget {
}
extension String {
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func md5() -> Swift.String
  public func sha1() -> Swift.String
  public func sha224() -> Swift.String
  public func sha256() -> Swift.String
  public func sha384() -> Swift.String
  public func sha512() -> Swift.String
  public func sha3(_ variant: DIGIPROSDK.SHA3.Variant) -> Swift.String
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.String
  public func encrypt(cipher: DIGIPROSDK.Cipher) throws -> Swift.String
  public func encryptToBase64(cipher: DIGIPROSDK.Cipher) throws -> Swift.String?
  public func authenticate<A>(with authenticator: A) throws -> Swift.String where A : DIGIPROSDK.Authenticator
}
public enum PKCS5 {
}
public enum enum_metodo {
  case undefined
  case separarfecha
  public static func == (a: DIGIPROSDK.enum_metodo, b: DIGIPROSDK.enum_metodo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class Atributos_metodo : DIGIPROSDK.Atributos_Generales {
  @objc public var tipometodo: Swift.String
  @objc public var parametrosentrada: Swift.String
  @objc public var parametrossalida: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public func Bluebirdreduce<A, B, S>(on queue: Dispatch.DispatchQueue = .main, _ items: S, _ initial: B, _ transform: @escaping (B, A) throws -> DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<B> where A == S.Element, S : Swift.Sequence
extension Promise where Result : Swift.Sequence {
  final public func Bluebirdreduce<B>(on queue: Dispatch.DispatchQueue = .main, _ initial: B, _ transform: @escaping (B, Result.Iterator.Element) throws -> DIGIPROSDK.Promise<B>) -> DIGIPROSDK.Promise<B>
}
public protocol CalendarDateRangePickerViewControllerDelegate {
  func didTapCancel()
  func didTapDoneWithDateRange(startDate: Foundation.Date!, endDate: Foundation.Date!)
}
@objc @_inheritsConvenienceInitializers public class CalendarDateRangePickerViewController : UIKit.UICollectionViewController {
  public var delegate: DIGIPROSDK.CalendarDateRangePickerViewControllerDelegate!
  public var minimumDate: Foundation.Date!
  public var maximumDate: Foundation.Date!
  public var selectedStartDate: Foundation.Date?
  public var selectedEndDate: Foundation.Date?
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CalendarDateRangePickerViewController {
  @objc override dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
}
extension CalendarDateRangePickerViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers public class Atributos_rostrovivo : DIGIPROSDK.Atributos_Generales {
  @objc public var acciones: Swift.String
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampoanexo: Swift.String
  @objc public var proveedor: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var permisotipificar: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var anteriorguid: Swift.String
  @objc public var anteriordocid: Swift.String
  @objc public var docid: Swift.Int
  @objc public var downloadanexo: Swift.Bool
  @objc public var facetocompare: Swift.String
  @objc public var isliveperson: Swift.String
  @objc public var mostrarmensajerequerido: Swift.Bool
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_codigoqr : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var generarcodigo: Swift.Bool
  @objc public var generarcodigoautomatico: Swift.Bool
  @objc public var habilitado: Swift.Bool
  @objc public var mayusculasminusculas: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var pdfcampocodigo: Swift.String
  @objc public var permisoescaner: Swift.Bool
  @objc public var permitirprellenadoexterno: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var prellenadomapeocampos: Swift.String
  @objc public var lado: Swift.Int
  @objc public var margenderecho: Swift.String
  @objc public var margenizquierdo: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
extension Promise {
  final public var asVoid: DIGIPROSDK.Promise<Swift.Void> {
    get
  }
}
public func VoidPromise() -> DIGIPROSDK.Promise<Swift.Void>
public struct ConversionOptions : Swift.OptionSet, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: DIGIPROSDK.ConversionOptions
  public static let PropertyConverter: DIGIPROSDK.ConversionOptions
  public static let PropertyMapping: DIGIPROSDK.ConversionOptions
  public static let SkipPropertyValue: DIGIPROSDK.ConversionOptions
  public static let KeyCleanup: DIGIPROSDK.ConversionOptions
  public static let Decoding: DIGIPROSDK.ConversionOptions
  public static let Encoding: DIGIPROSDK.ConversionOptions
  public static var All: DIGIPROSDK.ConversionOptions
  public static var DefaultNSCoding: DIGIPROSDK.ConversionOptions
  public static var DefaultComparing: DIGIPROSDK.ConversionOptions
  public static var DefaultDeserialize: DIGIPROSDK.ConversionOptions
  public static var DefaultSerialize: DIGIPROSDK.ConversionOptions
  public var description: Swift.String {
    get
  }
  public typealias Element = DIGIPROSDK.ConversionOptions
  public typealias ArrayLiteralElement = DIGIPROSDK.ConversionOptions
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers public class Atributos_audio : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var leyendaaudio: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var permisograbar: Swift.Bool
  @objc public var permisoimportar: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var coloraudio: Swift.String
  @objc public var colorborrar: Swift.String
  @objc public var colorimportar: Swift.String
  @objc public var colorvisualizar: Swift.String
  @objc public var colorreemplazar: Swift.String
  @objc public var permisotipificar: Swift.Bool
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public protocol SpreadsheetViewDataSource : AnyObject {
  func numberOfColumns(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> Swift.Int
  func numberOfRows(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> Swift.Int
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, widthForColumn column: Swift.Int) -> CoreGraphics.CGFloat
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, heightForRow row: Swift.Int) -> CoreGraphics.CGFloat
  func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, cellForItemAt indexPath: Foundation.IndexPath) -> DIGIPROSDK.CellSpread?
  func mergedCells(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> [DIGIPROSDK.CellRange]
  func frozenColumns(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> Swift.Int
  func frozenRows(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> Swift.Int
}
extension SpreadsheetViewDataSource {
  public func spreadsheetView(_ spreadsheetView: DIGIPROSDK.SpreadsheetView, cellForItemAt indexPath: Foundation.IndexPath) -> DIGIPROSDK.CellSpread?
  public func mergedCells(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> [DIGIPROSDK.CellRange]
  public func frozenColumns(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> Swift.Int
  public func frozenRows(in spreadsheetView: DIGIPROSDK.SpreadsheetView) -> Swift.Int
}
@_hasMissingDesignatedInitializers public class ConstraintMakerFinalizable {
  @discardableResult
  public func labeled(_ label: Swift.String) -> DIGIPROSDK.ConstraintMakerFinalizable
  public var constraint: DIGIPROSDK.Constraint {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEProductsCalculadora : DIGIPROSDK.EVObject {
  @objc public var Product: [DIGIPROSDK.FEProductCalculadora]
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FELogaltyAcceptance : DIGIPROSDK.EVObject {
  @objc public var Uuid: Swift.String
  @objc public var Guid: Swift.String
  @objc public var Nombre: Swift.String
  @objc public var ApellidoPaterno: Swift.String
  @objc public var ApellidoMaterno: Swift.String
  @objc public var Email: Swift.String
  @objc public var Telefono: Swift.String
  @objc public var Url: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Atributos_imagen : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var anteriornombrearchivo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var crop: Swift.Bool
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var modocamara: Swift.String
  @objc public var nombrearchivo: Swift.String
  @objc public var normalizacion: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampoanexo: Swift.String
  @objc public var permisocamara: Swift.Bool
  @objc public var permisoescanear: Swift.Bool
  @objc public var permisoimportar: Swift.Bool
  @objc public var permisotipificar: Swift.Bool
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var tipocamara: Swift.String
  @objc public var tipodoc: Swift.Int
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var colorescaner: Swift.String
  @objc public var colorimportar: Swift.String
  @objc public var colortomarfoto: Swift.String
  @objc public var colorborrar: Swift.String
  @objc public var colorreemplazar: Swift.String
  @objc public var anexo: Swift.String
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public func all<A>(on queue: Dispatch.DispatchQueue = .main, _ promises: DIGIPROSDK.Promise<A>...) -> DIGIPROSDK.Promise<[A]>
public func all<A, S>(on queue: Dispatch.DispatchQueue = .main, _ promises: S) -> DIGIPROSDK.Promise<[A]> where S : Swift.Sequence, S.Element == DIGIPROSDK.Promise<A>
public struct OFB : DIGIPROSDK.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: DIGIPROSDK.OFB.Error, b: DIGIPROSDK.OFB.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let options: DIGIPROSDK.BlockModeOption
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping DIGIPROSDK.CipherOperationOnBlock) throws -> DIGIPROSDK.CipherModeWorker
}
@objc public class CoverHorizontalAnimation : DIGIPROSDK.PresentrAnimation {
  public init(fromRight: Swift.Bool = true)
  override public func transform(containerFrame: CoreGraphics.CGRect, finalFrame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  override public init(options: DIGIPROSDK.AnimationOptions = super)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CoverVerticalAnimation : DIGIPROSDK.PresentrAnimation {
  override public func transform(containerFrame: CoreGraphics.CGRect, finalFrame: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  override public init(options: DIGIPROSDK.AnimationOptions = super)
  @objc deinit
}
public enum TipoCampo : Swift.Int {
  case Default
  case BigInt
  case DateTime
  case DateddmmaaaaDiag
  case DateaaammddDiag
  case DateddmmaaaaGuion
  case DateaaammddGuion
  case VarChar
  case Char
  case Int
  case TinyInt
  case Check
  case DynamicList
  case Money
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FECampoReporte : DIGIPROSDK.EVObject {
  @objc public var Nombre: Swift.String
  @objc public var MaxLength: Swift.String
  @objc public var MinLength: Swift.String
  @objc public var Required: Swift.Int
  @objc public var Validate: Swift.String
  @objc public var TypeId: Swift.String
  @objc public var Accion: Swift.String
  @objc public var Regla: Swift.String
  @objc public var Mascara: Swift.String
  @objc public var Preguntar: Swift.Int
  @objc public var FiltroFijo: Swift.String
  @objc public var TipoConsulta: Swift.String
  @objc public var OrdenMostrar: Swift.String
  @objc public var PermisoId: Swift.String
  @objc public var Valor: Swift.String
  @objc public var Catalogo: [DIGIPROSDK.FEItemCatalogo]
  @objc public var ReportePAdre: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEItemCatalogoEsquema : DIGIPROSDK.EVObject {
  @objc public var TipoCatalogoID: Swift.Int
  @objc public var Catalogo: [DIGIPROSDK.FEItemCatalogo]
  @objc public var Esquema: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension HeroModifier {
  public static func beginWith(_ modifiers: [DIGIPROSDK.HeroModifier]) -> DIGIPROSDK.HeroModifier
  public static func beginWith(modifiers: [DIGIPROSDK.HeroModifier]) -> DIGIPROSDK.HeroModifier
  public static func beginWith(_ modifiers: DIGIPROSDK.HeroModifier...) -> DIGIPROSDK.HeroModifier
  public static var useGlobalCoordinateSpace: DIGIPROSDK.HeroModifier
  public static var ignoreSubviewModifiers: DIGIPROSDK.HeroModifier
  public static func ignoreSubviewModifiers(recursive: Swift.Bool = false) -> DIGIPROSDK.HeroModifier
  public static var useOptimizedSnapshot: DIGIPROSDK.HeroModifier
  public static var useNormalSnapshot: DIGIPROSDK.HeroModifier
  public static var useLayerRenderSnapshot: DIGIPROSDK.HeroModifier
  public static var useNoSnapshot: DIGIPROSDK.HeroModifier
  public static var forceAnimate: DIGIPROSDK.HeroModifier
  public static var useScaleBasedSizeChange: DIGIPROSDK.HeroModifier
}
@objc @_inheritsConvenienceInitializers public class AjaxResponse : DIGIPROSDK.EVObject {
  @objc public var Success: Swift.Bool
  @objc public var Mensaje: Swift.String
  @objc public var ReturnedObject: Foundation.NSDictionary?
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AjaxResponseSimple : DIGIPROSDK.EVObject {
  @objc public var Success: Swift.Bool
  @objc public var Mensaje: Swift.String
  @objc public var ReturnedObject: Swift.String?
  @objc required dynamic public init()
  @objc deinit
}
public enum BluebirdError : Swift.Error {
  case cancelled
  case rangeError
  case timeout(Foundation.TimeInterval)
}
@objc @_inheritsConvenienceInitializers open class CellSpread : UIKit.UIView {
  final public let contentView: UIKit.UIView
  public var backgroundView: UIKit.UIView? {
    get
    set
  }
  public var selectedBackgroundView: UIKit.UIView? {
    get
    set
  }
  open var isHighlighted: Swift.Bool {
    get
    set
  }
  open var isSelected: Swift.Bool {
    get
    set
  }
  public var gridlines: DIGIPROSDK.Gridlines
  @available(*, deprecated, renamed: "gridlines")
  public var grids: DIGIPROSDK.Gridlines {
    get
    set
  }
  public var borders: DIGIPROSDK.Borders {
    get
    set
  }
  public var reuseIdentifier: Swift.String? {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func prepareForReuse()
  @objc deinit
}
extension CellSpread : Swift.Comparable {
  public static func < (lhs: DIGIPROSDK.CellSpread, rhs: DIGIPROSDK.CellSpread) -> Swift.Bool
}
public struct ScrollPosition : Swift.OptionSet {
  public static var top: DIGIPROSDK.ScrollPosition
  public static var centeredVertically: DIGIPROSDK.ScrollPosition
  public static var bottom: DIGIPROSDK.ScrollPosition
  public static var left: DIGIPROSDK.ScrollPosition
  public static var centeredHorizontally: DIGIPROSDK.ScrollPosition
  public static var right: DIGIPROSDK.ScrollPosition
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias Element = DIGIPROSDK.ScrollPosition
  public typealias ArrayLiteralElement = DIGIPROSDK.ScrollPosition
  public typealias RawValue = Swift.Int
}
extension ScrollPosition : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Atributos_lista : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var cascadahijo: Swift.String
  @objc public var cascadapadre: Swift.Bool
  @objc public var catalogodestino: Swift.Bool
  @objc public var catalogoorigen: Swift.String
  @objc public var catalogossistema: Swift.String
  @objc public var configjson: Swift.String
  @objc public var configuracioncascada: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var filtrarcatalogo: DIGIPROSDK.FiltrarCatalogo
  @objc public var fuentedatos: Swift.String
  @objc public var grosortexto: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var maxopcionesseleccionar: Swift.Int
  @objc public var metadato: Swift.String
  @objc public var minopcionesseleccionar: Swift.Int
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var ordenitems: Swift.String
  @objc public var orientacion: Swift.String
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var textoconid: Swift.String
  @objc public var tieneesquema: Swift.Bool
  @objc public var tipoasociacion: Swift.String
  @objc public var tipolista: Swift.String
  @objc public var valor: Swift.String
  @objc public var valorlista: Swift.Bool
  @objc public var valormetadato: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var todasopcionesrequeridas: Swift.Bool
  @objc public var alineadocampo: Swift.String
  @objc public var ordenenresumen: Swift.Int
  @objc public var usarcomocampoexterno: Swift.Bool
  @objc public var usarcomoresumen: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc public var tipoasociacionObject: [Swift.String : Any]
  @objc public var tipolistaObject: [Swift.String : Any]
  @objc public var optionselected: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FiltrarCatalogo : DIGIPROSDK.EVObject {
  @objc public var filtrar: Swift.Bool
  @objc public var idfiltrados: Swift.String
  @objc public var rangofiltrado: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FETipoReporte : DIGIPROSDK.EVObject {
  @objc public var Nombre: Swift.String
  @objc public var TemplateID: Swift.Int
  @objc public var Campos: [DIGIPROSDK.FECampoReporte]
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
public enum CircularScrolling {
  public struct Configuration {
    public static var none: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.None> {
      get
    }
    public static var horizontally: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Horizontally> {
      get
    }
    public static var vertically: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Vertically> {
      get
    }
    public static var both: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both> {
      get
    }
    public struct Options {
    }
  }
  @_hasMissingDesignatedInitializers public class None : DIGIPROSDK.CircularScrollingConfigurationState {
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Horizontally : DIGIPROSDK.CircularScrollingConfigurationState {
    @_hasMissingDesignatedInitializers public class ColumnHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
      @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Vertically : DIGIPROSDK.CircularScrollingConfigurationState {
    @_hasMissingDesignatedInitializers public class RowHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
      @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Both : DIGIPROSDK.CircularScrollingConfigurationState {
    @_hasMissingDesignatedInitializers public class ColumnHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
      @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class RowHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
        @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
          @objc deinit
        }
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class RowHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
      @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class ColumnHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
        @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
          @objc deinit
        }
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class RowHeaderStartsFirstColumn : DIGIPROSDK.CircularScrollingConfigurationState {
      @_hasMissingDesignatedInitializers public class RowHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class ColumnHeaderStartsFirstRow : DIGIPROSDK.CircularScrollingConfigurationState {
      @_hasMissingDesignatedInitializers public class ColumnHeaderNotRepeated : DIGIPROSDK.CircularScrollingConfigurationState {
        @objc deinit
      }
      @objc deinit
    }
    @objc deinit
  }
}
public protocol CircularScrollingConfigurationState {
}
public protocol CircularScrollingConfiguration {
  var options: DIGIPROSDK.CircularScrolling.Configuration.Options { get }
}
@_hasMissingDesignatedInitializers public class CircularScrollingConfigurationBuilder<T> : DIGIPROSDK.CircularScrollingConfiguration where T : DIGIPROSDK.CircularScrollingConfigurationState {
  public var options: DIGIPROSDK.CircularScrolling.Configuration.Options {
    get
  }
  @objc deinit
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Horizontally {
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Horizontally.RowHeaderStartsFirstColumn> {
    get
  }
  public var columnHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Horizontally.ColumnHeaderNotRepeated> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Horizontally.ColumnHeaderNotRepeated {
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Horizontally.ColumnHeaderNotRepeated.RowHeaderStartsFirstColumn> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Vertically {
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Vertically.ColumnHeaderStartsFirstRow> {
    get
  }
  public var rowHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Vertically.RowHeaderNotRepeated> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Vertically.RowHeaderNotRepeated {
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Vertically.RowHeaderNotRepeated.ColumnHeaderStartsFirstRow> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both {
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderStartsFirstColumn> {
    get
  }
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderStartsFirstRow> {
    get
  }
  public var columnHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated> {
    get
  }
  public var rowHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both.RowHeaderStartsFirstColumn {
  public var rowHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderStartsFirstColumn.RowHeaderNotRepeated> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both.ColumnHeaderStartsFirstRow {
  public var columnHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderStartsFirstRow.ColumnHeaderNotRepeated> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated {
  public var rowHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated.RowHeaderNotRepeated> {
    get
  }
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated.RowHeaderStartsFirstColumn> {
    get
  }
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated.ColumnHeaderStartsFirstRow> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated.RowHeaderNotRepeated {
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated.RowHeaderNotRepeated.RowHeaderStartsFirstColumn> {
    get
  }
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.ColumnHeaderNotRepeated.RowHeaderNotRepeated.ColumnHeaderStartsFirstRow> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated {
  public var columnHeaderNotRepeated: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated.ColumnHeaderNotRepeated> {
    get
  }
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated.RowHeaderStartsFirstColumn> {
    get
  }
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated.ColumnHeaderStartsFirstRow> {
    get
  }
}
extension CircularScrollingConfigurationBuilder where T : DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated.ColumnHeaderNotRepeated {
  public var rowHeaderStartsFirstColumn: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated.ColumnHeaderNotRepeated.RowHeaderStartsFirstColumn> {
    get
  }
  public var columnHeaderStartsFirstRow: DIGIPROSDK.CircularScrollingConfigurationBuilder<DIGIPROSDK.CircularScrolling.Both.RowHeaderNotRepeated.ColumnHeaderNotRepeated.ColumnHeaderStartsFirstRow> {
    get
  }
}
extension CircularScrollingConfigurationBuilder : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Atributos_logico : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc public var habilitado: Swift.Bool
  @objc public var imagenlogico: Swift.String
  @objc public var metadato: Swift.String
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var pdfcampo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.Bool
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEUserAddress : DIGIPROSDK.EVObject {
  @objc public var DomicilioID: Swift.Int
  @objc public var Descripcion: Swift.String
  @objc public var CalleNumero: Swift.String
  @objc public var Colonia: Swift.String
  @objc public var DelMun: Swift.String
  @objc public var Estado: Swift.String
  @objc public var CP: Swift.String
  @objc public var Pais: Swift.String
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FEUsuario : DIGIPROSDK.EVObject {
  @objc public var User: Swift.String
  @objc public var Password: Swift.String
  @objc public var IP: Swift.String
  @objc public var ProyectoID: Swift.Int
  @objc public var AplicacionID: Swift.Int
  @objc public var Nombre: Swift.String
  @objc public var ApellidoP: Swift.String
  @objc public var ApellidoM: Swift.String
  @objc public var NombreCompleto: Swift.String
  @objc public var GrupoAdminID: Swift.Int
  @objc public var Foto: Swift.String
  @objc public var PermisoScreenshot: Swift.Bool
  @objc public var PermisoEditarFormato: Swift.Bool
  @objc public var PermisoDescargarAnexos: Swift.Bool
  @objc public var PendientesEstadoMapa: Swift.Int
  @objc public var PermisoValidarFormato: Swift.Bool
  @objc public var PermisoVerMapa: Swift.Bool
  @objc public var PermisoBorrarFormato: Swift.Bool
  @objc public var PermisoPendientesPorEnviar: Swift.Bool
  @objc public var PermisoNuevoFormato: Swift.Bool
  @objc public var PermisoSalirConCambios: Swift.Bool
  @objc public var PermisoVisualizarFormato: Swift.Bool
  @objc public var PerfilUsuarioID: Swift.Int
  @objc public var PasswordEncoded: Swift.String
  @objc public var CurrentPasswordEncoded: Swift.String
  @objc public var PasswordNuevo: Swift.String
  @objc public var NewPasswordEncoded: Swift.String
  @objc public var Consultas: [DIGIPROSDK.FETipoReporte]
  @objc public var HasDownloadedContent: Swift.Bool
  @objc public var UserThumbnail: Swift.String
  @objc public var UserAddress: Swift.String
  @objc public var Email: Swift.String
  @objc public var TokenDispositivo: Swift.String
  @objc public var ProveedorPush: Swift.String
  @objc public var Mensajes: Swift.String
  @objc public var AceptoTerminos: Swift.Bool
  @objc public var Token: DIGIPROSDK.FETokenSeguridad
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_Slider : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var campo: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var divisionesrango: Swift.Int
  @objc public var elementopadre: Swift.String
  @objc public var estilos: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var intervalo: Swift.Int
  @objc public var metadato: Swift.String
  @objc public var mostrarrango: Swift.Bool
  @objc public var numeromaximo: Swift.Int
  @objc public var numerominimo: Swift.Int
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var postfijo: Swift.String
  @objc public var prefijo: Swift.String
  @objc public var requerido: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var valor: Swift.String
  @objc public var valormetadato: Swift.String
  @objc public var visible: Swift.Bool
  @objc public var visiblecontenido: Swift.Bool
  @objc public var colorfondo: Swift.String
  @objc public var colortexto: Swift.String
  @objc public var eventos: DIGIPROSDK.Eventos
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HuellaDigitalRespuesta : DIGIPROSDK.EVObject {
  @objc public var Fingerprints: [DIGIPROSDK.FingerPrintsData]
  @objc public var Status: Swift.Int
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FingerPrintsData : DIGIPROSDK.EVObject {
  @objc public var CaptureDate: DIGIPROSDK.CaptureDateData
  @objc public var FingerImpressionImage: DIGIPROSDK.FingerImpressionImageData
  @objc public var FingerPositionCode: Swift.Int
  @objc public var FingerprintImageFingerMissing: Swift.String
  @objc public var NFIQ: Swift.Int
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class CaptureDateData : DIGIPROSDK.EVObject {
  @objc public var DateTime: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FingerImpressionImageData : DIGIPROSDK.EVObject {
  @objc public var BinaryBase64ObjectPNG: Swift.String
  @objc public var BinaryBase64ObjectRAW: Swift.String
  @objc public var BinaryBase64ObjectWSQ: Swift.String
  @objc public var Height: Swift.Int
  @objc public var ImageBitsPerPixelQuantity: Swift.Int
  @objc public var ImageHashValuePNG: Swift.String
  @objc public var ImageHashValueRAW: Swift.String
  @objc public var ImageHashValueWSQ: Swift.String
  @objc public var Resolution: Swift.Int
  @objc public var Width: Swift.Int
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FEVariableData : DIGIPROSDK.EVObject {
  @objc public var Nombre: Swift.String
  @objc public var Valor: Swift.String
  @objc public var UserId: Swift.Int
  @objc public var ForRules: Swift.Bool
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc deinit
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class Requests : ObjectiveC.NSObject {
  public func genericJsonRequest(url: Swift.String = "\(Obfuscator().reveal(key: ObfuscatedCnstnt.cdl))", httpMethod: Swift.String = "POST", parameters: Swift.String = "") -> Foundation.URLRequest
  public func xmlGenericJSONRequest(jsonService jsonservice: Foundation.NSString) -> DIGIPROSDK.AEXMLDocument
  public func xmlGenericRequest(idService idservice: Swift.String?, mParams mparams: [[Swift.String : Any]]?, sParams sparams: [[Swift.String : Any]]?, poutParams poutparams: [[Swift.String : Any]]?) -> DIGIPROSDK.AEXMLDocument
  public func xmlCompareFacesRequest(mParams mparams: [Swift.String], poutParams poutparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlFolioRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlRegistroRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlEnvioSMSRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlValidarSMSRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlSepomexRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlActivacionCorreoRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlActivarUsuarioRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlExisteUsuarioRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlSassSirhRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String], poutParams poutparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func xmlVerificaCurpRfcCredifielRequest(mParams mparams: [Swift.String]) -> DIGIPROSDK.AEXMLDocument
  public func codigoRequest() throws -> Foundation.URLRequest
  public func skinRequest() throws -> Foundation.URLRequest
  public func usuarioRequest() throws -> Foundation.URLRequest
  public func generateHashToken(soap: Swift.String) -> Swift.String
  public func restoreTokenSecurityRequest() throws -> Foundation.URLRequest
  public func imageProfileRequest() throws -> Foundation.URLRequest
  public func userProfileRequest() throws -> Foundation.URLRequest
  public func registroRequest() throws -> Foundation.URLRequest
  public func activarRegistroRequest() throws -> Foundation.URLRequest
  public func soapSMSRequest(sms: DIGIPROSDK.SmsServicio) throws -> Foundation.URLRequest
  public func soapValidateSMSRequest(sms: DIGIPROSDK.SmsServicio) throws -> Foundation.URLRequest
  public func cambiarContraseniaRequest() throws -> Foundation.URLRequest
  public func resetContraseniaRequest(_ usr: DIGIPROSDK.FEUsuario) throws -> Foundation.URLRequest
  public func sepomexRequest(sepomex: DIGIPROSDK.SepoMexResult) throws -> Foundation.URLRequest
  public func plantillasRequest() throws -> Foundation.URLRequest
  public func consultaRemoto(formato: DIGIPROSDK.FECatRemoto) throws -> Foundation.URLRequest
  public func variablesRequest() throws -> Foundation.URLRequest
  public func formatosRequest(formato: DIGIPROSDK.FEConsultaFormato) throws -> Foundation.URLRequest
  public func deleteFormatoRequest(formato: DIGIPROSDK.FEConsultaFormato) throws -> Foundation.URLRequest
  public func sendFormatosRequest(formato: DIGIPROSDK.FEConsultaFormato) throws -> Foundation.URLRequest
  public func sendAnexosRequest(consulta: DIGIPROSDK.FEConsultaAnexo) throws -> Foundation.URLRequest
  public func consultaAnexosRequest(consulta: DIGIPROSDK.FEConsultaAnexo) throws -> Foundation.URLRequest
  public func transitaRequest(formato: DIGIPROSDK.FEConsultaFormato) throws -> Foundation.URLRequest
  public func consultaRequest(consulta: DIGIPROSDK.FEConsultaTemplate) throws -> Foundation.URLRequest
  public func pdfRequest(formato: DIGIPROSDK.FEFormatoData) throws -> Foundation.URLRequest
  public func downloadDOCRequest(formato: DIGIPROSDK.FEFormatoData) throws -> Foundation.URLRequest
  public func compareFacesRequest(compareFaces: DIGIPROSDK.CompareFacesResult) throws -> Foundation.URLRequest
  public func soapFolioRequest(folio: DIGIPROSDK.FolioAutomaticoResult) throws -> Foundation.URLRequest
  public func soapCorreoRequest(correo: DIGIPROSDK.CorreoServicio) throws -> Foundation.URLRequest
  public func soapNewCompareFacesRequest(mParams mparams: [Swift.String], poutParams poutparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewFolioRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewSMSRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewValidateSMSRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewSepomexRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewRegistroRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewActivacionCorreoRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewExisteUsuarioRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewActivarUsuarioRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapNewSassSirhRequest(mParams mparams: [Swift.String], sParams sparams: [Swift.String], poutParams poutparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapVerificaCurpRfcCredifielRequest(mParams mparams: [Swift.String]) throws -> Foundation.URLRequest
  public func soapGenericRequest(idService idservice: Swift.String?, mParams mparams: [[Swift.String : Any]]?, sParams sparams: [[Swift.String : Any]]?, poutParams poutparams: [[Swift.String : Any]]?) throws -> Foundation.URLRequest
  public func soapGenericJSONRequest(jsonService jsonservice: Foundation.NSString) throws -> Foundation.URLRequest
  public func sendFormatosRequestLogalty(formato: DIGIPROSDK.FEConsultaFormato) throws -> Foundation.URLRequest
  public func generateSAML(_ json: Swift.String) throws -> Foundation.URLRequest
  public func sendFormatosRequestEndLogalty(formato: DIGIPROSDK.FELogaltySaml) throws -> Foundation.URLRequest
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Atributos_seccion : DIGIPROSDK.Atributos_Generales {
  @objc public var alineadotexto: Swift.String
  @objc public var campo: Swift.String
  @objc public var colorborde: Swift.String
  @objc public var colorheader: Swift.String
  @objc public var colorheadertexto: Swift.String
  @objc public var decoraciontexto: Swift.String
  @objc public var elementopadre: Swift.String
  @objc public var estilotexto: Swift.String
  @objc public var grosorborde: Swift.Int
  @objc public var grosortexto: Swift.String
  @objc public var habilitado: Swift.Bool
  @objc public var permitemodal: Swift.Bool
  @objc public var visible: Swift.Bool
  @objc public var ocultarsubtitulo: Swift.Bool
  @objc public var subtitulo: Swift.String
  @objc public var ayuda: Swift.String
  @objc public var activo: Swift.Bool
  @objc public var bindcondition: Swift.Bool
  @objc public var campocss: Swift.String
  @objc public var elementrendered: Swift.Bool
  @objc public var executeonce: Swift.Bool
  @objc public var haserror: Swift.Bool
  @objc public var modotab: Swift.Bool
  @objc public var mostrar: Swift.Bool
  @objc public var mostrarmodal: Swift.Bool
  @objc public var sectioncollapsed: Swift.Bool
  @objc public var tipo: Swift.String
  @objc public var validationerror: Swift.String
  @objc override public func skipPropertyValue(_ value: Any, key: Swift.String) -> Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
extension HeroTransition {
  open func start()
}
public protocol BannerColorsProtocol {
  func color(for style: DIGIPROSDK.BannerStyle) -> UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class BannerColors : DIGIPROSDK.BannerColorsProtocol {
  public func color(for style: DIGIPROSDK.BannerStyle) -> UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BlockDecryptor : DIGIPROSDK.Cryptor, DIGIPROSDK.Updatable {
  public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
  public func seek(to position: Swift.Int) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FormularioUtilities {
  public static let shared: DIGIPROSDK.FormularioUtilities
  public var currentFormato: DIGIPROSDK.FEFormatoData
  public var currentPlantilla: DIGIPROSDK.FEPlantillaData
  public var currentAnexos: [DIGIPROSDK.FEAnexoData]
  public var atributosPaginas: [DIGIPROSDK.Atributos_pagina]
  public var paginasVisibles: [DIGIPROSDK.Atributos_pagina]
  public var paginasSegmented: [(pag: Swift.Int, position: Swift.Int)]
  public var globalFlujo: Swift.Int
  public var globalIndexFlujo: Swift.Int
  public var globalProceso: Swift.Int
  public var globalIndexProceso: Swift.Int
  public var rules: DIGIPROSDK.AEXMLDocument?
  public var services: DIGIPROSDK.AEXMLDocument?
  public var components: DIGIPROSDK.AEXMLDocument?
  public var mathematics: DIGIPROSDK.AEXMLDocument?
  public var prefilleddata: DIGIPROSDK.AEXMLDocument?
  public var rulesAfterWizard: [DIGIPROSDK.AEXMLElement]
  public var elemenstInPlantilla: [(id: Swift.String, type: Swift.String, kind: Any?, element: DIGIPROSDK.Elemento?)]
  public func operaciones(_ a: Swift.String, _ b: Swift.String, _ t: Swift.String) -> Swift.String
  public func variables(_ varRule: Swift.String) -> Swift.String
  public func variables(_ token: [DIGIPROSDK.Formula]) -> Swift.String
  public func returnLogicParameter(_ value: Swift.String) -> Swift.Bool
  public func checkIfElementIsVisible(_ elem: DIGIPROSDK.Elemento) -> Swift.Bool
  @objc deinit
}
extension HeroModifier : DIGIPROSDK.HeroStringConvertible {
  public static func from(node: DIGIPROSDK.ExprNode) -> DIGIPROSDK.HeroModifier?
}
extension DIGIPROSDK.BannerHaptic : Swift.Equatable {}
extension DIGIPROSDK.BannerHaptic : Swift.Hashable {}
extension DIGIPROSDK.Poly1305.Error : Swift.Equatable {}
extension DIGIPROSDK.Poly1305.Error : Swift.Hashable {}
extension DIGIPROSDK.ArrangeType : Swift.Equatable {}
extension DIGIPROSDK.ArrangeType : Swift.Hashable {}
extension DIGIPROSDK.DismissSwipeDirection : Swift.Equatable {}
extension DIGIPROSDK.DismissSwipeDirection : Swift.Hashable {}
extension DIGIPROSDK.ChaCha20.Error : Swift.Equatable {}
extension DIGIPROSDK.ChaCha20.Error : Swift.Hashable {}
extension DIGIPROSDK.ScrollableSegmentedControlSegmentStyle : Swift.Equatable {}
extension DIGIPROSDK.ScrollableSegmentedControlSegmentStyle : Swift.Hashable {}
extension DIGIPROSDK.ScrollableSegmentedControlSegmentStyle : Swift.RawRepresentable {}
extension DIGIPROSDK.HMAC.Error : Swift.Equatable {}
extension DIGIPROSDK.HMAC.Error : Swift.Hashable {}
extension DIGIPROSDK.HMAC.Variant : Swift.Equatable {}
extension DIGIPROSDK.HMAC.Variant : Swift.Hashable {}
extension DIGIPROSDK.SHA2.Variant : Swift.Equatable {}
extension DIGIPROSDK.SHA2.Variant : Swift.Hashable {}
extension DIGIPROSDK.SHA3.Variant : Swift.Equatable {}
extension DIGIPROSDK.SHA3.Variant : Swift.Hashable {}
extension DIGIPROSDK.CMAC.Error : Swift.Equatable {}
extension DIGIPROSDK.CMAC.Error : Swift.Hashable {}
extension DIGIPROSDK.Interface.Family : Swift.Equatable {}
extension DIGIPROSDK.Interface.Family : Swift.Hashable {}
extension DIGIPROSDK.Interface.Family : Swift.RawRepresentable {}
extension DIGIPROSDK.HeroSnapshotType : Swift.Equatable {}
extension DIGIPROSDK.HeroSnapshotType : Swift.Hashable {}
extension DIGIPROSDK.HeroCoordinateSpace : Swift.Equatable {}
extension DIGIPROSDK.HeroCoordinateSpace : Swift.Hashable {}
extension DIGIPROSDK.PKCS5.PBKDF1.Error : Swift.Equatable {}
extension DIGIPROSDK.PKCS5.PBKDF1.Error : Swift.Hashable {}
extension DIGIPROSDK.PKCS5.PBKDF1.Variant : Swift.Equatable {}
extension DIGIPROSDK.PKCS5.PBKDF1.Variant : Swift.Hashable {}
extension DIGIPROSDK.CBC.Error : Swift.Equatable {}
extension DIGIPROSDK.CBC.Error : Swift.Hashable {}
extension DIGIPROSDK.CipherError : Swift.Equatable {}
extension DIGIPROSDK.CipherError : Swift.Hashable {}
extension DIGIPROSDK.HeroTransitionState : Swift.Equatable {}
extension DIGIPROSDK.HeroTransitionState : Swift.Hashable {}
extension DIGIPROSDK.HeroTransitionState : Swift.RawRepresentable {}
extension DIGIPROSDK.SwiftyJSONError : Swift.Equatable {}
extension DIGIPROSDK.SwiftyJSONError : Swift.Hashable {}
extension DIGIPROSDK.SwiftyJSONError : Swift.RawRepresentable {}
extension DIGIPROSDK.`Type` : Swift.Equatable {}
extension DIGIPROSDK.`Type` : Swift.Hashable {}
extension DIGIPROSDK.`Type` : Swift.RawRepresentable {}
extension DIGIPROSDK.writingOptionsKeys : Swift.Equatable {}
extension DIGIPROSDK.writingOptionsKeys : Swift.Hashable {}
extension DIGIPROSDK.AES.Error : Swift.Equatable {}
extension DIGIPROSDK.AES.Error : Swift.Hashable {}
extension DIGIPROSDK.AES.Variant : Swift.Equatable {}
extension DIGIPROSDK.AES.Variant : Swift.Hashable {}
extension DIGIPROSDK.AES.Variant : Swift.RawRepresentable {}
extension DIGIPROSDK.Corner : Swift.Equatable {}
extension DIGIPROSDK.Corner : Swift.Hashable {}
extension DIGIPROSDK.HeroViewOrderingStrategy : Swift.Equatable {}
extension DIGIPROSDK.HeroViewOrderingStrategy : Swift.Hashable {}
extension DIGIPROSDK.Rabbit.Error : Swift.Equatable {}
extension DIGIPROSDK.Rabbit.Error : Swift.Hashable {}
extension DIGIPROSDK.JSONSerializer.JSONSerializerError : Swift.Equatable {}
extension DIGIPROSDK.JSONSerializer.JSONSerializerError : Swift.Hashable {}
extension DIGIPROSDK.BannerStyle : Swift.Equatable {}
extension DIGIPROSDK.BannerStyle : Swift.Hashable {}
extension DIGIPROSDK.HKDF.Error : Swift.Equatable {}
extension DIGIPROSDK.HKDF.Error : Swift.Hashable {}
extension DIGIPROSDK.LogType : Swift.Equatable {}
extension DIGIPROSDK.LogType : Swift.Hashable {}
extension DIGIPROSDK.LogType : Swift.RawRepresentable {}
extension DIGIPROSDK.enumColorDefault : Swift.Equatable {}
extension DIGIPROSDK.enumColorDefault : Swift.Hashable {}
extension DIGIPROSDK.enumColorDefault : Swift.RawRepresentable {}
extension DIGIPROSDK.EnumTipoSms : Swift.Equatable {}
extension DIGIPROSDK.EnumTipoSms : Swift.Hashable {}
extension DIGIPROSDK.EnumTipoSms : Swift.RawRepresentable {}
extension DIGIPROSDK.Language : Swift.Equatable {}
extension DIGIPROSDK.Language : Swift.Hashable {}
extension DIGIPROSDK.Language : Swift.RawRepresentable {}
extension DIGIPROSDK.enumErrorType : Swift.Equatable {}
extension DIGIPROSDK.enumErrorType : Swift.Hashable {}
extension DIGIPROSDK.enumErrorType : Swift.RawRepresentable {}
extension DIGIPROSDK.httpMethod : Swift.Equatable {}
extension DIGIPROSDK.httpMethod : Swift.Hashable {}
extension DIGIPROSDK.httpMethod : Swift.RawRepresentable {}
extension DIGIPROSDK.plist : Swift.Equatable {}
extension DIGIPROSDK.plist : Swift.Hashable {}
extension DIGIPROSDK.plist : Swift.RawRepresentable {}
extension DIGIPROSDK.TipoElemento : Swift.Equatable {}
extension DIGIPROSDK.TipoElemento : Swift.Hashable {}
extension DIGIPROSDK.TipoElemento : Swift.RawRepresentable {}
extension DIGIPROSDK.APISuccessResponse : Swift.Equatable {}
extension DIGIPROSDK.APISuccessResponse : Swift.Hashable {}
extension DIGIPROSDK.APISuccessResponse : Swift.RawRepresentable {}
extension DIGIPROSDK.ApiErrors : Swift.Equatable {}
extension DIGIPROSDK.ApiErrors : Swift.Hashable {}
extension DIGIPROSDK.ApiErrors : Swift.RawRepresentable {}
extension DIGIPROSDK.Domain : Swift.Equatable {}
extension DIGIPROSDK.Domain : Swift.Hashable {}
extension DIGIPROSDK.Domain : Swift.RawRepresentable {}
extension DIGIPROSDK.BannerPosition : Swift.Equatable {}
extension DIGIPROSDK.BannerPosition : Swift.Hashable {}
extension Foundation.Data.CompressionAlgorithm : Swift.Equatable {}
extension Foundation.Data.CompressionAlgorithm : Swift.Hashable {}
extension DIGIPROSDK.CTR : DIGIPROSDK.BlockMode {}
extension DIGIPROSDK.CTR.Error : Swift.Equatable {}
extension DIGIPROSDK.CTR.Error : Swift.Hashable {}
extension DIGIPROSDK.enum_servicio : Swift.Equatable {}
extension DIGIPROSDK.enum_servicio : Swift.Hashable {}
extension DIGIPROSDK.MarqueeLabel.MarqueeType : Swift.Equatable {}
extension DIGIPROSDK.MarqueeLabel.MarqueeType : Swift.Hashable {}
extension DIGIPROSDK.GCM.Mode : Swift.Equatable {}
extension DIGIPROSDK.GCM.Mode : Swift.Hashable {}
extension DIGIPROSDK.GCM.Error : Swift.Equatable {}
extension DIGIPROSDK.GCM.Error : Swift.Hashable {}
extension DIGIPROSDK.CFB.Error : Swift.Equatable {}
extension DIGIPROSDK.CFB.Error : Swift.Hashable {}
extension DIGIPROSDK.HeroDefaultAnimationType.Direction : Swift.Equatable {}
extension DIGIPROSDK.HeroDefaultAnimationType.Direction : Swift.Hashable {}
extension DIGIPROSDK.Blowfish.Error : Swift.Equatable {}
extension DIGIPROSDK.Blowfish.Error : Swift.Hashable {}
extension DIGIPROSDK.Typeformula : Swift.Equatable {}
extension DIGIPROSDK.Typeformula : Swift.Hashable {}
extension DIGIPROSDK.Typeformula : Swift.RawRepresentable {}
extension DIGIPROSDK.Padding : Swift.Equatable {}
extension DIGIPROSDK.Padding : Swift.Hashable {}
extension DIGIPROSDK.Device.Orientation : Swift.Equatable {}
extension DIGIPROSDK.Device.Orientation : Swift.Hashable {}
extension DIGIPROSDK.Device.CameraTypes : Swift.Equatable {}
extension DIGIPROSDK.Device.CameraTypes : Swift.Hashable {}
extension DIGIPROSDK.Bit : Swift.Equatable {}
extension DIGIPROSDK.Bit : Swift.Hashable {}
extension DIGIPROSDK.Bit : Swift.RawRepresentable {}
extension DIGIPROSDK.PCBC.Error : Swift.Equatable {}
extension DIGIPROSDK.PCBC.Error : Swift.Hashable {}
extension DIGIPROSDK.AEXMLError : Swift.Equatable {}
extension DIGIPROSDK.AEXMLError : Swift.Hashable {}
extension DIGIPROSDK.KeyboardTranslationType : Swift.Equatable {}
extension DIGIPROSDK.KeyboardTranslationType : Swift.Hashable {}
extension DIGIPROSDK.EasyTipView.ArrowPosition : Swift.Equatable {}
extension DIGIPROSDK.EasyTipView.ArrowPosition : Swift.Hashable {}
extension DIGIPROSDK.QueuePosition : Swift.Equatable {}
extension DIGIPROSDK.QueuePosition : Swift.Hashable {}
extension DIGIPROSDK.PKCS5.PBKDF2.Error : Swift.Equatable {}
extension DIGIPROSDK.PKCS5.PBKDF2.Error : Swift.Hashable {}
extension DIGIPROSDK.enum_metodo : Swift.Equatable {}
extension DIGIPROSDK.enum_metodo : Swift.Hashable {}
extension DIGIPROSDK.OFB.Error : Swift.Equatable {}
extension DIGIPROSDK.OFB.Error : Swift.Hashable {}
extension DIGIPROSDK.TipoCampo : Swift.Equatable {}
extension DIGIPROSDK.TipoCampo : Swift.Hashable {}
extension DIGIPROSDK.TipoCampo : Swift.RawRepresentable {}
